{"version":3,"file":"usePropValue-DLZTRe_e.mjs","sources":["../../src/composables/usePropValue.ts"],"sourcesContent":["import {\r\n    computed,\r\n    ref,\r\n    watch,\r\n    nextTick,\r\n    type ExtractPropTypes,\r\n    type WritableComputedRef,\r\n    type Ref,\r\n    type UnwrapRef,\r\n    type ComponentObjectPropsOptions,\r\n} from \"vue\";\r\n\r\n/**\r\n * Adaption of {@link https://vueuse.org/core/useVModel/} options.\r\n */\r\nexport interface PropBindingOptions<Passive extends boolean = false> {\r\n    /**\r\n     * When passive is set to `true`, it will use `watch` to sync with props and ref.\r\n     * Instead of relying on the `v-model` or `.sync` to work.\r\n     *\r\n     * @default false\r\n     */\r\n    passive?: Passive;\r\n    /**\r\n     * When eventName is set, it's value will be used to overwrite the emit event name.\r\n     *\r\n     * @default undefined\r\n     */\r\n    eventName?: string;\r\n    /**\r\n     * Attempting to check for changes of properties in a deeply nested object or array.\r\n     * Apply only when `passive` option is set to `true`\r\n     *\r\n     * @default false\r\n     */\r\n    deep?: boolean;\r\n}\r\n\r\nexport function usePropBinding<T>(\r\n    name: string,\r\n    props: Readonly<ExtractPropTypes<ComponentObjectPropsOptions<any>>>,\r\n    emit: (event: any, value: T) => void,\r\n    options?: PropBindingOptions<false>,\r\n): WritableComputedRef<T>;\r\n\r\nexport function usePropBinding<T>(\r\n    name: string,\r\n    props: Readonly<ExtractPropTypes<ComponentObjectPropsOptions<any>>>,\r\n    emit: (event: any, value: T) => void,\r\n    options?: PropBindingOptions<true>,\r\n): Ref<UnwrapRef<T>>;\r\n\r\n/**\r\n * Use two-way model binding in script setup syntax.\r\n * Adaption of {@link https://vueuse.org/core/useVModel/}.\r\n * @param name Property name\r\n * @param props Readonly<ExtractPropTypes<ComponentObjectPropsOptions>>\r\n * @param emit EmitFn\r\n * @param options Extened usage options\r\n * @returns Ref<T>\r\n */\r\nexport function usePropBinding<T, Passive extends boolean>(\r\n    name: string,\r\n    props: Readonly<ExtractPropTypes<ComponentObjectPropsOptions<any>>>,\r\n    emit: (event: any, value: T) => void,\r\n    options?: PropBindingOptions<Passive>,\r\n): Ref<UnwrapRef<T>> | WritableComputedRef<T> {\r\n    const event = options?.eventName || `update:${name!.toString()}`;\r\n\r\n    if (options?.passive) {\r\n        const proxy = ref<T>(props[name!]);\r\n        let isUpdating = false;\r\n\r\n        watch(\r\n            () => props[name!],\r\n            (value) => {\r\n                if (!isUpdating) {\r\n                    isUpdating = true;\r\n                    proxy.value = value;\r\n                    nextTick(() => (isUpdating = false));\r\n                }\r\n            },\r\n        );\r\n\r\n        watch(\r\n            proxy,\r\n            (value) => {\r\n                if ((!isUpdating && value !== props[name!]) || options.deep)\r\n                    emit(event, value as T);\r\n            },\r\n            { deep: options.deep },\r\n        );\r\n\r\n        return proxy;\r\n    } else {\r\n        return computed<T>({\r\n            get() {\r\n                return props[name!] as T;\r\n            },\r\n            set(value) {\r\n                emit(event, value);\r\n            },\r\n        });\r\n    }\r\n}\r\n\r\nexport function useVModelBinding<T>(\r\n    props: Readonly<ExtractPropTypes<ComponentObjectPropsOptions>>,\r\n    emit: {\r\n        /** on input focus event */\r\n        (e: \"update:modelValue\", value: T): void;\r\n    },\r\n    options?: PropBindingOptions<false>,\r\n): WritableComputedRef<T>;\r\n\r\nexport function useVModelBinding<T>(\r\n    props: Readonly<ExtractPropTypes<ComponentObjectPropsOptions>>,\r\n    emit: {\r\n        /** on input focus event */\r\n        (e: \"update:modelValue\", value: T): void;\r\n    },\r\n    options?: PropBindingOptions<true>,\r\n): Ref<UnwrapRef<T>>;\r\n\r\n/**\r\n * Use two-way binded modelValue property in script setup syntax.\r\n * Adaption of {@link https://vueuse.org/core/useVModel/}.\r\n * @param props Readonly<ExtractPropTypes<ComponentObjectPropsOptions>>\r\n * @param emit EmitFn\r\n * @param options Extened usage options\r\n * @returns Ref<T>\r\n */\r\nexport function useVModelBinding<T, Options extends PropBindingOptions>(\r\n    props: Readonly<ExtractPropTypes<ComponentObjectPropsOptions>>,\r\n    emit: {\r\n        /** on input focus event */\r\n        (e: \"update:modelValue\", value: T): void;\r\n    },\r\n    options?: Options,\r\n): WritableComputedRef<T> | Ref<UnwrapRef<T>> {\r\n    return usePropBinding(\"modelValue\", props, emit, options);\r\n}\r\n"],"names":[],"mappings":";;AA6DO,SAAS,eACZ,MACA,OACA,MACA,SAC0C;AAC1C,QAAM,SAAQ,mCAAS,cAAa,UAAU,KAAM,SAAU,CAAA;AAE9D,MAAI,mCAAS,SAAS;AAClB,UAAM,QAAQ,IAAO,MAAM,IAAK,CAAC;AACjC,QAAI,aAAa;AAEjB;AAAA,MACI,MAAM,MAAM,IAAK;AAAA,MACjB,CAAC,UAAU;AACP,YAAI,CAAC,YAAY;AACA,uBAAA;AACb,gBAAM,QAAQ;AACL,mBAAA,MAAO,aAAa,KAAM;AAAA,QACvC;AAAA,MACJ;AAAA,IAAA;AAGJ;AAAA,MACI;AAAA,MACA,CAAC,UAAU;AACP,YAAK,CAAC,cAAc,UAAU,MAAM,IAAK,KAAM,QAAQ;AACnD,eAAK,OAAO,KAAU;AAAA,MAC9B;AAAA,MACA,EAAE,MAAM,QAAQ,KAAK;AAAA,IAAA;AAGlB,WAAA;AAAA,EAAA,OACJ;AACH,WAAO,SAAY;AAAA,MACf,MAAM;AACF,eAAO,MAAM,IAAK;AAAA,MACtB;AAAA,MACA,IAAI,OAAO;AACP,aAAK,OAAO,KAAK;AAAA,MACrB;AAAA,IAAA,CACH;AAAA,EACL;AACJ;AA4BgB,SAAA,iBACZ,OACA,MAIA,SAC0C;AAC1C,SAAO,eAAe,cAAc,OAAO,MAAM,OAAO;AAC5D;"}