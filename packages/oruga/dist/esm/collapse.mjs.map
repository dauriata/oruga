{"version":3,"file":"collapse.mjs","sources":["../../src/components/collapse/Collapse.vue","../../src/components/collapse/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { type PropType } from \"vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport { uuid } from \"@/utils/helpers\";\r\nimport { defineClasses, usePropBinding } from \"@/composables\";\r\n\r\nimport type { ComponentClass } from \"@/types\";\r\n\r\n/**\r\n * An easy way to toggle what you want\r\n * @displayName Collapse\r\n * @style _collapse.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OCollapse\",\r\n    configField: \"collapse\",\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** Whether collapse is open or not, use v-model:open to make it two-way binding */\r\n    open: { type: Boolean, default: true },\r\n    /** Custom animation (transition name) */\r\n    animation: {\r\n        type: String,\r\n        default: () => getOption(\"collapse.animation\", \"fade\"),\r\n    },\r\n    /** Id property of the content container */\r\n    contentId: { type: String, default: () => uuid() },\r\n    /**\r\n     * Trigger position\r\n     * @values top, bottom\r\n     */\r\n    position: {\r\n        type: String as PropType<\"top\" | \"bottom\">,\r\n        default: () => getOption(\"collapse.position\", \"top\"),\r\n        validator: (value: string) => [\"top\", \"bottom\"].indexOf(value) > -1,\r\n    },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the trigger element */\r\n    triggerClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the content */\r\n    contentClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * open prop two-way binding\r\n     * @param value {boolean} updated open prop\r\n     */\r\n    (e: \"update:open\", value: boolean): void;\r\n    /** on collapse opened */\r\n    (e: \"open\"): void;\r\n    /** on collapse closed */\r\n    (e: \"close\"): void;\r\n}>();\r\n\r\nconst isOpen = usePropBinding<boolean>(\"open\", props, emits, { passive: true });\r\n\r\n/** Toggle and emit events */\r\nfunction toggle(): void {\r\n    isOpen.value = !isOpen.value;\r\n    isOpen.value ? emits(\"open\") : emits(\"close\");\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses([\"rootClass\", \"o-clps\"]);\r\n\r\nconst triggerClasses = defineClasses([\"triggerClass\", \"o-clps__trigger\"]);\r\n\r\nconst contentClasses = defineClasses([\"contentClass\", \"o-clps__content\"]);\r\n</script>\r\n\r\n<template>\r\n    <div :class=\"rootClasses\" data-oruga=\"collapse\">\r\n        <div\r\n            v-if=\"position === 'top'\"\r\n            :class=\"triggerClasses\"\r\n            role=\"button\"\r\n            tabindex=\"0\"\r\n            @click=\"toggle\"\r\n            @keydown.enter=\"toggle\">\r\n            <!--\r\n                @slot Define the collapse trigger\r\n                @binding {boolean} open collapse open state \r\n             -->\r\n            <slot name=\"trigger\" :open=\"isOpen\" />\r\n        </div>\r\n\r\n        <Transition :name=\"animation\">\r\n            <div v-show=\"isOpen\" :id=\"contentId\" :class=\"contentClasses\">\r\n                <!--\r\n                    @slot Default content\r\n                -->\r\n                <slot />\r\n            </div>\r\n        </Transition>\r\n\r\n        <div\r\n            v-if=\"position === 'bottom'\"\r\n            :class=\"triggerClasses\"\r\n            role=\"button\"\r\n            tabindex=\"0\"\r\n            @click=\"toggle\"\r\n            @keydown.enter=\"toggle\">\r\n            <!--\r\n                @slot Define the collapse trigger\r\n                @binding {boolean} open collapse open state \r\n             -->\r\n            <slot name=\"trigger\" :open=\"isOpen\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n","import type { App, Plugin } from \"vue\";\r\n\r\nimport Collapse from \"./Collapse.vue\";\r\n\r\nimport { registerComponent } from \"@/utils/plugins\";\r\n\r\n/** export collapse plugin */\r\nexport default {\r\n    install(app: App) {\r\n        registerComponent(app, Collapse);\r\n    },\r\n} as Plugin;\r\n\r\n/** export collapse components */\r\nexport { Collapse as OCollapse };\r\n"],"names":["Collapse"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,UAAM,QAAQ;AAuCd,UAAM,QAAQ;AAYR,UAAA,SAAS,eAAwB,QAAQ,OAAO,OAAO,EAAE,SAAS,MAAM;AAG9E,aAAS,SAAe;AACb,aAAA,QAAQ,CAAC,OAAO;AACvB,aAAO,QAAQ,MAAM,MAAM,IAAI,MAAM,OAAO;AAAA,IAChD;AAIA,UAAM,cAAc,cAAc,CAAC,aAAa,QAAQ,CAAC;AAEzD,UAAM,iBAAiB,cAAc,CAAC,gBAAgB,iBAAiB,CAAC;AAExE,UAAM,iBAAiB,cAAc,CAAC,gBAAgB,iBAAiB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9ExE,MAAe,QAAA;AAAA,EACX,QAAQ,KAAU;AACd,sBAAkB,KAAKA,SAAQ;AAAA,EACnC;AACJ;"}