{"version":3,"file":"useParentProvider-C8ssHz7C.mjs","sources":["../../src/composables/useParentProvider.ts"],"sourcesContent":["import {\r\n    computed,\r\n    getCurrentInstance,\r\n    inject,\r\n    nextTick,\r\n    onUnmounted,\r\n    provide,\r\n    ref,\r\n    type Component,\r\n    type ComputedRef,\r\n    type Ref,\r\n} from \"vue\";\r\nimport { unrefElement } from \"./unrefElement\";\r\n\r\nexport type ProviderItem<T = unknown> = {\r\n    index: number;\r\n    data: ComputedRef<T>;\r\n    identifier: string;\r\n};\r\n\r\ntype PovidedData<P, I = unknown> = {\r\n    registerItem: (data: ComputedRef<I>) => ProviderItem<I>;\r\n    unregisterItem: (item: ProviderItem<I>) => void;\r\n    data?: ComputedRef<P>;\r\n};\r\n\r\ntype ProviderParentOptions<T = unknown> = {\r\n    /**\r\n     * Override the provide/inject key.\r\n     * Default is the component configField attribute\r\n     */\r\n    key?: string;\r\n    /**\r\n     * Additional data provided for the child to the item\r\n     */\r\n    data?: ComputedRef<T>;\r\n};\r\n\r\n/**\r\n * Provide functionalities and data to child components\r\n * @param rootRef Root element of the provider component\r\n * @param data Additional data to provide\r\n * @param options additional options\r\n */\r\nexport function useProviderParent<ItemData = unknown, ParentData = unknown>(\r\n    rootRef?: Ref<HTMLElement | Component>,\r\n    options?: ProviderParentOptions<ParentData>,\r\n): {\r\n    childItems: Ref<ProviderItem<ItemData>[]>;\r\n    sortedItems: Ref<ProviderItem<ItemData>[]>;\r\n} {\r\n    // getting a hold of the internal instance in setup()\r\n    const vm = getCurrentInstance();\r\n    if (!vm)\r\n        throw new Error(\r\n            \"useProviderChild must be called within a component setup function.\",\r\n        );\r\n\r\n    const configField = vm.proxy?.$options.configField;\r\n    const key = options?.key ? options.key : configField;\r\n\r\n    const childItems = ref<ProviderItem<ItemData>[]>([]) as Ref<\r\n        ProviderItem<ItemData>[]\r\n    >;\r\n    const sequence = ref(1);\r\n\r\n    /**\r\n     * When items are added/removed sort them according to their position\r\n     */\r\n    const sortedItems = computed(() =>\r\n        childItems.value.slice().sort((a, b) => a.index - b.index),\r\n    );\r\n\r\n    function registerItem(\r\n        data?: ComputedRef<ItemData>,\r\n    ): ProviderItem<ItemData> {\r\n        const index = childItems.value.length;\r\n        const identifier = nextSequence();\r\n        const item = { index, data, identifier };\r\n        childItems.value.push(item);\r\n        if (rootRef?.value) {\r\n            nextTick(() => {\r\n                const ids = childItems.value\r\n                    .map((item) => `[data-id=\"${key}-${item.identifier}\"]`)\r\n                    .join(\",\");\r\n                const parent = unrefElement(rootRef);\r\n                const children = parent.querySelectorAll(ids);\r\n                const sortedIds = Array.from(children).map((el: any) =>\r\n                    el.getAttribute(\"data-id\").replace(`${key}-`, \"\"),\r\n                );\r\n\r\n                childItems.value.forEach(\r\n                    (item) =>\r\n                        (item.index = sortedIds.indexOf(`${item.identifier}`)),\r\n                );\r\n            });\r\n        }\r\n        return item;\r\n    }\r\n\r\n    function unregisterItem(item: ProviderItem): void {\r\n        childItems.value = childItems.value.filter((i) => i !== item);\r\n    }\r\n\r\n    function nextSequence(): string {\r\n        return String(sequence.value++);\r\n    }\r\n\r\n    /** Provide functionality for child components via dependency injection. */\r\n    provide<PovidedData<ParentData, ItemData>>(\"$o-\" + key, {\r\n        registerItem,\r\n        unregisterItem,\r\n        data: options?.data,\r\n    });\r\n\r\n    return {\r\n        childItems,\r\n        sortedItems,\r\n    };\r\n}\r\n\r\ntype ProviderChildOptions<T = unknown> = {\r\n    /**\r\n     * Override the provide/inject key.\r\n     * Default is the component configField attribute\r\n     */\r\n    key?: string;\r\n    /**\r\n     * Does the child need the be below the parent?\r\n     * @default true\r\n     */\r\n    needParent?: boolean;\r\n    /**\r\n     * Additional data appended to the item\r\n     */\r\n    data?: ComputedRef<T>;\r\n    /**\r\n     * Register child on parent\r\n     * @default true\r\n     */\r\n    register?: boolean;\r\n};\r\n\r\n/**\r\n * Inject functionalities and data from parent components\r\n * @param options additional options\r\n */\r\nexport function useProviderChild<ParentData, ItemData = unknown>(\r\n    options: ProviderChildOptions<ItemData> = { needParent: true },\r\n): { parent: ComputedRef<ParentData>; item: Ref<ProviderItem<ItemData>> } {\r\n    // getting a hold of the internal instance in setup()\r\n    const vm = getCurrentInstance();\r\n    if (!vm)\r\n        throw new Error(\r\n            \"useProviderChild must be called within a component setup function.\",\r\n        );\r\n\r\n    const configField = vm.proxy?.$options.configField;\r\n    const key = options?.key ? options.key : configField;\r\n\r\n    /** Inject parent component functionality if used inside one **/\r\n    const parent = inject<PovidedData<ParentData, ItemData>>(\r\n        \"$o-\" + key,\r\n        undefined,\r\n    );\r\n\r\n    const needParent =\r\n        typeof options.needParent === \"undefined\" || options.needParent;\r\n\r\n    const register =\r\n        typeof options.register === \"undefined\" || options.register;\r\n\r\n    if (needParent && !parent) {\r\n        throw new Error(\r\n            `You should wrap ${vm.proxy.$options.name} in a ${key} component`,\r\n        );\r\n    }\r\n\r\n    const item = ref<ProviderItem<ItemData>>();\r\n\r\n    if (parent && register) item.value = parent.registerItem(options.data);\r\n\r\n    onUnmounted(() => {\r\n        if (parent && item.value) parent.unregisterItem(item.value);\r\n    });\r\n\r\n    return { parent: parent?.data, item: item };\r\n}\r\n"],"names":["item"],"mappings":";;;AA4CgB,SAAA,kBACZ,SACA,SAIF;;AAEE,QAAM,KAAK;AACX,MAAI,CAAC;AACD,UAAM,IAAI;AAAA,MACN;AAAA,IAAA;AAGF,QAAA,eAAc,QAAG,UAAH,mBAAU,SAAS;AACvC,QAAM,OAAM,mCAAS,OAAM,QAAQ,MAAM;AAEnC,QAAA,aAAa,IAA8B,CAAA,CAAE;AAG7C,QAAA,WAAW,IAAI,CAAC;AAKtB,QAAM,cAAc;AAAA,IAAS,MACzB,WAAW,MAAM,MAAA,EAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AAAA,EAAA;AAG7D,WAAS,aACL,MACsB;AAChB,UAAA,QAAQ,WAAW,MAAM;AAC/B,UAAM,aAAa;AACnB,UAAM,OAAO,EAAE,OAAO,MAAM,WAAW;AAC5B,eAAA,MAAM,KAAK,IAAI;AAC1B,QAAI,mCAAS,OAAO;AAChB,eAAS,MAAM;AACX,cAAM,MAAM,WAAW,MAClB,IAAI,CAACA,UAAS,aAAa,GAAG,IAAIA,MAAK,UAAU,IAAI,EACrD,KAAK,GAAG;AACP,cAAA,SAAS,aAAa,OAAO;AAC7B,cAAA,WAAW,OAAO,iBAAiB,GAAG;AAC5C,cAAM,YAAY,MAAM,KAAK,QAAQ,EAAE;AAAA,UAAI,CAAC,OACxC,GAAG,aAAa,SAAS,EAAE,QAAQ,GAAG,GAAG,KAAK,EAAE;AAAA,QAAA;AAGpD,mBAAW,MAAM;AAAA,UACb,CAACA,UACIA,MAAK,QAAQ,UAAU,QAAQ,GAAGA,MAAK,UAAU,EAAE;AAAA,QAAA;AAAA,MAC5D,CACH;AAAA,IACL;AACO,WAAA;AAAA,EACX;AAEA,WAAS,eAAe,MAA0B;AAC9C,eAAW,QAAQ,WAAW,MAAM,OAAO,CAAC,MAAM,MAAM,IAAI;AAAA,EAChE;AAEA,WAAS,eAAuB;AACrB,WAAA,OAAO,SAAS,OAAO;AAAA,EAClC;AAGA,UAA2C,QAAQ,KAAK;AAAA,IACpD;AAAA,IACA;AAAA,IACA,MAAM,mCAAS;AAAA,EAAA,CAClB;AAEM,SAAA;AAAA,IACH;AAAA,IACA;AAAA,EAAA;AAER;AA4BO,SAAS,iBACZ,UAA0C,EAAE,YAAY,QACc;;AAEtE,QAAM,KAAK;AACX,MAAI,CAAC;AACD,UAAM,IAAI;AAAA,MACN;AAAA,IAAA;AAGF,QAAA,eAAc,QAAG,UAAH,mBAAU,SAAS;AACvC,QAAM,OAAM,mCAAS,OAAM,QAAQ,MAAM;AAGzC,QAAM,SAAS;AAAA,IACX,QAAQ;AAAA,IACR;AAAA,EAAA;AAGJ,QAAM,aACF,OAAO,QAAQ,eAAe,eAAe,QAAQ;AAEzD,QAAM,WACF,OAAO,QAAQ,aAAa,eAAe,QAAQ;AAEnD,MAAA,cAAc,CAAC,QAAQ;AACvB,UAAM,IAAI;AAAA,MACN,mBAAmB,GAAG,MAAM,SAAS,IAAI,SAAS,GAAG;AAAA,IAAA;AAAA,EAE7D;AAEA,QAAM,OAAO;AAEb,MAAI,UAAU;AAAU,SAAK,QAAQ,OAAO,aAAa,QAAQ,IAAI;AAErE,cAAY,MAAM;AACd,QAAI,UAAU,KAAK;AAAc,aAAA,eAAe,KAAK,KAAK;AAAA,EAAA,CAC7D;AAED,SAAO,EAAE,QAAQ,iCAAQ,MAAM,KAAW;AAC9C;"}