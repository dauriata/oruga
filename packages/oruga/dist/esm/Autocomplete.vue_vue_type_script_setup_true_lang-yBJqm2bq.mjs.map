{"version":3,"file":"Autocomplete.vue_vue_type_script_setup_true_lang-yBJqm2bq.mjs","sources":["../../src/components/autocomplete/Autocomplete.vue"],"sourcesContent":["<script setup lang=\"ts\" generic=\"T extends String | Number | Object\">\r\nimport {\r\n    computed,\r\n    nextTick,\r\n    ref,\r\n    watch,\r\n    watchEffect,\r\n    useAttrs,\r\n    toRaw,\r\n    onMounted,\r\n    useSlots,\r\n    type PropType,\r\n    type Component,\r\n} from \"vue\";\r\n\r\nimport OInput from \"../input/Input.vue\";\r\nimport ODropdown from \"../dropdown/Dropdown.vue\";\r\nimport ODropdownItem from \"../dropdown/DropdownItem.vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport { getValueByPath, uuid } from \"@/utils/helpers\";\r\nimport { isClient } from \"@/utils/ssr\";\r\nimport {\r\n    unrefElement,\r\n    defineClasses,\r\n    useInputHandler,\r\n    useDebounce,\r\n    useEventListener,\r\n} from \"@/composables\";\r\n\r\nimport type { ComponentClass, DynamicComponent, ClassBind } from \"@/types\";\r\n\r\nenum SpecialOption {\r\n    Header,\r\n    Footer,\r\n}\r\n\r\n/** True if the specified option is a special option. */\r\nfunction isSpecialOption(option: any): option is SpecialOption {\r\n    return option in SpecialOption;\r\n}\r\n\r\n/**\r\n * Extended input that provide suggestions while the user types\r\n * @displayName Autocomplete\r\n * @style _autocomplete.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OAutocomplete\",\r\n    configField: \"autocomplete\",\r\n    inheritAttrs: false,\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** @model */\r\n    modelValue: { type: [String, Number], default: undefined },\r\n    /** Input type */\r\n    type: { type: String, default: \"text\" },\r\n    /** Menu tag name */\r\n    menuTag: {\r\n        type: [String, Object, Function] as PropType<DynamicComponent>,\r\n        default: () =>\r\n            getOption<DynamicComponent>(\"autocomplete.menuTag\", \"div\"),\r\n    },\r\n    /** Menu item tag name */\r\n    itemTag: {\r\n        type: [String, Object, Function] as PropType<DynamicComponent>,\r\n        default: () =>\r\n            getOption<DynamicComponent>(\"autocomplete.itemTag\", \"div\"),\r\n    },\r\n    /** Options / suggestions */\r\n    data: { type: Array as PropType<T[]>, default: () => [] },\r\n    /**\r\n     * Size of the control\r\n     * @values small, medium, large\r\n     */\r\n    size: {\r\n        type: String,\r\n        default: () => getOption(\"autocomplete.size\"),\r\n    },\r\n    /**\r\n     * Position of the dropdown\r\n     * @values auto, top, bottom\r\n     */\r\n    position: {\r\n        type: String,\r\n        default: () => getOption(\"autocomplete.position\", \"auto\"),\r\n        validator: (value: string) =>\r\n            [\"auto\", \"top\", \"bottom\"].indexOf(value) >= 0,\r\n    },\r\n    /** Property of the object (if data is array of objects) to use as display text, and to keep track of selected option */\r\n    field: { type: String, default: undefined },\r\n    /** Property of the object (if `data` is array of objects) to use as display text of group */\r\n    groupField: { type: String, default: undefined },\r\n    /** Property of the object (if `data` is array of objects) to use as key to get items array of each group */\r\n    groupOptions: { type: String, default: undefined },\r\n    /** Function to format an option to a string for display in the input (as alternative to field prop) */\r\n    formatter: {\r\n        type: Function as PropType<(value: unknown) => string | number>,\r\n        default: undefined,\r\n    },\r\n    /** Input placeholder */\r\n    placeholder: { type: String, default: undefined },\r\n    /** Makes input full width when inside a grouped or addon field */\r\n    expanded: { type: Boolean, default: false },\r\n    /** Makes the element rounded */\r\n    rounded: { type: Boolean, default: false },\r\n    /** Same as native input disabled */\r\n    disabled: { type: Boolean, default: false },\r\n    /** Same as native maxlength, plus character counter */\r\n    maxlength: { type: Number, default: undefined },\r\n    /** Makes the component check if list reached scroll start or end and emit scroll events. */\r\n    checkScroll: {\r\n        type: Boolean,\r\n        default: () => getOption(\"autocomplete.checkScroll\", false),\r\n    },\r\n    /** Number of milliseconds to delay before to emit input event */\r\n    debounce: {\r\n        type: Number,\r\n        default: () => getOption(\"autocomplete.debounce\", 400),\r\n    },\r\n    /** The first option will always be pre-selected (easier to just hit enter or tab) */\r\n    keepFirst: {\r\n        type: Boolean,\r\n        default: () => getOption(\"autocomplete.keepFirst\", false),\r\n    },\r\n    /** Clear input text on select */\r\n    clearOnSelect: {\r\n        type: Boolean,\r\n        default: () => getOption(\"autocomplete.clearOnSelect\", false),\r\n    },\r\n    /** Open dropdown list on focus */\r\n    openOnFocus: {\r\n        type: Boolean,\r\n        default: () => getOption(\"autocomplete.openOnFocus\", false),\r\n    },\r\n    /** Keep open dropdown list after select */\r\n    keepOpen: {\r\n        type: Boolean,\r\n        default: () => getOption(\"autocomplete.keepOpen\", false),\r\n    },\r\n    /** Max height of dropdown content */\r\n    maxHeight: {\r\n        type: [String, Number],\r\n        default: () => getOption(\"autocomplete.maxHeight\"),\r\n    },\r\n    /** Array of keys (https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values) which will add a tag when typing (default tab and enter) */\r\n    confirmKeys: {\r\n        type: Array as PropType<string[]>,\r\n        default: () => getOption(\"autocomplete.confirmKeys\", [\"Tab\", \"Enter\"]),\r\n    },\r\n    /** Dropdown content (items) are shown into a modal on mobile */\r\n    mobileModal: {\r\n        type: Boolean,\r\n        default: () => getOption(\"autocomplete.mobileModal\", false),\r\n    },\r\n    /** Transition name to apply on dropdown list */\r\n    animation: {\r\n        type: String,\r\n        default: () => getOption(\"autocomplete.animation\", \"fade\"),\r\n    },\r\n    /** Trigger the select event for the first pre-selected option when clicking outside and `keep-first` is enabled */\r\n    selectOnClickOutside: { type: Boolean, default: false },\r\n    /** Allows the header in the autocomplete to be selectable */\r\n    selectableHeader: { type: Boolean, default: false },\r\n    /** Allows the footer in the autocomplete to be selectable */\r\n    selectableFooter: { type: Boolean, default: false },\r\n    /**\r\n     * Icon pack to use\r\n     * @values mdi, fa, fas and any other custom icon pack\r\n     */\r\n    iconPack: {\r\n        type: String,\r\n        default: () => getOption(\"autocomplete.iconPack\", undefined),\r\n    },\r\n    /** Icon to be shown */\r\n    icon: {\r\n        type: String,\r\n        default: () => getOption(\"autocomplete.icon\", undefined),\r\n    },\r\n    /** Makes the icon clickable */\r\n    iconClickable: { type: Boolean, default: false },\r\n    /** Icon to be added on the right side */\r\n    iconRight: {\r\n        type: String,\r\n        default: () => getOption(\"autocomplete.iconRight\", undefined),\r\n    },\r\n    /** Make the icon right clickable */\r\n    iconRightClickable: { type: Boolean, default: false },\r\n    /** Variant of right icon */\r\n    iconRightVariant: { type: String, default: undefined },\r\n    /** Add a button/icon to clear the inputed text */\r\n    clearable: {\r\n        type: Boolean,\r\n        default: () => getOption(\"autocomplete.clearable\", false),\r\n    },\r\n    /** Icon name to be added on the clear button */\r\n    clearIcon: {\r\n        type: String,\r\n        default: () => getOption(\"autocomplete.clearIcon\", \"close-circle\"),\r\n    },\r\n    /** Show status icon using field and variant prop */\r\n    statusIcon: {\r\n        type: Boolean,\r\n        default: () => getOption(\"statusIcon\", true),\r\n    },\r\n    /** Native options to use in HTML5 validation */\r\n    autocomplete: {\r\n        type: String,\r\n        default: () => getOption(\"autocomplete.autocomplete\", \"off\"),\r\n    },\r\n    /** Enable html 5 native validation */\r\n    useHtml5Validation: {\r\n        type: Boolean,\r\n        default: () => getOption(\"useHtml5Validation\", true),\r\n    },\r\n    /** The message which is shown when a validation error occurs */\r\n    validationMessage: { type: String, default: undefined },\r\n    /**\r\n     * Append the component to another part of the DOM.\r\n     * Set `true` to append the component to the body.\r\n     * In addition, any CSS selector string or an actual DOM node can be used.\r\n     */\r\n    teleport: {\r\n        type: [Boolean, String, Object],\r\n        default: () => getOption(\"autocomplete.teleport\", false),\r\n    },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the menu items */\r\n    itemClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the menu items on hover */\r\n    itemHoverClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the menu items group title */\r\n    itemGroupTitleClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the menu empty placeholder item */\r\n    itemEmptyClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the menu header item */\r\n    itemHeaderClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the menu footer item */\r\n    itemFooterClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /**\r\n     * Classes to apply on internal input component\r\n     * @ignore\r\n     */\r\n    inputClasses: {\r\n        type: Object,\r\n        default: () => getOption(\"autocomplete.inputClasses\", {}),\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * modelValue prop two-way binding\r\n     * @param value {string | number} updated modelValue prop\r\n     */\r\n    (e: \"update:modelValue\", value: string | number): void;\r\n    /**\r\n     * on input change event\r\n     * @param value {string | number} input value\r\n     */\r\n    (e: \"input\", value: string | number): void;\r\n    /**\r\n     * selected element changed event\r\n     * @param value {string | number | object} selected value\r\n     */\r\n    (e: \"select\", value: T, evt: Event): void;\r\n    /**\r\n     * header is selected\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"select-header\", event: Event): void;\r\n    /**\r\n     * footer is selected\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"select-footer\", event: Event): void;\r\n    /**\r\n     * on input focus event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"focus\", event: Event): void;\r\n    /**\r\n     * on input blur event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"blur\", event: Event): void;\r\n    /**\r\n     * on input invalid event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"invalid\", event: Event): void;\r\n    /**\r\n     * on icon click event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"icon-click\", event: Event): void;\r\n    /**\r\n     * on icon right click event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"icon-right-click\", event: Event): void;\r\n    /** the list inside the dropdown reached the start */\r\n    (e: \"scroll-start\"): void;\r\n    /** the list inside the dropdown reached it's end */\r\n    (e: \"scroll-end\"): void;\r\n}>();\r\n\r\nconst slots = useSlots();\r\nconst inputRef = ref<InstanceType<typeof OInput>>();\r\nconst dropdownRef = ref<InstanceType<typeof ODropdown>>();\r\nconst footerRef = ref<HTMLElement>();\r\nconst headerRef = ref<HTMLElement>();\r\nconst itemRefs = ref([]);\r\n\r\nfunction setItemRef(\r\n    el: HTMLElement | Component,\r\n    groupIndex: number,\r\n    itemIndex: number,\r\n): void {\r\n    if (groupIndex === 0 && itemIndex === 0) itemRefs.value.splice(0);\r\n    if (el) itemRefs.value.push(el);\r\n}\r\n\r\n// use form input functionalities\r\nconst { checkHtml5Validity, onInvalid, onFocus, onBlur, isFocused, setFocus } =\r\n    useInputHandler(inputRef, emits, props);\r\n\r\nconst vmodel = defineModel<string | number>({ default: undefined });\r\n\r\nconst isActive = ref(false);\r\n\r\nconst selectedOption = ref<T>();\r\nconst hoveredOption = ref<T>();\r\nconst headerHovered = ref(false);\r\nconst footerHovered = ref(false);\r\n\r\nconst hoveredId = ref(null);\r\nconst menuId = uuid();\r\n\r\n/**\r\n * When updating input's value\r\n *   1. If value isn't the same as selected, set null\r\n *   2. Close dropdown if value is clear or else open it\r\n */\r\nwatch(\r\n    () => vmodel.value,\r\n    (value) => {\r\n        // Check if selected is invalid\r\n        const currentValue = getValue(selectedOption.value);\r\n        if (currentValue && currentValue !== value) setSelected(null, false);\r\n\r\n        nextTick(() => {\r\n            // Close dropdown if data is empty\r\n            if (isEmpty.value && !slots.empty) isActive.value = false;\r\n            // Close dropdown if input is clear or else open it\r\n            else if (isFocused.value && (!props.openOnFocus || value))\r\n                isActive.value = !!value;\r\n        });\r\n    },\r\n);\r\n\r\n/** Select first option if \"keep-first\" */\r\nwatch(\r\n    () => props.data,\r\n    () => {\r\n        // Keep first option always pre-selected\r\n        if (props.keepFirst) {\r\n            nextTick(() => {\r\n                if (isActive.value) selectFirstOption();\r\n                else setHovered(null);\r\n            });\r\n        } else if (hoveredOption.value) {\r\n            // reset hovered if list doesn't contain it\r\n            const hoveredValue = getValue(hoveredOption.value);\r\n            const data = computedData.value\r\n                .map((d) => d.items)\r\n                .reduce((a, b) => [...a, ...b], []);\r\n            const index = data.findIndex((d) => getValue(d) === hoveredValue);\r\n            if (index >= 0) nextTick(() => setHoveredIdToIndex(index));\r\n            else setHovered(null);\r\n        }\r\n    },\r\n);\r\n\r\nconst computedData = computed<{ items: any; group?: any }[]>(() => {\r\n    if (props.groupField) {\r\n        if (props.groupOptions)\r\n            return props.data.map((option) => {\r\n                const group = getValueByPath(option, props.groupField);\r\n                const items = getValueByPath(option, props.groupOptions);\r\n                return { group, items };\r\n            });\r\n        else\r\n            return Object.keys(props.data).map((group) => ({\r\n                group,\r\n                items: props.data[group],\r\n            }));\r\n    }\r\n    // Return no data to avoid the full list to be shown when clearing input\r\n    if (!props.openOnFocus && !props.keepOpen && vmodel.value === \"\") {\r\n        // ...already returned nothing and dropdown closed.\r\n        return [{ items: [] }];\r\n    }\r\n    return [{ items: props.data }];\r\n});\r\n\r\nconst isEmpty = computed(\r\n    () =>\r\n        !computedData.value?.some(\r\n            (element) => element.items && element.items.length,\r\n        ),\r\n);\r\n\r\nwatch(isEmpty, (empty) => {\r\n    if (isFocused.value) isActive.value = !empty || !!slots.empty;\r\n});\r\n\r\nconst closeableOptions = computed(() => {\r\n    const options = [\"escape\"];\r\n    if (!props.keepOpen) {\r\n        options.push(\"content\");\r\n        options.push(\"outside\");\r\n    }\r\n    return options;\r\n});\r\n\r\nfunction onDropdownClose(method: string): void {\r\n    if (method === \"outside\") {\r\n        if (\r\n            props.keepFirst &&\r\n            hoveredOption.value &&\r\n            props.selectOnClickOutside\r\n        )\r\n            setSelected(hoveredOption.value, true);\r\n    }\r\n}\r\n\r\n/**\r\n * Return display text for a input option.\r\n * If object, get value from path based on given field, or else just the value.\r\n * Apply a formatter function to the label if given.\r\n */\r\nfunction getValue(option: T): string {\r\n    if (!option) return \"\";\r\n\r\n    const property =\r\n        props.field && typeof option === \"object\"\r\n            ? getValueByPath(option, props.field)\r\n            : option;\r\n\r\n    const label =\r\n        typeof props.formatter === \"function\"\r\n            ? props.formatter(property)\r\n            : property;\r\n\r\n    return label || \"\";\r\n}\r\n\r\n/** Set which option is currently hovered. */\r\nfunction setHovered(option: T | SpecialOption): void {\r\n    if (option === undefined) return;\r\n    hoveredOption.value = isSpecialOption(option) ? null : option;\r\n    headerHovered.value = option === SpecialOption.Header;\r\n    footerHovered.value = option === SpecialOption.Footer;\r\n    hoveredId.value = null;\r\n}\r\n\r\n/** Set which option is the aria-activedescendant by index. */\r\nfunction setHoveredIdToIndex(index: number): void {\r\n    const element = unrefElement(itemRefs.value[index]);\r\n    hoveredId.value = element ? element.id : null;\r\n}\r\n\r\n/**\r\n * Set which option is currently selected, update v-model,\r\n * update input value and close dropdown.\r\n */\r\nfunction setSelected(option: T, closeDropdown = true, event = undefined): void {\r\n    if (option === undefined) return;\r\n    selectedOption.value = option;\r\n    emits(\"select\", selectedOption.value, event);\r\n    if (selectedOption.value !== null) {\r\n        if (props.clearOnSelect) {\r\n            const input = inputRef.value.$el.querySelector(\"input\");\r\n            input.value = \"\";\r\n        } else {\r\n            vmodel.value = getValue(selectedOption.value);\r\n        }\r\n        setHovered(null);\r\n    }\r\n    if (closeDropdown) nextTick(() => (isActive.value = false));\r\n    checkHtml5Validity();\r\n}\r\n\r\n/** Select first option */\r\nfunction selectFirstOption(): void {\r\n    nextTick(() => {\r\n        const nonEmptyElements = computedData.value.filter(\r\n            (element) => element.items && element.items.length,\r\n        );\r\n        if (nonEmptyElements.length) {\r\n            const option = nonEmptyElements[0].items[0];\r\n            setHovered(option);\r\n            setHoveredIdToIndex(0);\r\n        } else {\r\n            setHovered(null);\r\n        }\r\n    });\r\n}\r\n\r\n/** Check if header or footer was selected. */\r\nfunction selectHeaderOrFooterByClick(\r\n    event: Event,\r\n    origin?: SpecialOption,\r\n    closeDropdown = true,\r\n): void {\r\n    if (\r\n        props.selectableHeader &&\r\n        (headerHovered.value || origin === SpecialOption.Header)\r\n    ) {\r\n        emits(\"select-header\", event);\r\n        if (origin) setHovered(null);\r\n        if (closeDropdown) isActive.value = false;\r\n    }\r\n    if (\r\n        props.selectableFooter &&\r\n        (footerHovered.value || origin === SpecialOption.Footer)\r\n    ) {\r\n        emits(\"select-footer\", event);\r\n        if (origin) setHovered(null);\r\n        if (closeDropdown) isActive.value = false;\r\n    }\r\n}\r\n\r\n// --- Event Handler ---\r\n\r\n/**\r\n * Arrows keys listener.\r\n * If dropdown is active, set hovered option, or else just open.\r\n */\r\nfunction navigateItem(direction: 1 | -1): void {\r\n    if (!isActive.value) {\r\n        isActive.value = true;\r\n        return;\r\n    }\r\n\r\n    const data = computedData.value\r\n        .map((d) => d.items)\r\n        .reduce((a, b) => [...a, ...b], []);\r\n\r\n    // add header / footer if selectable\r\n    if (headerRef.value && props.selectableHeader) data.unshift(undefined);\r\n    if (footerRef.value && props.selectableFooter) data.push(undefined);\r\n\r\n    // define current index\r\n    let index = data.map(toRaw).indexOf(toRaw(hoveredOption.value));\r\n    if (headerHovered.value) index = 0 + direction;\r\n    else if (footerHovered.value) index = data.length - 1 + direction;\r\n    else index = index + direction;\r\n\r\n    // check if index overflow\r\n    index = index > data.length - 1 ? data.length - 1 : index;\r\n    // check if index underflow\r\n    index = index < 0 ? 0 : index;\r\n\r\n    // set hover state\r\n    if (footerRef.value && props.selectableFooter && index === data.length - 1)\r\n        setHovered(SpecialOption.Footer);\r\n    else if (headerRef.value && props.selectableHeader && index === 0)\r\n        setHovered(SpecialOption.Header);\r\n    else setHovered(data[index] !== undefined ? data[index] : null);\r\n\r\n    // get items from input\r\n    let items = itemRefs.value || [];\r\n    if (headerRef.value && props.selectableHeader)\r\n        items = [headerRef.value, ...items];\r\n    if (footerRef.value && props.selectableFooter)\r\n        items = [...items, footerRef.value];\r\n\r\n    const element = unrefElement(items[index]);\r\n    if (!element) return;\r\n\r\n    // set aria-activedescendant\r\n    hoveredId.value = element.id;\r\n\r\n    // define scroll position\r\n    const dropdownMenu = unrefElement(dropdownRef.value.$content);\r\n    const visMin = dropdownMenu.scrollTop;\r\n    const visMax =\r\n        dropdownMenu.scrollTop +\r\n        dropdownMenu.clientHeight -\r\n        element.clientHeight;\r\n\r\n    if (element.offsetTop < visMin) {\r\n        // is scolled top\r\n        dropdownMenu.scrollTop = element.offsetTop;\r\n    } else if (element.offsetTop >= visMax) {\r\n        // is scolled bottom\r\n        dropdownMenu.scrollTop =\r\n            element.offsetTop -\r\n            dropdownMenu.clientHeight +\r\n            element.clientHeight;\r\n    }\r\n    // trigger scroll\r\n    if (props.checkScroll) checkDropdownScroll();\r\n}\r\n\r\n/**\r\n * Key listener.\r\n * Select the hovered option.\r\n */\r\nfunction onKeydown(event: KeyboardEvent): void {\r\n    // prevent emit submit event\r\n    if (event.key === \"Enter\") event.preventDefault();\r\n    if (props.confirmKeys.indexOf(event.key) >= 0) {\r\n        // If adding by comma, don't add the comma to the input\r\n        if (event.key === \",\") event.preventDefault();\r\n        // Close dropdown on select by Tab\r\n        const closeDropdown = !props.keepOpen || event.key === \"Tab\";\r\n        if (hoveredOption.value === null) {\r\n            // header and footer uses headerHovered && footerHovered. If header or footer\r\n            // was selected then fire event otherwise just return so a value isn't selected\r\n            selectHeaderOrFooterByClick(event, null, closeDropdown);\r\n            return;\r\n        }\r\n        setSelected(hoveredOption.value, closeDropdown, event);\r\n    }\r\n}\r\n\r\n/**\r\n * Focus listener.\r\n * If value is the same as selected, select all text.\r\n */\r\nfunction handleFocus(event: Event): void {\r\n    if (getValue(selectedOption.value) === vmodel.value) {\r\n        inputRef.value.$el.querySelector(\"input\").select();\r\n    }\r\n    if (props.openOnFocus) {\r\n        isActive.value = true;\r\n        if (props.keepFirst)\r\n            // If open on focus, update the hovered\r\n            selectFirstOption();\r\n    }\r\n    onFocus(event);\r\n}\r\n\r\n/**\r\n * Blur listener.\r\n * Close on blur.\r\n */\r\nfunction handleBlur(event: Event): void {\r\n    onBlur(event);\r\n}\r\n\r\n/** emit input change event */\r\nfunction onInput(value: string | number): void {\r\n    const currentValue = getValue(selectedOption.value);\r\n    if (currentValue && currentValue === vmodel.value) return;\r\n    debouncedInput(value);\r\n}\r\n\r\nlet debouncedInput = useDebounce(emitInput, props.debounce || 0);\r\n\r\nwatchEffect(() => {\r\n    debouncedInput = useDebounce(emitInput, props.debounce);\r\n});\r\n\r\nfunction emitInput(value: string | number): void {\r\n    emits(\"input\", value);\r\n    checkHtml5Validity();\r\n}\r\n\r\n// --- Icon Feature ---\r\n\r\nconst computedIconRight = computed(() =>\r\n    props.clearable && vmodel.value && props.clearIcon\r\n        ? props.clearIcon\r\n        : props.iconRight,\r\n);\r\n\r\nconst computedIconRightClickable = computed(() =>\r\n    props.clearable ? true : props.iconRightClickable,\r\n);\r\n\r\nfunction rightIconClick(event: Event): void {\r\n    if (props.clearable) {\r\n        vmodel.value = \"\";\r\n        setSelected(null, false);\r\n        if (props.openOnFocus) setFocus();\r\n    } else emits(\"icon-right-click\", event);\r\n}\r\n\r\n// --- InfitiveScroll Feature ---\r\n\r\nonMounted(() => {\r\n    if (isClient && props.checkScroll)\r\n        useEventListener(\r\n            \"scroll\",\r\n            checkDropdownScroll,\r\n            dropdownRef.value.$content,\r\n            { immediate: true },\r\n        );\r\n});\r\n\r\n/** Check if the scroll list inside the dropdown reached the top or it's end. */\r\nfunction checkDropdownScroll(): void {\r\n    const dropdown = unrefElement(dropdownRef.value.$content);\r\n    if (!dropdown) return;\r\n    const trashhold = dropdown.offsetTop;\r\n    const headerHeight = headerRef.value?.clientHeight || 0;\r\n    const footerHeight = (footerRef.value?.clientHeight || 0) + trashhold;\r\n    if (dropdown.clientHeight !== dropdown.scrollHeight) {\r\n        if (\r\n            dropdown.scrollTop + dropdown.clientHeight + footerHeight >=\r\n            dropdown.scrollHeight\r\n        ) {\r\n            emits(\"scroll-end\");\r\n        } else if (dropdown.scrollTop <= headerHeight) {\r\n            emits(\"scroll-start\");\r\n        }\r\n    }\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst attrs = useAttrs();\r\nconst inputBind = computed(() => ({\r\n    ...attrs,\r\n    ...props.inputClasses,\r\n}));\r\n\r\nconst rootClasses = defineClasses([\"rootClass\", \"o-acp\"]);\r\n\r\nconst itemClasses = defineClasses([\"itemClass\", \"o-acp__item\"]);\r\n\r\nconst itemEmptyClasses = defineClasses([\r\n    \"itemEmptyClass\",\r\n    \"o-acp__item--empty\",\r\n]);\r\n\r\nconst itemGroupClasses = defineClasses([\r\n    \"itemGroupTitleClass\",\r\n    \"o-acp__item-group-title\",\r\n]);\r\n\r\nconst itemHeaderClasses = defineClasses(\r\n    [\"itemHeaderClass\", \"o-acp__item-header\"],\r\n    [\"itemHoverClass\", \"o-acp__item--hover\", null, headerHovered],\r\n);\r\n\r\nconst itemFooterClasses = defineClasses(\r\n    [\"itemFooterClass\", \"o-acp__item-footer\"],\r\n    [\"itemHoverClass\", \"o-acp__item--hover\", null, footerHovered],\r\n);\r\n\r\nfunction itemOptionClasses(option): ClassBind[] {\r\n    const optionClasses = defineClasses([\r\n        \"itemHoverClass\",\r\n        \"o-acp__item--hover\",\r\n        null,\r\n        toRaw(option) === toRaw(hoveredOption.value),\r\n    ]);\r\n\r\n    return [...itemClasses.value, ...optionClasses.value];\r\n}\r\n\r\n// --- Expose Public Functionalities ---\r\n\r\n/** expose functionalities for programmatic usage */\r\ndefineExpose({ focus: setFocus });\r\n</script>\r\n\r\n<template>\r\n    <o-dropdown\r\n        ref=\"dropdownRef\"\r\n        v-model=\"selectedOption\"\r\n        v-model:active=\"isActive\"\r\n        data-oruga=\"autocomplete\"\r\n        :class=\"rootClasses\"\r\n        :menu-id=\"menuId\"\r\n        :menu-tabindex=\"-1\"\r\n        :menu-tag=\"menuTag\"\r\n        scrollable\r\n        aria-role=\"listbox\"\r\n        :tabindex=\"-1\"\r\n        :trap-focus=\"false\"\r\n        :triggers=\"[]\"\r\n        :disabled=\"disabled\"\r\n        :closeable=\"closeableOptions\"\r\n        :mobile-modal=\"mobileModal\"\r\n        :max-height=\"maxHeight\"\r\n        :animation=\"animation\"\r\n        :position=\"position\"\r\n        :teleport=\"teleport\"\r\n        :expanded=\"expanded\"\r\n        @close=\"onDropdownClose\">\r\n        <template #trigger>\r\n            <o-input\r\n                ref=\"inputRef\"\r\n                v-bind=\"inputBind\"\r\n                v-model=\"vmodel\"\r\n                :type=\"type\"\r\n                :size=\"size\"\r\n                :rounded=\"rounded\"\r\n                :icon=\"icon\"\r\n                :icon-right=\"computedIconRight\"\r\n                :icon-right-clickable=\"computedIconRightClickable\"\r\n                :icon-pack=\"iconPack\"\r\n                :placeholder=\"placeholder\"\r\n                :maxlength=\"maxlength\"\r\n                :autocomplete=\"autocomplete\"\r\n                :use-html5-validation=\"false\"\r\n                role=\"combobox\"\r\n                :aria-activedescendant=\"hoveredId\"\r\n                :aria-autocomplete=\"keepFirst ? 'both' : 'list'\"\r\n                :aria-controls=\"menuId\"\r\n                :aria-expanded=\"isActive\"\r\n                :expanded=\"expanded\"\r\n                :disabled=\"disabled\"\r\n                :status-icon=\"statusIcon\"\r\n                @update:model-value=\"onInput\"\r\n                @focus=\"handleFocus\"\r\n                @blur=\"handleBlur\"\r\n                @invalid=\"onInvalid\"\r\n                @keydown=\"onKeydown\"\r\n                @keydown.up.prevent=\"navigateItem(-1)\"\r\n                @keydown.down.prevent=\"navigateItem(1)\"\r\n                @icon-click=\"(event) => $emit('icon-click', event)\"\r\n                @icon-right-click=\"rightIconClick\" />\r\n        </template>\r\n\r\n        <o-dropdown-item\r\n            v-if=\"$slots.header\"\r\n            :id=\"`${menuId}-header`\"\r\n            ref=\"headerRef\"\r\n            :tag=\"itemTag\"\r\n            aria-role=\"option\"\r\n            :aria-selected=\"headerHovered\"\r\n            :tabindex=\"-1\"\r\n            :class=\"[...itemClasses, ...itemHeaderClasses]\"\r\n            @click=\"\r\n                (v, e) => selectHeaderOrFooterByClick(e, SpecialOption.Header)\r\n            \">\r\n            <!--\r\n                @slot Define an additional header\r\n            -->\r\n            <slot name=\"header\" />\r\n        </o-dropdown-item>\r\n\r\n        <template v-for=\"(element, groupindex) in computedData\">\r\n            <o-dropdown-item\r\n                v-if=\"element.group\"\r\n                :key=\"groupindex + 'group'\"\r\n                :tag=\"itemTag\"\r\n                :tabindex=\"-1\"\r\n                :class=\"[...itemClasses, ...itemGroupClasses]\">\r\n                <!--\r\n                    @slot Override the option grpup\r\n                    @binding {object} group - options group\r\n                    @binding {number} index - option index\r\n                -->\r\n                <slot\r\n                    v-if=\"$slots.group\"\r\n                    name=\"group\"\r\n                    :group=\"element.group\"\r\n                    :index=\"groupindex\" />\r\n                <span v-else>\r\n                    {{ element.group }}\r\n                </span>\r\n            </o-dropdown-item>\r\n\r\n            <o-dropdown-item\r\n                v-for=\"(option, index) in element.items\"\r\n                :id=\"`${menuId}-${groupindex}-${index}`\"\r\n                :key=\"groupindex + ':' + index\"\r\n                :ref=\"(el) => setItemRef(el, groupindex, index)\"\r\n                :value=\"option\"\r\n                :tag=\"itemTag\"\r\n                :class=\"itemOptionClasses(option)\"\r\n                aria-role=\"option\"\r\n                :aria-selected=\"toRaw(option) === toRaw(hoveredOption)\"\r\n                :tabindex=\"-1\"\r\n                @click=\"\r\n                    (value, event) => setSelected(value as T, !keepOpen, event)\r\n                \">\r\n                <!--\r\n                    @slot Override the select option\r\n                    @binding {object} option - option object\r\n                    @binding {number} index - option index\r\n                    @binding {unknown} value - option value\r\n                -->\r\n                <slot\r\n                    v-if=\"$slots.default\"\r\n                    :option=\"option\"\r\n                    :value=\"getValue(option)\"\r\n                    :index=\"index\" />\r\n                <span v-else>\r\n                    {{ getValue(option) }}\r\n                </span>\r\n            </o-dropdown-item>\r\n        </template>\r\n\r\n        <o-dropdown-item\r\n            v-if=\"isEmpty && $slots.empty\"\r\n            :tag=\"itemTag\"\r\n            :class=\"[...itemClasses, ...itemEmptyClasses]\">\r\n            <!--\r\n                @slot Define content for empty state\r\n            -->\r\n            <slot name=\"empty\" />\r\n        </o-dropdown-item>\r\n\r\n        <o-dropdown-item\r\n            v-if=\"$slots.footer\"\r\n            :id=\"`${menuId}-footer`\"\r\n            ref=\"footerRef\"\r\n            :tag=\"itemTag\"\r\n            aria-role=\"option\"\r\n            :aria-selected=\"footerHovered\"\r\n            :tabindex=\"-1\"\r\n            :class=\"[...itemClasses, ...itemFooterClasses]\"\r\n            @click=\"\r\n                (v, e) => selectHeaderOrFooterByClick(e, SpecialOption.Footer)\r\n            \">\r\n            <!--\r\n                @slot Define an additional footer\r\n            -->\r\n            <slot name=\"footer\" />\r\n        </o-dropdown-item>\r\n    </o-dropdown>\r\n</template>\r\n"],"names":["SpecialOption","_useModel"],"mappings":";;;;;;;;;;;;;;AAgCA,IAAK,kCAAAA,mBAAL;AACIA,iBAAA,eAAA,QAAA,IAAA,CAAA,IAAA;AACAA,iBAAA,eAAA,QAAA,IAAA,CAAA,IAAA;AAFCA,SAAAA;AAAA,GAAA,iBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAML,aAAS,gBAAgB,QAAsC;AAC3D,aAAO,UAAU;AAAA,IACrB;AAcA,UAAM,QAAQ;AA8Nd,UAAM,QAAQ;AAyDd,UAAM,QAAQ;AACd,UAAM,WAAW;AACjB,UAAM,cAAc;AACpB,UAAM,YAAY;AAClB,UAAM,YAAY;AACZ,UAAA,WAAW,IAAI,CAAA,CAAE;AAEd,aAAA,WACL,IACA,YACA,WACI;AACA,UAAA,eAAe,KAAK,cAAc;AAAY,iBAAA,MAAM,OAAO,CAAC;AAC5D,UAAA;AAAa,iBAAA,MAAM,KAAK,EAAE;AAAA,IAClC;AAGM,UAAA,EAAE,oBAAoB,WAAW,SAAS,QAAQ,WAAW,SAAA,IAC/D,gBAAgB,UAAU,OAAO,KAAK;AAEpC,UAAA,SAASC,SAAmD,SAAA,YAAA;AAE5D,UAAA,WAAW,IAAI,KAAK;AAE1B,UAAM,iBAAiB;AACvB,UAAM,gBAAgB;AAChB,UAAA,gBAAgB,IAAI,KAAK;AACzB,UAAA,gBAAgB,IAAI,KAAK;AAEzB,UAAA,YAAY,IAAI,IAAI;AAC1B,UAAM,SAAS;AAOf;AAAA,MACI,MAAM,OAAO;AAAA,MACb,CAAC,UAAU;AAED,cAAA,eAAe,SAAS,eAAe,KAAK;AAClD,YAAI,gBAAgB,iBAAiB;AAAO,sBAAY,MAAM,KAAK;AAEnE,iBAAS,MAAM;AAEP,cAAA,QAAQ,SAAS,CAAC,MAAM;AAAO,qBAAS,QAAQ;AAAA,mBAE3C,UAAU,UAAU,CAAC,MAAM,eAAe;AACtC,qBAAA,QAAQ,CAAC,CAAC;AAAA,QAAA,CAC1B;AAAA,MACL;AAAA,IAAA;AAIJ;AAAA,MACI,MAAM,MAAM;AAAA,MACZ,MAAM;AAEF,YAAI,MAAM,WAAW;AACjB,mBAAS,MAAM;AACX,gBAAI,SAAS;AAAyB;;AACjC,yBAAW,IAAI;AAAA,UAAA,CACvB;AAAA,QAAA,WACM,cAAc,OAAO;AAEtB,gBAAA,eAAe,SAAS,cAAc,KAAK;AAC3C,gBAAA,OAAO,aAAa,MACrB,IAAI,CAAC,MAAM,EAAE,KAAK,EAClB,OAAO,CAAC,GAAG,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAA,CAAE;AAChC,gBAAA,QAAQ,KAAK,UAAU,CAAC,MAAM,SAAS,CAAC,MAAM,YAAY;AAChE,cAAI,SAAS;AAAY,qBAAA,MAAM,oBAAoB,KAAK,CAAC;AAAA;AACpD,uBAAW,IAAI;AAAA,QACxB;AAAA,MACJ;AAAA,IAAA;AAGE,UAAA,eAAe,SAAwC,MAAM;AAC/D,UAAI,MAAM,YAAY;AAClB,YAAI,MAAM;AACN,iBAAO,MAAM,KAAK,IAAI,CAAC,WAAW;AAC9B,kBAAM,QAAQ,eAAe,QAAQ,MAAM,UAAU;AACrD,kBAAM,QAAQ,eAAe,QAAQ,MAAM,YAAY;AAChD,mBAAA,EAAE,OAAO;UAAM,CACzB;AAAA;AAED,iBAAO,OAAO,KAAK,MAAM,IAAI,EAAE,IAAI,CAAC,WAAW;AAAA,YAC3C;AAAA,YACA,OAAO,MAAM,KAAK,KAAK;AAAA,UACzB,EAAA;AAAA,MACV;AAEI,UAAA,CAAC,MAAM,eAAe,CAAC,MAAM,YAAY,OAAO,UAAU,IAAI;AAE9D,eAAO,CAAC,EAAE,OAAO,IAAI;AAAA,MACzB;AACA,aAAO,CAAC,EAAE,OAAO,MAAM,KAAM,CAAA;AAAA,IAAA,CAChC;AAED,UAAM,UAAU;AAAA,MACZ;;AACI,kBAAC,kBAAa,UAAb,mBAAoB;AAAA,UACjB,CAAC,YAAY,QAAQ,SAAS,QAAQ,MAAM;AAAA;AAAA;AAAA,IAChD;AAGF,UAAA,SAAS,CAAC,UAAU;AACtB,UAAI,UAAU;AAAO,iBAAS,QAAQ,CAAC,SAAS,CAAC,CAAC,MAAM;AAAA,IAAA,CAC3D;AAEK,UAAA,mBAAmB,SAAS,MAAM;AAC9B,YAAA,UAAU,CAAC,QAAQ;AACrB,UAAA,CAAC,MAAM,UAAU;AACjB,gBAAQ,KAAK,SAAS;AACtB,gBAAQ,KAAK,SAAS;AAAA,MAC1B;AACO,aAAA;AAAA,IAAA,CACV;AAED,aAAS,gBAAgB,QAAsB;AAC3C,UAAI,WAAW,WAAW;AACtB,YACI,MAAM,aACN,cAAc,SACd,MAAM;AAEM,sBAAA,cAAc,OAAO,IAAI;AAAA,MAC7C;AAAA,IACJ;AAOA,aAAS,SAAS,QAAmB;AACjC,UAAI,CAAC;AAAe,eAAA;AAEd,YAAA,WACF,MAAM,SAAS,OAAO,WAAW,WAC3B,eAAe,QAAQ,MAAM,KAAK,IAClC;AAEJ,YAAA,QACF,OAAO,MAAM,cAAc,aACrB,MAAM,UAAU,QAAQ,IACxB;AAEV,aAAO,SAAS;AAAA,IACpB;AAGA,aAAS,WAAW,QAAiC;AACjD,UAAI,WAAW;AAAW;AAC1B,oBAAc,QAAQ,gBAAgB,MAAM,IAAI,OAAO;AACvD,oBAAc,QAAQ,WAAW;AACjC,oBAAc,QAAQ,WAAW;AACjC,gBAAU,QAAQ;AAAA,IACtB;AAGA,aAAS,oBAAoB,OAAqB;AAC9C,YAAM,UAAU,aAAa,SAAS,MAAM,KAAK,CAAC;AACxC,gBAAA,QAAQ,UAAU,QAAQ,KAAK;AAAA,IAC7C;AAMA,aAAS,YAAY,QAAW,gBAAgB,MAAM,QAAQ,QAAiB;AAC3E,UAAI,WAAW;AAAW;AAC1B,qBAAe,QAAQ;AACjB,YAAA,UAAU,eAAe,OAAO,KAAK;AACvC,UAAA,eAAe,UAAU,MAAM;AAC/B,YAAI,MAAM,eAAe;AACrB,gBAAM,QAAQ,SAAS,MAAM,IAAI,cAAc,OAAO;AACtD,gBAAM,QAAQ;AAAA,QAAA,OACX;AACI,iBAAA,QAAQ,SAAS,eAAe,KAAK;AAAA,QAChD;AACA,mBAAW,IAAI;AAAA,MACnB;AACI,UAAA;AAAwB,iBAAA,MAAO,SAAS,QAAQ,KAAM;AACvC;IACvB;AAGA,aAAS,oBAA0B;AAC/B,eAAS,MAAM;AACL,cAAA,mBAAmB,aAAa,MAAM;AAAA,UACxC,CAAC,YAAY,QAAQ,SAAS,QAAQ,MAAM;AAAA,QAAA;AAEhD,YAAI,iBAAiB,QAAQ;AACzB,gBAAM,SAAS,iBAAiB,CAAC,EAAE,MAAM,CAAC;AAC1C,qBAAW,MAAM;AACjB,8BAAoB,CAAC;AAAA,QAAA,OAClB;AACH,qBAAW,IAAI;AAAA,QACnB;AAAA,MAAA,CACH;AAAA,IACL;AAGA,aAAS,4BACL,OACA,QACA,gBAAgB,MACZ;AACJ,UACI,MAAM,qBACL,cAAc,SAAS,WAAW,IACrC;AACE,cAAM,iBAAiB,KAAK;AACxB,YAAA;AAAQ,qBAAW,IAAI;AACvB,YAAA;AAAe,mBAAS,QAAQ;AAAA,MACxC;AACA,UACI,MAAM,qBACL,cAAc,SAAS,WAAW,IACrC;AACE,cAAM,iBAAiB,KAAK;AACxB,YAAA;AAAQ,qBAAW,IAAI;AACvB,YAAA;AAAe,mBAAS,QAAQ;AAAA,MACxC;AAAA,IACJ;AAQA,aAAS,aAAa,WAAyB;AACvC,UAAA,CAAC,SAAS,OAAO;AACjB,iBAAS,QAAQ;AACjB;AAAA,MACJ;AAEM,YAAA,OAAO,aAAa,MACrB,IAAI,CAAC,MAAM,EAAE,KAAK,EAClB,OAAO,CAAC,GAAG,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAA,CAAE;AAGlC,UAAA,UAAU,SAAS,MAAM;AAAkB,aAAK,QAAQ,MAAS;AACjE,UAAA,UAAU,SAAS,MAAM;AAAkB,aAAK,KAAK,MAAS;AAG9D,UAAA,QAAQ,KAAK,IAAI,KAAK,EAAE,QAAQ,MAAM,cAAc,KAAK,CAAC;AAC9D,UAAI,cAAc;AAAO,gBAAQ,IAAI;AAAA,eAC5B,cAAc;AAAe,gBAAA,KAAK,SAAS,IAAI;AAAA;AACnD,gBAAQ,QAAQ;AAGrB,cAAQ,QAAQ,KAAK,SAAS,IAAI,KAAK,SAAS,IAAI;AAE5C,cAAA,QAAQ,IAAI,IAAI;AAGxB,UAAI,UAAU,SAAS,MAAM,oBAAoB,UAAU,KAAK,SAAS;AACrE;AAAA,UAAW;AAAA;AAAA,QAAoB;AAAA,eAC1B,UAAU,SAAS,MAAM,oBAAoB,UAAU;AAC5D;AAAA,UAAW;AAAA;AAAA,QAAoB;AAAA;AAC9B,mBAAW,KAAK,KAAK,MAAM,SAAY,KAAK,KAAK,IAAI,IAAI;AAG1D,UAAA,QAAQ,SAAS,SAAS;AAC1B,UAAA,UAAU,SAAS,MAAM;AACzB,gBAAQ,CAAC,UAAU,OAAO,GAAG,KAAK;AAClC,UAAA,UAAU,SAAS,MAAM;AACzB,gBAAQ,CAAC,GAAG,OAAO,UAAU,KAAK;AAEtC,YAAM,UAAU,aAAa,MAAM,KAAK,CAAC;AACzC,UAAI,CAAC;AAAS;AAGd,gBAAU,QAAQ,QAAQ;AAG1B,YAAM,eAAe,aAAa,YAAY,MAAM,QAAQ;AAC5D,YAAM,SAAS,aAAa;AAC5B,YAAM,SACF,aAAa,YACb,aAAa,eACb,QAAQ;AAER,UAAA,QAAQ,YAAY,QAAQ;AAE5B,qBAAa,YAAY,QAAQ;AAAA,MAAA,WAC1B,QAAQ,aAAa,QAAQ;AAEpC,qBAAa,YACT,QAAQ,YACR,aAAa,eACb,QAAQ;AAAA,MAChB;AAEA,UAAI,MAAM;AAAiC;IAC/C;AAMA,aAAS,UAAU,OAA4B;AAE3C,UAAI,MAAM,QAAQ;AAAS,cAAM,eAAe;AAChD,UAAI,MAAM,YAAY,QAAQ,MAAM,GAAG,KAAK,GAAG;AAE3C,YAAI,MAAM,QAAQ;AAAK,gBAAM,eAAe;AAE5C,cAAM,gBAAgB,CAAC,MAAM,YAAY,MAAM,QAAQ;AACnD,YAAA,cAAc,UAAU,MAAM;AAGF,sCAAA,OAAO,MAAM,aAAa;AACtD;AAAA,QACJ;AACY,oBAAA,cAAc,OAAO,eAAe,KAAK;AAAA,MACzD;AAAA,IACJ;AAMA,aAAS,YAAY,OAAoB;AACrC,UAAI,SAAS,eAAe,KAAK,MAAM,OAAO,OAAO;AACjD,iBAAS,MAAM,IAAI,cAAc,OAAO,EAAE;MAC9C;AACA,UAAI,MAAM,aAAa;AACnB,iBAAS,QAAQ;AACjB,YAAI,MAAM;AAEY;MAC1B;AACA,cAAQ,KAAK;AAAA,IACjB;AAMA,aAAS,WAAW,OAAoB;AACpC,aAAO,KAAK;AAAA,IAChB;AAGA,aAAS,QAAQ,OAA8B;AACrC,YAAA,eAAe,SAAS,eAAe,KAAK;AAC9C,UAAA,gBAAgB,iBAAiB,OAAO;AAAO;AACnD,qBAAe,KAAK;AAAA,IACxB;AAEA,QAAI,iBAAiB,YAAY,WAAW,MAAM,YAAY,CAAC;AAE/D,gBAAY,MAAM;AACG,uBAAA,YAAY,WAAW,MAAM,QAAQ;AAAA,IAAA,CACzD;AAED,aAAS,UAAU,OAA8B;AAC7C,YAAM,SAAS,KAAK;AACD;IACvB;AAIA,UAAM,oBAAoB;AAAA,MAAS,MAC/B,MAAM,aAAa,OAAO,SAAS,MAAM,YACnC,MAAM,YACN,MAAM;AAAA,IAAA;AAGhB,UAAM,6BAA6B;AAAA,MAAS,MACxC,MAAM,YAAY,OAAO,MAAM;AAAA,IAAA;AAGnC,aAAS,eAAe,OAAoB;AACxC,UAAI,MAAM,WAAW;AACjB,eAAO,QAAQ;AACf,oBAAY,MAAM,KAAK;AACvB,YAAI,MAAM;AAAsB;MACpC;AAAO,cAAM,oBAAoB,KAAK;AAAA,IAC1C;AAIA,cAAU,MAAM;AACZ,UAAI,YAAY,MAAM;AAClB;AAAA,UACI;AAAA,UACA;AAAA,UACA,YAAY,MAAM;AAAA,UAClB,EAAE,WAAW,KAAK;AAAA,QAAA;AAAA,IACtB,CACP;AAGD,aAAS,sBAA4B;;AACjC,YAAM,WAAW,aAAa,YAAY,MAAM,QAAQ;AACxD,UAAI,CAAC;AAAU;AACf,YAAM,YAAY,SAAS;AACrB,YAAA,iBAAe,eAAU,UAAV,mBAAiB,iBAAgB;AACtD,YAAM,kBAAgB,eAAU,UAAV,mBAAiB,iBAAgB,KAAK;AACxD,UAAA,SAAS,iBAAiB,SAAS,cAAc;AACjD,YACI,SAAS,YAAY,SAAS,eAAe,gBAC7C,SAAS,cACX;AACE,gBAAM,YAAY;AAAA,QAAA,WACX,SAAS,aAAa,cAAc;AAC3C,gBAAM,cAAc;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ;AAIA,UAAM,QAAQ;AACR,UAAA,YAAY,SAAS,OAAO;AAAA,MAC9B,GAAG;AAAA,MACH,GAAG,MAAM;AAAA,IACX,EAAA;AAEF,UAAM,cAAc,cAAc,CAAC,aAAa,OAAO,CAAC;AAExD,UAAM,cAAc,cAAc,CAAC,aAAa,aAAa,CAAC;AAE9D,UAAM,mBAAmB,cAAc;AAAA,MACnC;AAAA,MACA;AAAA,IAAA,CACH;AAED,UAAM,mBAAmB,cAAc;AAAA,MACnC;AAAA,MACA;AAAA,IAAA,CACH;AAED,UAAM,oBAAoB;AAAA,MACtB,CAAC,mBAAmB,oBAAoB;AAAA,MACxC,CAAC,kBAAkB,sBAAsB,MAAM,aAAa;AAAA,IAAA;AAGhE,UAAM,oBAAoB;AAAA,MACtB,CAAC,mBAAmB,oBAAoB;AAAA,MACxC,CAAC,kBAAkB,sBAAsB,MAAM,aAAa;AAAA,IAAA;AAGhE,aAAS,kBAAkB,QAAqB;AAC5C,YAAM,gBAAgB,cAAc;AAAA,QAChC;AAAA,QACA;AAAA,QACA;AAAA,QACA,MAAM,MAAM,MAAM,MAAM,cAAc,KAAK;AAAA,MAAA,CAC9C;AAED,aAAO,CAAC,GAAG,YAAY,OAAO,GAAG,cAAc,KAAK;AAAA,IACxD;AAKa,aAAA,EAAE,OAAO,SAAA,CAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}