{"version":3,"file":"modal.mjs","sources":["../../src/components/modal/Modal.vue","../../src/components/modal/ModalProgrammatic.ts","../../src/components/modal/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport {\r\n    ref,\r\n    computed,\r\n    watch,\r\n    nextTick,\r\n    onBeforeUnmount,\r\n    type Component,\r\n    type PropType,\r\n} from \"vue\";\r\n\r\nimport OIcon from \"../icon/Icon.vue\";\r\n\r\nimport { vTrapFocus } from \"@/directives/trapFocus\";\r\nimport { getOption } from \"@/utils/config\";\r\nimport { removeElement, toCssDimension } from \"@/utils/helpers\";\r\nimport { isClient } from \"@/utils/ssr\";\r\nimport {\r\n    defineClasses,\r\n    getActiveClasses,\r\n    useMatchMedia,\r\n    useProgrammaticComponent,\r\n} from \"@/composables\";\r\n\r\nimport type { ComponentClass, ProgrammaticInstance } from \"@/types\";\r\n\r\n/**\r\n * Classic modal overlay to include any content you may need\r\n * @displayName Modal\r\n * @style _modal.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OModal\",\r\n    configField: \"modal\",\r\n    inheritAttrs: false,\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** Whether modal is active or not, use v-model:active to make it two-way binding */\r\n    active: { type: Boolean, default: false },\r\n    /** Display modal as full screen */\r\n    fullScreen: { type: Boolean, default: false },\r\n    /** Text content, unnecessary when default slot is used */\r\n    content: { type: String, default: undefined },\r\n    /** Width of the Modal */\r\n    width: {\r\n        type: [String, Number],\r\n        default: () => getOption(\"modal.width\", 960),\r\n    },\r\n    /** Custom animation (transition name) */\r\n    animation: {\r\n        type: String,\r\n        default: () => getOption(\"modal.animation\", \"zoom-out\"),\r\n    },\r\n    /**\r\n     * Is Modal cancleable by clicking 'X', pressing escape or clicking outside\r\n     * @values escape, x, outside, button, true, false\r\n     */\r\n    cancelable: {\r\n        type: [Array, Boolean] as PropType<string[] | boolean>,\r\n        default: () =>\r\n            getOption(\"modal.cancelable\", [\"escape\", \"x\", \"outside\", \"button\"]),\r\n    },\r\n    /** Callback function to call after user canceled (clicked 'X' / pressed escape / clicked outside) */\r\n    onCancel: { type: Function as PropType<() => void>, default: () => {} },\r\n    /** Callback function to call after close (programmatically close or user canceled) */\r\n    onClose: { type: Function as PropType<() => void>, default: () => {} },\r\n    /**\r\n     * Use `clip` to remove the body scrollbar, `keep` to have a non scrollable scrollbar to avoid shifting background,\r\n     * but will set body to position fixed, might break some layouts.\r\n     * @values keep, clip\r\n     */\r\n    scroll: {\r\n        type: String,\r\n        default: () => getOption(\"modal.scroll\", \"keep\"),\r\n        validator: (value: string) => [\"keep\", \"clip\"].indexOf(value) >= 0,\r\n    },\r\n    /** Trap focus inside the modal */\r\n    trapFocus: {\r\n        type: Boolean,\r\n        default: () => getOption(\"modal.trapFocus\", true),\r\n    },\r\n    /**\r\n     * Role attribute to be passed to the div wrapper for better accessibility.\r\n     * @values dialog, alertdialog\r\n     */\r\n    ariaRole: {\r\n        type: String,\r\n        default: () => getOption(\"modal.ariaRole\"),\r\n        validator: (value: string) =>\r\n            [\"dialog\", \"alertdialog\"].indexOf(value) >= 0,\r\n    },\r\n    /** Accessibility aria-label to be passed to the div wrapper element */\r\n    ariaLabel: { type: String, default: () => getOption(\"modal.ariaLabel\") },\r\n    /** Destroy modal on hide */\r\n    destroyOnHide: {\r\n        type: Boolean,\r\n        default: () => getOption(\"modal.destroyOnHide\", false),\r\n    },\r\n    /** Automatically focus modal when active */\r\n    autoFocus: {\r\n        type: Boolean,\r\n        default: () => getOption(\"modal.autoFocus\", true),\r\n    },\r\n    /** Close icon name */\r\n    closeIcon: {\r\n        type: String,\r\n        default: () => getOption(\"modal.closeIcon\", \"close\"),\r\n    },\r\n    /**\r\n     * Size of close icon\r\n     * @values small, medium, large\r\n     */\r\n    closeIconSize: {\r\n        type: String,\r\n        default: () => getOption(\"modal.closeIconSize\", \"medium\"),\r\n    },\r\n    /** Mobile breakpoint as max-width value */\r\n    mobileBreakpoint: {\r\n        type: String,\r\n        default: () => getOption(\"modal.mobileBreakpoint\"),\r\n    },\r\n    /**\r\n     * Append the component to another part of the DOM.\r\n     * Set `true` to append the component to the body.\r\n     * In addition, any CSS selector string or an actual DOM node can be used.\r\n     */\r\n    teleport: {\r\n        type: [Boolean, String, Object],\r\n        default: () => getOption(\"modal.teleport\", false),\r\n    },\r\n    /**\r\n     * Component to be injected, used to open a component modal programmatically.\r\n     * Close modal within the component by emitting a 'close' event â€” emits('close')\r\n     */\r\n    component: {\r\n        type: [Object, Function] as PropType<Component>,\r\n        default: undefined,\r\n    },\r\n    /** Props to be binded to the injected component */\r\n    props: { type: Object, default: undefined },\r\n    /** Events to be binded to the injected component */\r\n    events: { type: Object, default: () => ({}) },\r\n    /** DOM element where the modal component will be created on (for programmatic usage) */\r\n    container: {\r\n        type: [Object, String] as PropType<string | HTMLElement>,\r\n        default: () => getOption(\"modal.container\", \"body\"),\r\n    },\r\n    /**\r\n     * This is used internally for programmatic usage\r\n     * @ignore\r\n     */\r\n    programmatic: {\r\n        type: Object as PropType<ProgrammaticInstance>,\r\n        default: undefined,\r\n    },\r\n    /**\r\n     * This is used internally for programmatic usage\r\n     * @ignore\r\n     */\r\n    promise: { type: Promise, default: undefined },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of modal component when its active */\r\n    activeClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the modal overlay */\r\n    overlayClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the modal content */\r\n    contentClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the close button */\r\n    closeClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the modal when fullscreen */\r\n    fullScreenClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of modal component when on mobile */\r\n    mobileClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the modal when scroll is clip */\r\n    scrollClipClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the modal when scroll is not clip */\r\n    noScrollClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * active prop two-way binding\r\n     * @param value {boolean} - updated active prop\r\n     */\r\n    (e: \"update:active\", value: boolean): void;\r\n    /**\r\n     * on component close event\r\n     * @param value {any} - close event data\r\n     */\r\n    (e: \"close\", ...args: any[]): void;\r\n}>();\r\n\r\nconst rootRef = ref();\r\n\r\n/** add programmatic usage to this component */\r\nconst { isActive, close, cancel } = useProgrammaticComponent(\r\n    rootRef,\r\n    props,\r\n    emits,\r\n    {\r\n        destroyOnHide: props.destroyOnHide,\r\n        cancelOptions: getOption(\"modal.cancelable\", [\r\n            \"escape\",\r\n            \"x\",\r\n            \"outside\",\r\n            \"button\",\r\n        ]),\r\n    },\r\n);\r\n\r\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\r\n\r\nconst _teleport = computed(() =>\r\n    typeof props.teleport === \"boolean\"\r\n        ? { to: \"body\", disabled: !props.teleport }\r\n        : { to: props.teleport, disabled: false },\r\n);\r\n\r\nconst savedScrollTop = ref(null);\r\nconst isAnimating = ref(!props.active);\r\n\r\nwatch(isActive, (value) => {\r\n    handleScroll();\r\n    if (value && rootRef.value && props.autoFocus)\r\n        nextTick(() => rootRef.value.focus());\r\n    // mark the modal as destoyed after it get closed\r\n    if (!value && props.destroyOnHide)\r\n        // wait for transition finish\r\n        setTimeout(() => removeElement(rootRef.value));\r\n});\r\n\r\nconst showX = computed(() =>\r\n    Array.isArray(props.cancelable)\r\n        ? props.cancelable.indexOf(\"x\") >= 0\r\n        : props.cancelable,\r\n);\r\n\r\nconst customStyle = computed(() =>\r\n    !props.fullScreen ? { maxWidth: toCssDimension(props.width) } : null,\r\n);\r\n\r\nonBeforeUnmount(() => {\r\n    if (isClient) {\r\n        // reset scroll\r\n        const scrollto = savedScrollTop.value\r\n            ? savedScrollTop.value\r\n            : document.documentElement.scrollTop;\r\n        if (scrollClass.value) {\r\n            document.body.classList.remove(...scrollClass.value);\r\n            document.documentElement.classList.remove(...scrollClass.value);\r\n        }\r\n        document.documentElement.scrollTop = scrollto;\r\n        document.body.style.top = null;\r\n    }\r\n});\r\n\r\nfunction handleScroll(): void {\r\n    if (!isClient) return;\r\n\r\n    if (props.scroll === \"clip\") {\r\n        if (scrollClass.value) {\r\n            if (isActive.value)\r\n                document.documentElement.classList.add(...scrollClass.value);\r\n            else\r\n                document.documentElement.classList.remove(...scrollClass.value);\r\n        }\r\n        return;\r\n    }\r\n\r\n    savedScrollTop.value = savedScrollTop.value\r\n        ? savedScrollTop.value\r\n        : document.documentElement.scrollTop;\r\n\r\n    if (scrollClass.value) {\r\n        if (isActive.value) document.body.classList.add(...scrollClass.value);\r\n        else document.body.classList.remove(...scrollClass.value);\r\n    }\r\n\r\n    if (isActive.value) {\r\n        document.body.style.top = `-${savedScrollTop.value}px`;\r\n        return;\r\n    }\r\n\r\n    document.documentElement.scrollTop = savedScrollTop.value;\r\n    document.body.style.top = null;\r\n    savedScrollTop.value = null;\r\n}\r\n\r\n/** Transition after-enter hook */\r\nfunction afterEnter(): void {\r\n    isAnimating.value = false;\r\n}\r\n\r\n/** Transition before-leave hook */\r\nfunction beforeLeave(): void {\r\n    isAnimating.value = true;\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"rootClass\", \"o-modal\"],\r\n    [\"mobileClass\", \"o-modal--mobile\", null, isMobile],\r\n    [\"activeClass\", \"o-modal--active\", null, isActive],\r\n);\r\n\r\nconst overlayClasses = defineClasses([\"overlayClass\", \"o-modal__overlay\"]);\r\n\r\nconst contentClasses = defineClasses(\r\n    [\"contentClass\", \"o-modal__content\"],\r\n    [\r\n        \"fullScreenClass\",\r\n        \"o-modal__content--full-screen\",\r\n        null,\r\n        computed(() => props.fullScreen),\r\n    ],\r\n);\r\n\r\nconst closeClasses = defineClasses([\"closeClass\", \"o-modal__close\"]);\r\n\r\nconst scrollClasses = defineClasses([\"scrollClipClass\", \"o-clipped\"]);\r\nconst noScrollClasses = defineClasses([\"noScrollClass\", \"o-noscroll\"]);\r\n\r\nconst scrollClass = computed(() =>\r\n    getActiveClasses(\r\n        props.scroll === \"clip\" ? scrollClasses.value : noScrollClasses.value,\r\n    ),\r\n);\r\n\r\n// computed ref must be computed at least once for programmatic usage\r\nscrollClass.value;\r\n\r\n// --- Expose Public Functionalities ---\r\n\r\n/** expose functionalities for programmatic usage */\r\ndefineExpose({ close, promise: props.promise });\r\n</script>\r\n\r\n<template>\r\n    <Teleport :to=\"_teleport.to\" :disabled=\"_teleport.disabled\">\r\n        <transition\r\n            :name=\"animation\"\r\n            @after-enter=\"afterEnter\"\r\n            @before-leave=\"beforeLeave\">\r\n            <div\r\n                v-show=\"isActive\"\r\n                v-bind=\"$attrs\"\r\n                ref=\"rootRef\"\r\n                v-trap-focus=\"trapFocus\"\r\n                data-oruga=\"modal\"\r\n                :class=\"rootClasses\"\r\n                :tabindex=\"-1\"\r\n                :role=\"ariaRole\"\r\n                :aria-label=\"ariaLabel\"\r\n                :aria-modal=\"isActive\">\r\n                <div\r\n                    :class=\"overlayClasses\"\r\n                    tabindex=\"-1\"\r\n                    aria-hidden=\"true\"\r\n                    @click=\"cancel('outside')\" />\r\n\r\n                <div :class=\"contentClasses\" :style=\"customStyle\">\r\n                    <!-- injected component for programmatic usage -->\r\n                    <component\r\n                        v-bind=\"$props.props\"\r\n                        :is=\"component\"\r\n                        v-if=\"component\"\r\n                        v-on=\"$props.events\"\r\n                        @close=\"close\" />\r\n                    <!--\r\n                        @slot Modal default content, default is content prop\r\n                        @binding {(...args): void} close - function to close the component\r\n                    -->\r\n                    <slot v-else :close=\"close\">\r\n                        <div v-if=\"content\">{{ content }}</div>\r\n                    </slot>\r\n\r\n                    <o-icon\r\n                        v-if=\"showX\"\r\n                        v-show=\"!isAnimating\"\r\n                        clickable\r\n                        both\r\n                        :class=\"closeClasses\"\r\n                        :icon=\"closeIcon\"\r\n                        :size=\"closeIconSize\"\r\n                        @click=\"cancel('x')\" />\r\n                </div>\r\n            </div>\r\n        </transition>\r\n    </Teleport>\r\n</template>\r\n","import { createVNode, render } from \"vue\";\r\n\r\nimport Modal from \"./Modal.vue\";\r\nimport type { ModalProps } from \"./types\";\r\n\r\nimport InstanceRegistry from \"@/utils/InstanceRegistry\";\r\nimport { VueInstance } from \"@/utils/plugins\";\r\nimport { merge } from \"@/utils/helpers\";\r\nimport type { OrugaOptions, ProgrammaticExpose } from \"@/types\";\r\n\r\ndeclare module \"../../index\" {\r\n    interface OrugaProgrammatic {\r\n        modal: typeof ModalProgrammatic;\r\n    }\r\n}\r\n\r\nconst instances = new InstanceRegistry<typeof Modal>();\r\n\r\ntype ModalProgrammaticProps = Readonly<\r\n    string | (ModalProps & OrugaOptions[\"modal\"])\r\n>;\r\n\r\nconst ModalProgrammatic = {\r\n    open(params: ModalProgrammaticProps): ProgrammaticExpose {\r\n        const componentParams =\r\n            typeof params === \"string\"\r\n                ? {\r\n                      content: params,\r\n                  }\r\n                : { ...params };\r\n\r\n        let slot;\r\n        if (Array.isArray(componentParams.content)) {\r\n            slot = componentParams.content;\r\n            delete componentParams.content;\r\n        }\r\n\r\n        const defaultParams = {\r\n            programmatic: { instances },\r\n            active: true, // set the active state to true\r\n        };\r\n\r\n        const propsData = merge(defaultParams, componentParams);\r\n        propsData.promise = new Promise((p1, p2) => {\r\n            propsData.programmatic.resolve = p1;\r\n            propsData.programmatic.reject = p2;\r\n        });\r\n\r\n        const defaultSlot = () => slot;\r\n\r\n        const app = VueInstance;\r\n        const vnode = createVNode(Modal, propsData, defaultSlot);\r\n        vnode.appContext = app._context;\r\n        render(vnode, document.createElement(\"div\"));\r\n\r\n        // return exposed functionalities\r\n        return vnode.component.exposed as ProgrammaticExpose;\r\n    },\r\n    closeAll(...args: any[]): void {\r\n        instances.walk((entry) => entry.exposed.close(...args));\r\n    },\r\n};\r\n\r\nexport default ModalProgrammatic;\r\n","import type { App, Plugin } from \"vue\";\r\n\r\nimport Modal from \"./Modal.vue\";\r\nimport ModalProgrammatic from \"./ModalProgrammatic\";\r\n\r\nimport {\r\n    registerComponent,\r\n    registerComponentProgrammatic,\r\n} from \"@/utils/plugins\";\r\n\r\n/** export modal specific types */\r\nexport type { ModalProps } from \"./types\";\r\n\r\n/** export modal plugin */\r\nexport default {\r\n    install(app: App) {\r\n        registerComponent(app, Modal);\r\n        registerComponentProgrammatic(app, \"modal\", ModalProgrammatic);\r\n    },\r\n} as Plugin;\r\n\r\n/** export modal components */\r\nexport { ModalProgrammatic, Modal as OModal };\r\n"],"names":["Modal","ModalProgrammatic"],"mappings":"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"}