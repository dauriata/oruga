{"version":3,"file":"notification.mjs","sources":["../../src/components/notification/Notification.vue","../../src/components/notification/NotificationNotice.vue","../../src/components/notification/NotificationProgrammatic.ts","../../src/components/notification/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { computed, type PropType } from \"vue\";\r\n\r\nimport OIcon from \"../icon/Icon.vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport { defineClasses, usePropBinding } from \"@/composables\";\r\n\r\nimport type { ComponentClass } from \"@/types\";\r\n\r\n/**\r\n * Bold notification blocks to alert your users of something\r\n * @displayName Notification\r\n * @requires ./NotificationNotice.vue\r\n * @style _notification.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"ONotification\",\r\n    configField: \"notification\",\r\n    inheritAttrs: false,\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** Whether modal is active or not, use v-model:active to make it two-way binding */\r\n    active: { type: Boolean, default: true },\r\n    /**\r\n     * Type (color) of the notification\r\n     * @values info, success, warning, danger\r\n     */\r\n    type: {\r\n        type: String,\r\n        default: undefined,\r\n        validator: (value: string) =>\r\n            [\"info\", \"success\", \"warning\", \"danger\", undefined].indexOf(value) >\r\n            -1,\r\n    },\r\n    /**\r\n     * Color of the control\r\n     * @values primary, info, success, warning, danger, and any other custom color\r\n     */\r\n    variant: {\r\n        type: String,\r\n        default: () => getOption(\"notification.variant\"),\r\n    },\r\n    /**\r\n     * Which position the notification will appear when programmatically\r\n     * @values top-right, top, top-left, bottom-right, bottom, bottom-left\r\n     */\r\n    position: {\r\n        type: String,\r\n        default: () => getOption(\"notification.position\", \"top\"),\r\n        validator: (value: string) =>\r\n            [\r\n                \"top-right\",\r\n                \"top\",\r\n                \"top-left\",\r\n                \"bottom-right\",\r\n                \"bottom\",\r\n                \"bottom-left\",\r\n            ].indexOf(value) > -1,\r\n    },\r\n    /** Message text (can contain HTML), unnecessary when default slot is used */\r\n    message: {\r\n        type: [String, Array] as PropType<string | string[]>,\r\n        default: undefined,\r\n    },\r\n    /** Custom animation (transition name) */\r\n    animation: {\r\n        type: String,\r\n        default: () => getOption(\"notification.animation\", \"fade\"),\r\n    },\r\n    /** Accessibility label for the close button */\r\n    ariaCloseLabel: {\r\n        type: String,\r\n        default: () => getOption(\"notification.ariaCloseLabel\", \"Close\"),\r\n    },\r\n    /**\r\n     * Icon pack to use\r\n     * @values mdi, fa, fas and any other custom icon pack\r\n     */\r\n    iconPack: {\r\n        type: String,\r\n        default: () => getOption(\"notification.iconPack\"),\r\n    },\r\n    /** Icon name to use */\r\n    icon: { type: String, default: undefined },\r\n    /**\r\n     * Icon size\r\n     * @values small, medium, large\r\n     */\r\n    iconSize: {\r\n        type: String,\r\n        default: () => getOption(\"notification.iconSize\", \"large\"),\r\n    },\r\n    /** Add close button to the item that closes the notification */\r\n    closable: { type: Boolean, default: false },\r\n    /** Close icon name */\r\n    closeIcon: {\r\n        type: String,\r\n        default: () => getOption(\"notification.closeIcon\", \"close\"),\r\n    },\r\n    /**\r\n     * Size of close icon\r\n     * @values small, medium, large\r\n     */\r\n    closeIconSize: {\r\n        type: String,\r\n        default: () => getOption(\"notification.closeIconSize\"),\r\n    },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the close button container */\r\n    closeClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the content element */\r\n    contentClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the icon on the left */\r\n    iconClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the element when positioned */\r\n    positionClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the notification variant */\r\n    variantClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the wrapper element */\r\n    wrapperClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * active prop two-way binding\r\n     * @param value {boolean} - updated active prop\r\n     */\r\n    (e: \"update:active\", value: boolean): void;\r\n    /**\r\n     * on component close event\r\n     * @param value {any} - close event data\r\n     */\r\n    (e: \"close\", ...args: any[]): void;\r\n}>();\r\n\r\nconst isActive = usePropBinding<boolean>(\"active\", props, emits, {\r\n    passive: true,\r\n});\r\n\r\n/** Icon name (MDI) based on type. */\r\nconst computedIcon = computed(() => {\r\n    if (props.icon) return props.icon;\r\n\r\n    switch (props.type) {\r\n        case \"info\":\r\n            return \"information\";\r\n        case \"success\":\r\n            return \"check-circle\";\r\n        case \"warning\":\r\n            return \"alert\";\r\n        case \"danger\":\r\n            return \"alert-circle\";\r\n        default:\r\n            return null;\r\n    }\r\n});\r\n\r\n/** Close the Message and emit events. */\r\nfunction close(...args: any[]): void {\r\n    isActive.value = false;\r\n    emits(\"close\", ...args);\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"rootClass\", \"o-notification\"],\r\n    [\r\n        \"variantClass\",\r\n        \"o-notification--\",\r\n        computed(() => props.variant),\r\n        computed(() => !!props.variant),\r\n    ],\r\n    [\r\n        \"positionClass\",\r\n        \"o-notification--\",\r\n        computed(() => props.position),\r\n        computed(() => !!props.position),\r\n    ],\r\n);\r\n\r\nconst wrapperClasses = defineClasses([\r\n    \"wrapperClass\",\r\n    \"o-notification__wrapper\",\r\n]);\r\n\r\nconst iconClasses = defineClasses([\"iconClass\", \"o-notification__icon\"]);\r\n\r\nconst contentClasses = defineClasses([\r\n    \"contentClass\",\r\n    \"o-notification__content\",\r\n]);\r\n\r\nconst closeClasses = defineClasses([\"closeClass\", \"o-notification__close\"]);\r\n</script>\r\n\r\n<template>\r\n    <transition :name=\"animation\">\r\n        <article\r\n            v-show=\"isActive\"\r\n            v-bind=\"$attrs\"\r\n            :class=\"rootClasses\"\r\n            data-oruga=\"notification\">\r\n            <button\r\n                v-if=\"closable\"\r\n                :class=\"closeClasses\"\r\n                type=\"button\"\r\n                :aria-label=\"ariaCloseLabel\"\r\n                @click=\"close({ action: 'close', method: 'x' })\">\r\n                <o-icon\r\n                    clickable\r\n                    :pack=\"iconPack\"\r\n                    both\r\n                    :icon=\"closeIcon\"\r\n                    :size=\"closeIconSize\" />\r\n            </button>\r\n\r\n            <!--\r\n                @slot Notification inner content, outside of the message container\r\n                @binding {(...args): void} close - function to close the notification\r\n            -->\r\n            <slot name=\"inner\" :close=\"close\" />\r\n\r\n            <div v-if=\"$slots.default || message\" :class=\"wrapperClasses\">\r\n                <o-icon\r\n                    v-if=\"computedIcon\"\r\n                    :icon=\"computedIcon\"\r\n                    :pack=\"iconPack\"\r\n                    :class=\"iconClasses\"\r\n                    both\r\n                    :size=\"iconSize\"\r\n                    aria-hidden />\r\n                <div :class=\"contentClasses\">\r\n                    <!--\r\n                        @slot Notification default content, default is message prop\r\n                        @binding {(...args): void} close - function to close the notification\r\n                    -->\r\n                    <slot :close=\"close\">\r\n                        <span v-if=\"message\" v-html=\"message\" />\r\n                    </slot>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    </transition>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport {\r\n    computed,\r\n    ref,\r\n    onMounted,\r\n    onBeforeMount,\r\n    watch,\r\n    type PropType,\r\n    type Component,\r\n} from \"vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport {\r\n    defineClasses,\r\n    getActiveClasses,\r\n    useProgrammaticComponent,\r\n} from \"@/composables\";\r\n\r\nimport type { NotifcationProps } from \"./types\";\r\nimport type { ProgrammaticInstance, ComponentClass } from \"@/types\";\r\n\r\n/**\r\n * Notification Notice is an extension of the Notification component and is used for the programmatic usage\r\n * @displayName Notification Notice\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"ONotificationNotice\",\r\n    configField: \"notification\",\r\n    inheritAttrs: false,\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** Whether notification is active or not, use v-model:active to make it two-way binding. */\r\n    active: { type: Boolean, default: true },\r\n    /**\r\n     * Which position the notification will appear when programmatically.\r\n     * @values top-right, top, top-left, bottom-right, bottom, bottom-left\r\n     */\r\n    position: {\r\n        type: String,\r\n        default: () => getOption(\"notification.position\", \"top\"),\r\n        validator: (value: string) =>\r\n            [\r\n                \"top-right\",\r\n                \"top\",\r\n                \"top-left\",\r\n                \"bottom-right\",\r\n                \"bottom\",\r\n                \"bottom-left\",\r\n            ].indexOf(value) > -1,\r\n    },\r\n    /** Hide notification after duration (in miliseconds) */\r\n    duration: {\r\n        type: Number,\r\n        default: () => getOption(\"notification.duration\", 2000),\r\n    },\r\n    /** Show the Notification infinitely until it is dismissed. */\r\n    infinite: { type: Boolean, default: false },\r\n    /** If notice should queue with others notices (snackbar/toast/notification). */\r\n    queue: {\r\n        type: Boolean,\r\n        default: () => getOption(\"notification.queue\"),\r\n    },\r\n    /** Callback function to call after user canceled (pressed escape / clicked outside). */\r\n    onCancel: { type: Function as PropType<() => void>, default: () => {} },\r\n    /** Callback function to call after close (programmatically close or user canceled). */\r\n    onClose: { type: Function as PropType<() => void>, default: () => {} },\r\n    /**\r\n     * Component to be injected.\r\n     * Close notification within the component by emitting a 'close' event — $emit('close').\r\n     */\r\n    component: {\r\n        type: [Object, Function] as PropType<Component>,\r\n        default: undefined,\r\n    },\r\n    /** Props to be binded to the injected component. */\r\n    props: { type: Object, default: undefined },\r\n    /** Events to be binded to the injected component. */\r\n    events: { type: Object, default: () => ({}) },\r\n    /**\r\n     * DOM element the toast will be created on (for programmatic usage).\r\n     * Note that this also changes the position of the toast from fixed to absolute.\r\n     * Meaning that the container should be fixed.\r\n     */\r\n    container: {\r\n        type: [Object, String] as PropType<string | HTMLElement>,\r\n        default: () => getOption(\"notification.container\", \"body\"),\r\n    },\r\n    /**\r\n     * Props passed to the internal notification component.\r\n     * @ignore\r\n     */\r\n    notification: {\r\n        type: Object as PropType<NotifcationProps>,\r\n        default: () => ({}),\r\n    },\r\n    /**\r\n     * This is used internally for programmatic usage.\r\n     * @ignore\r\n     */\r\n    programmatic: {\r\n        type: Object as PropType<ProgrammaticInstance>,\r\n        default: undefined,\r\n    },\r\n    /**\r\n     * This is used internally for programmatic usage.\r\n     * @ignore\r\n     */\r\n    promise: { type: Promise, default: undefined },\r\n    // class props (will not be displayed in the docs)\r\n    /** Root class of the notice */\r\n    noticeClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the notice when positioned */\r\n    noticePositionClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the custom container element */\r\n    noticeCustomContainerClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * active prop two-way binding\r\n     * @param value {boolean} - updated active prop\r\n     */\r\n    (e: \"update:active\", value: boolean): void;\r\n    /**\r\n     * on component close event\r\n     * @param value {any} - close event data\r\n     */\r\n    (e: \"close\", ...args: any[]): void;\r\n}>();\r\n\r\nconst notificationRef = ref();\r\n\r\n/** add programmatic usage to this component */\r\nconst { isActive, close, container } = useProgrammaticComponent(\r\n    () => notificationRef.value.$el,\r\n    props,\r\n    emits,\r\n    {\r\n        cancelOptions: [\"escape\", \"x\"],\r\n    },\r\n);\r\n\r\nconst parentTop = ref(null);\r\nconst parentBottom = ref(null);\r\n\r\nconst timer = ref();\r\n\r\nwatch(\r\n    () => isActive,\r\n    (value) => {\r\n        if (value) setAutoClose();\r\n        else if (timer.value) clearTimeout(timer.value);\r\n    },\r\n);\r\n\r\n/** Create or inject notice dom container elements. */\r\nonBeforeMount(() => {\r\n    if (\r\n        noticeClasses.value &&\r\n        positionBottomClasses.value &&\r\n        positionTopClasses.value\r\n    ) {\r\n        const rootClasses = getActiveClasses(noticeClasses.value);\r\n        const topClasses = getActiveClasses(positionTopClasses.value);\r\n        const bottomClasses = getActiveClasses(positionBottomClasses.value);\r\n\r\n        parentTop.value = container.value.querySelector(\r\n            `.${rootClasses.join(\".\")}.${topClasses.join(\".\")}`,\r\n        );\r\n        parentBottom.value = container.value.querySelector(\r\n            `.${rootClasses.join(\".\")}.${bottomClasses.join(\".\")}`,\r\n        );\r\n\r\n        if (parentTop.value && parentBottom.value) return;\r\n\r\n        if (!parentTop.value) {\r\n            parentTop.value = document.createElement(\"div\");\r\n            parentTop.value.className = `${rootClasses.join(\r\n                \" \",\r\n            )} ${topClasses.join(\" \")}`;\r\n        }\r\n\r\n        if (!parentBottom.value) {\r\n            parentBottom.value = document.createElement(\"div\");\r\n            parentBottom.value.className = `${rootClasses.join(\r\n                \" \",\r\n            )} ${bottomClasses.join(\" \")}`;\r\n        }\r\n\r\n        container.value.appendChild(parentTop.value);\r\n        container.value.appendChild(parentBottom.value);\r\n\r\n        if (container.value.tagName !== \"BODY\") {\r\n            const classes = getActiveClasses(\r\n                noticeCustomContainerClasses.value,\r\n            );\r\n            if (classes?.length)\r\n                classes\r\n                    .filter((c) => !!c)\r\n                    .forEach((c: string) => {\r\n                        parentTop.value.classList.add(c);\r\n                        parentBottom.value.classList.add(c);\r\n                    });\r\n        }\r\n    }\r\n});\r\n\r\nonMounted(() => {\r\n    showNotice();\r\n    setAutoClose();\r\n});\r\n\r\nconst correctParent = computed(() => {\r\n    switch (props.position) {\r\n        case \"top-right\":\r\n        case \"top\":\r\n        case \"top-left\":\r\n            return parentTop.value;\r\n\r\n        case \"bottom-right\":\r\n        case \"bottom\":\r\n        case \"bottom-left\":\r\n            return parentBottom.value;\r\n        default:\r\n            return null;\r\n    }\r\n});\r\n\r\nconst shouldQueue = computed(() =>\r\n    props.queue\r\n        ? parentTop.value.childElementCount > 0 ||\r\n          parentBottom.value.childElementCount > 0\r\n        : false,\r\n);\r\n\r\nfunction showNotice(): void {\r\n    if (shouldQueue.value) correctParent.value.innerHTML = \"\";\r\n    correctParent.value.insertAdjacentElement(\r\n        \"afterbegin\",\r\n        notificationRef.value.$el,\r\n    );\r\n    isActive.value = true;\r\n}\r\n\r\n/** Set timer to auto close message */\r\nfunction setAutoClose(): void {\r\n    if (!props.infinite) {\r\n        // clear old timer\r\n        if (timer.value) clearTimeout(timer.value);\r\n        // set new timer\r\n        timer.value = setTimeout(() => {\r\n            if (isActive.value)\r\n                handleClose({ action: \"close\", method: \"timeout\" });\r\n        }, props.duration);\r\n    }\r\n}\r\n\r\nfunction handleClose(...args: any[]): void {\r\n    clearTimeout(timer.value);\r\n    close(...args);\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst noticeClasses = defineClasses([\"noticeClass\", \"o-notices\"]);\r\n\r\nconst positionTopClasses = defineClasses([\r\n    \"noticePositionClass\",\r\n    \"o-notices--\",\r\n    \"top\",\r\n]);\r\nconst positionBottomClasses = defineClasses([\r\n    \"noticePositionClass\",\r\n    \"o-notices--\",\r\n    \"bottom\",\r\n]);\r\n\r\nconst noticeCustomContainerClasses = defineClasses([\r\n    \"noticeCustomContainerClass\",\r\n    \"o-notices__custom-container\",\r\n]);\r\n\r\n// --- Expose Public Functionalities ---\r\n\r\n/** expose functionalities for programmatic usage */\r\ndefineExpose({ close: handleClose, promise: props.promise });\r\n</script>\r\n\r\n<template>\r\n    <o-notification\r\n        v-bind=\"notification\"\r\n        ref=\"notificationRef\"\r\n        v-model:active=\"isActive\"\r\n        :position=\"position\"\r\n        @close=\"handleClose\">\r\n        <template #inner=\"{ close }\">\r\n            <!-- injected component for programmatic usage -->\r\n            <component\r\n                v-bind=\"$props.props\"\r\n                :is=\"component\"\r\n                v-if=\"component\"\r\n                v-on=\"$props.events\"\r\n                @close=\"close\" />\r\n        </template>\r\n        <slot />\r\n    </o-notification>\r\n</template>\r\n","import { createVNode, render } from \"vue\";\r\n\r\nimport NotificationNotice from \"./NotificationNotice.vue\";\r\nimport type { NotifcationNoticeProps, NotifcationProps } from \"./types\";\r\n\r\nimport InstanceRegistry from \"@/utils/InstanceRegistry\";\r\nimport { VueInstance } from \"@/utils/plugins\";\r\nimport { merge } from \"@/utils/helpers\";\r\nimport { getOption } from \"@/utils/config\";\r\nimport type { OrugaOptions, ProgrammaticExpose } from \"@/types\";\r\n\r\ndeclare module \"../../index\" {\r\n    interface OrugaProgrammatic {\r\n        notification: typeof NotificationProgrammatic;\r\n    }\r\n}\r\n\r\nconst instances = new InstanceRegistry<typeof NotificationNotice>();\r\n\r\ntype NotifcationProgrammaticProps = Readonly<\r\n    | string\r\n    | (NotifcationNoticeProps &\r\n          NotifcationProps &\r\n          OrugaOptions[\"notification\"] &\r\n          Record<string, unknown>)\r\n>;\r\n\r\nconst NotificationProgrammatic = {\r\n    open(params: NotifcationProgrammaticProps): ProgrammaticExpose {\r\n        const componentParams =\r\n            typeof params === \"string\"\r\n                ? {\r\n                      message: params,\r\n                  }\r\n                : { ...params };\r\n\r\n        let slot;\r\n        if (Array.isArray(componentParams.message)) {\r\n            slot = componentParams.message;\r\n            delete componentParams.message;\r\n        }\r\n\r\n        const defaultParams = {\r\n            programmatic: { instances },\r\n            active: true, // set the active state to true\r\n            position: getOption(\"notification.position\", \"top-right\"),\r\n        };\r\n\r\n        const notificationParams = componentParams.notification\r\n            ? componentParams.notification\r\n            : componentParams;\r\n\r\n        const propsData = merge(defaultParams, componentParams);\r\n        propsData.notification = merge({}, notificationParams);\r\n        propsData.promise = new Promise((p1, p2) => {\r\n            propsData.programmatic.resolve = p1;\r\n            propsData.programmatic.reject = p2;\r\n        });\r\n\r\n        const defaultSlot = () => slot;\r\n\r\n        const app = VueInstance;\r\n        const vnode = createVNode(NotificationNotice, propsData, defaultSlot);\r\n        vnode.appContext = app._context;\r\n        render(vnode, document.createElement(\"div\"));\r\n\r\n        // return exposed functionalities\r\n        return vnode.component.exposed as ProgrammaticExpose;\r\n    },\r\n    closeAll(...args: any[]): void {\r\n        instances.walk((entry) => entry.exposed.close(...args));\r\n    },\r\n};\r\n\r\nexport default NotificationProgrammatic;\r\n","import type { App, Plugin } from \"vue\";\r\n\r\nimport Notification from \"./Notification.vue\";\r\nimport NotificationProgrammatic from \"./NotificationProgrammatic\";\r\n\r\nimport {\r\n    registerComponent,\r\n    registerComponentProgrammatic,\r\n} from \"@/utils/plugins\";\r\n\r\n/** export notification specific types */\r\nexport type { NotifcationNoticeProps, NotifcationProps } from \"./types\";\r\n\r\n/** export notification plugin */\r\nexport default {\r\n    install(app: App) {\r\n        registerComponent(app, Notification);\r\n        registerComponentProgrammatic(\r\n            app,\r\n            \"notification\",\r\n            NotificationProgrammatic,\r\n        );\r\n    },\r\n} as Plugin;\r\n\r\n/** export notification components */\r\nexport { Notification as ONotification, NotificationProgrammatic };\r\n"],"names":["NotificationNotice","Notification","NotificationProgrammatic"],"mappings":"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"}