{"version":3,"file":"radio.mjs","sources":["../../src/components/radio/Radio.vue","../../src/components/radio/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { computed, ref, type PropType } from \"vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport { uuid } from \"@/utils/helpers\";\r\nimport {\r\n    defineClasses,\r\n    useVModelBinding,\r\n    useInputHandler,\r\n} from \"@/composables\";\r\n\r\nimport type { ComponentClass } from \"@/types\";\r\n\r\n/**\r\n * Select an option from a set\r\n * @displayName Radio\r\n * @style _radio.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"ORadio\",\r\n    configField: \"radio\",\r\n    inheritAttrs: false,\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** @model */\r\n    modelValue: { type: [String, Number, Boolean], default: undefined },\r\n    /**\r\n     * Color of the control\r\n     * @values primary, info, success, warning, danger, and any other custom color\r\n     */\r\n    variant: {\r\n        type: String,\r\n        default: () => getOption(\"radio.variant\"),\r\n    },\r\n    /**\r\n     * Size of the control\r\n     * @values small, medium, large\r\n     */\r\n    size: {\r\n        type: String,\r\n        default: () => getOption(\"radio.size\"),\r\n    },\r\n    /** Input label, unnecessary when default slot is used */\r\n    label: { type: String, default: undefined },\r\n    /** Same as native value */\r\n    nativeValue: { type: [String, Number, Boolean], default: undefined },\r\n    /** Same as native disabled */\r\n    disabled: { type: Boolean, default: false },\r\n    /** Same as native required */\r\n    required: { type: Boolean, default: false },\r\n    /** Same as native name */\r\n    name: { type: String, default: undefined },\r\n    /** Accessibility label to establish relationship between the checkbox and control label */\r\n    ariaLabelledby: { type: String, default: () => uuid() },\r\n    /** Same as native autocomplete options to use in HTML5 validation */\r\n    autocomplete: {\r\n        type: String,\r\n        default: () => getOption(\"radio.autocomplete\", \"off\"),\r\n    },\r\n    /** Enable html 5 native validation */\r\n    useHtml5Validation: {\r\n        type: Boolean,\r\n        default: () => getOption(\"useHtml5Validation\", true),\r\n    },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class when radio is disabled */\r\n    disabledClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the root element when checked */\r\n    checkedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the native input element */\r\n    inputClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the native input element when checked */\r\n    inputCheckedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the radio label */\r\n    labelClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the radio size */\r\n    sizeClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the radio variant */\r\n    variantClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * modelValue prop two-way binding\r\n     * @param value {string, number, boolean} updated modelValue prop\r\n     */\r\n    (e: \"update:modelValue\", value: string | number | boolean): void;\r\n    /**\r\n     * on input change event\r\n     * @param value {string, number, boolean} input value\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"input\", value: string | number | boolean, event: Event): void;\r\n    /**\r\n     * on input focus event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"focus\", event: Event): void;\r\n    /**\r\n     * on input blur event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"blur\", event: Event): void;\r\n    /**\r\n     * on input invalid event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"invalid\", event: Event): void;\r\n}>();\r\n\r\nconst inputRef = ref();\r\n\r\n// use form input functionalities\r\nconst { onBlur, onFocus, onInvalid, setFocus } = useInputHandler(\r\n    inputRef,\r\n    emits,\r\n    props,\r\n);\r\n\r\nconst vmodel = useVModelBinding<string | number | boolean>(props, emits);\r\n\r\nconst isChecked = computed(() => vmodel.value === props.nativeValue);\r\n\r\nfunction onInput(event: Event): void {\r\n    emits(\"input\", vmodel.value, event);\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"rootClass\", \"o-radio\"],\r\n    [\"checkedClass\", \"o-radio--checked\", null, isChecked],\r\n    [\r\n        \"sizeClass\",\r\n        \"o-radio--\",\r\n        computed(() => props.size),\r\n        computed(() => !!props.size),\r\n    ],\r\n    [\r\n        \"disabledClass\",\r\n        \"o-radio--disabled\",\r\n        null,\r\n        computed(() => props.disabled),\r\n    ],\r\n    [\r\n        \"variantClass\",\r\n        \"o-radio--\",\r\n        computed(() => props.variant),\r\n        computed(() => !!props.variant),\r\n    ],\r\n);\r\n\r\nconst inputClasses = defineClasses(\r\n    [\"inputClass\", \"o-radio__input\"],\r\n    [\"inputCheckedClass\", \"o-radio__input--checked\", null, isChecked],\r\n);\r\n\r\nconst labelClasses = defineClasses([\"labelClass\", \"o-radio__label\"]);\r\n\r\n// --- Expose Public Functionalities ---\r\n\r\n/** expose functionalities for programmatic usage */\r\ndefineExpose({ focus: setFocus });\r\n</script>\r\n\r\n<template>\r\n    <label\r\n        ref=\"label\"\r\n        :class=\"rootClasses\"\r\n        data-oruga=\"radio\"\r\n        role=\"radio\"\r\n        :aria-checked=\"isChecked\"\r\n        @click.stop=\"setFocus\"\r\n        @keydown.prevent.enter=\"setFocus\">\r\n        <input\r\n            v-bind=\"$attrs\"\r\n            ref=\"inputRef\"\r\n            v-model=\"vmodel\"\r\n            type=\"radio\"\r\n            data-oruga-input=\"radio\"\r\n            :class=\"inputClasses\"\r\n            :disabled=\"disabled\"\r\n            :required=\"required\"\r\n            :name=\"name\"\r\n            :autocomplete=\"autocomplete\"\r\n            :value=\"nativeValue\"\r\n            :aria-labelledby=\"ariaLabelledby\"\r\n            @click.stop\r\n            @blur=\"onBlur\"\r\n            @focus=\"onFocus\"\r\n            @invalid=\"onInvalid\"\r\n            @input=\"onInput\" />\r\n\r\n        <span\r\n            v-if=\"label || $slots.default\"\r\n            :id=\"ariaLabelledby\"\r\n            :class=\"labelClasses\">\r\n            <!--\r\n                @slot Override the label, default is label prop \r\n            -->\r\n            <slot>{{ label }}</slot>\r\n        </span>\r\n    </label>\r\n</template>\r\n","import type { App, Plugin } from \"vue\";\r\n\r\nimport Radio from \"./Radio.vue\";\r\n\r\nimport { registerComponent } from \"@/utils/plugins\";\r\n\r\n/** export radio plugin */\r\nexport default {\r\n    install(app: App) {\r\n        registerComponent(app, Radio);\r\n    },\r\n} as Plugin;\r\n\r\n/** export radio components */\r\nexport { Radio as ORadio };\r\n"],"names":["Radio"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,UAAM,QAAQ;AAsFd,UAAM,QAAQ;AA6Bd,UAAM,WAAW;AAGjB,UAAM,EAAE,QAAQ,SAAS,WAAW,SAAa,IAAA;AAAA,MAC7C;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAGE,UAAA,SAAS,iBAA4C,OAAO,KAAK;AAEvE,UAAM,YAAY,SAAS,MAAM,OAAO,UAAU,MAAM,WAAW;AAEnE,aAAS,QAAQ,OAAoB;AAC3B,YAAA,SAAS,OAAO,OAAO,KAAK;AAAA,IACtC;AAIA,UAAM,cAAc;AAAA,MAChB,CAAC,aAAa,SAAS;AAAA,MACvB,CAAC,gBAAgB,oBAAoB,MAAM,SAAS;AAAA,MACpD;AAAA,QACI;AAAA,QACA;AAAA,QACA,SAAS,MAAM,MAAM,IAAI;AAAA,QACzB,SAAS,MAAM,CAAC,CAAC,MAAM,IAAI;AAAA,MAC/B;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,MAAM,QAAQ;AAAA,MACjC;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACA,SAAS,MAAM,MAAM,OAAO;AAAA,QAC5B,SAAS,MAAM,CAAC,CAAC,MAAM,OAAO;AAAA,MAClC;AAAA,IAAA;AAGJ,UAAM,eAAe;AAAA,MACjB,CAAC,cAAc,gBAAgB;AAAA,MAC/B,CAAC,qBAAqB,2BAA2B,MAAM,SAAS;AAAA,IAAA;AAGpE,UAAM,eAAe,cAAc,CAAC,cAAc,gBAAgB,CAAC;AAKtD,aAAA,EAAE,OAAO,SAAA,CAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzLhC,MAAe,QAAA;AAAA,EACX,QAAQ,KAAU;AACd,sBAAkB,KAAKA,SAAK;AAAA,EAChC;AACJ;"}