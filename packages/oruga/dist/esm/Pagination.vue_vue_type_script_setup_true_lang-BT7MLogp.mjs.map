{"version":3,"file":"Pagination.vue_vue_type_script_setup_true_lang-BT7MLogp.mjs","sources":["../../src/components/pagination/PaginationButton.vue","../../src/components/pagination/Pagination.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { computed, type PropType } from \"vue\";\r\n\r\nimport type { ClassBind, DynamicComponent } from \"@/types\";\r\n\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OPaginationButton\",\r\n    configField: \"pagination\",\r\n});\r\n\r\nconst props = defineProps({\r\n    number: { type: Number, default: undefined },\r\n    isCurrent: { type: Boolean, default: false },\r\n    click: {\r\n        type: Function as PropType<(event: Event) => void>,\r\n        required: true,\r\n    },\r\n    ariaLabel: { type: String, default: undefined },\r\n    disabled: { type: Boolean, default: false },\r\n    tag: {\r\n        type: [String, Object, Function] as PropType<DynamicComponent>,\r\n        default: \"button\" as DynamicComponent,\r\n    },\r\n    class: { type: String, default: undefined },\r\n    linkClass: {\r\n        type: Array as PropType<ClassBind[]>,\r\n        required: true,\r\n    },\r\n    linkCurrentClass: {\r\n        type: Array as PropType<ClassBind[]>,\r\n        required: true,\r\n    },\r\n});\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst linkClasses = computed(() => [\r\n    ...props.linkClass,\r\n    props.class,\r\n    ...(props.isCurrent ? props.linkCurrentClass : []),\r\n]);\r\n</script>\r\n\r\n<template>\r\n    <component\r\n        :is=\"tag\"\r\n        role=\"button\"\r\n        :tabindex=\"disabled ? null : 0\"\r\n        :disabled=\"disabled\"\r\n        :class=\"linkClasses\"\r\n        v-bind=\"$attrs\"\r\n        :aria-label=\"ariaLabel\"\r\n        :aria-current=\"isCurrent\"\r\n        @click.prevent=\"click\"\r\n        @keydown.enter.prevent=\"click\">\r\n        <slot>{{ number }}</slot>\r\n    </component>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed, watch, nextTick, type PropType } from \"vue\";\r\n\r\nimport OPaginationButton from \"./PaginationButton.vue\";\r\nimport OIcon from \"../icon/Icon.vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport { defineClasses, useMatchMedia, usePropBinding } from \"@/composables\";\r\n\r\nimport type { ComponentClass, DynamicComponent } from \"@/types\";\r\n\r\n/**\r\n * A responsive and flexible pagination\r\n * @displayName Pagination\r\n * @style _pagination.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OPagination\",\r\n    configField: \"pagination\",\r\n    inheritAttrs: false,\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** Total count of items */\r\n    total: { type: Number, default: undefined },\r\n    /** Items count for each page */\r\n    perPage: {\r\n        type: [Number, String],\r\n        default: () => getOption(\"pagination.perPage\", 20),\r\n    },\r\n    /** Current page number, use v-model:current to make it two-way binding. */\r\n    current: { type: Number, default: 1 },\r\n    /** Number of pagination items to show before current page. */\r\n    rangeBefore: { type: Number, default: 1 },\r\n    /** Number of pagination items to show after current page. */\r\n    rangeAfter: { type: Number, default: 1 },\r\n    /**\r\n     * Pagination size\r\n     * @values small, medium, large\r\n     */\r\n    size: {\r\n        type: String,\r\n        default: () => getOption(\"pagination.size\"),\r\n    },\r\n    /** Simple style */\r\n    simple: {\r\n        type: Boolean,\r\n        default: () => getOption(\"pagination.simple\", false),\r\n    },\r\n    /** Rounded button style */\r\n    rounded: {\r\n        type: Boolean,\r\n        default: () => getOption(\"pagination.rounded\", false),\r\n    },\r\n    /**\r\n     * Buttons order\r\n     * @values centered, right, left\r\n     */\r\n    order: {\r\n        type: String,\r\n        default: () => getOption(\"pagination.order\", \"right\"),\r\n        validator: (value: string) =>\r\n            [\"centered\", \"right\", \"left\"].indexOf(value) >= 0,\r\n    },\r\n    /** Pagination button tag name */\r\n    buttonTag: {\r\n        type: [String, Object, Function] as PropType<DynamicComponent>,\r\n        default: () =>\r\n            getOption<DynamicComponent>(\"pagination.buttonTag\", \"button\"),\r\n    },\r\n    /**\r\n     * Icon pack to use\r\n     * @values mdi, fa, fas and any other custom icon pack\r\n     */\r\n    iconPack: {\r\n        type: String,\r\n        default: () => getOption(\"pagination.iconPack\"),\r\n    },\r\n    /** Icon to use for previous button */\r\n    iconPrev: {\r\n        type: String,\r\n        default: () => getOption(\"pagination.iconPrev\", \"chevron-left\"),\r\n    },\r\n    /** Icon to use for next button */\r\n    iconNext: {\r\n        type: String,\r\n        default: () => getOption(\"pagination.iconNext\", \"chevron-right\"),\r\n    },\r\n    /** Mobile breakpoint as max-width value */\r\n    mobileBreakpoint: {\r\n        type: String,\r\n        default: () => getOption(\"pagination.mobileBreakpoint\"),\r\n    },\r\n    /** Accessibility label for the next page button. */\r\n    ariaNextLabel: {\r\n        type: String,\r\n        default: () => getOption(\"pagination.ariaNextLabel\", \"Next page\"),\r\n    },\r\n    /** Accessibility label for the previous page button. */\r\n    ariaPreviousLabel: {\r\n        type: String,\r\n        default: () =>\r\n            getOption(\"pagination.ariaPreviousLabel\", \"Previous page\"),\r\n    },\r\n    /** Accessibility label for the page button. */\r\n    ariaPageLabel: {\r\n        type: String,\r\n        default: () => getOption(\"pagination.ariaPageLabel\", \"page\"),\r\n    },\r\n    /** Accessibility label for the current page button. */\r\n    ariaCurrentLabel: {\r\n        type: String,\r\n        default: () => getOption(\"pagination.ariaCurrentLabel\", \"Current page\"),\r\n    },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the prev button */\r\n    prevButtonClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the next button */\r\n    nextButtonClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the pagination list */\r\n    listClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the pagination list items */\r\n    listItemClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the link button */\r\n    linkClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the current link */\r\n    linkCurrentClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the pagination ellipsis */\r\n    ellipsisClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the info in `simple` mode */\r\n    infoClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the pagination order */\r\n    orderClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the pagination in `simple` mode */\r\n    simpleClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the pagination when rounded */\r\n    roundedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the disabled link */\r\n    linkDisabledClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for the pagination size */\r\n    sizeClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of pagination component when on mobile */\r\n    mobileClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * current prop two-way binding\r\n     * @param value {number} updated current prop\r\n     */\r\n    (e: \"update:current\", value: number): void;\r\n    /**\r\n     * on current change event\r\n     * @param value {number} current value\r\n     */\r\n    (e: \"change\", event: number): void;\r\n}>();\r\n\r\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\r\n\r\nconst current = usePropBinding(\"current\", props, emits);\r\n\r\n/** Total page size (count). */\r\nconst pageCount = computed(() =>\r\n    Math.ceil(props.total / Number(props.perPage)),\r\n);\r\n\r\n/** If current page is trying to be greater than page count, set to last. */\r\nwatch(\r\n    () => pageCount.value,\r\n    (value) => {\r\n        if (props.current > value) last();\r\n    },\r\n);\r\n\r\n/** First item of the page (count). */\r\nconst firstItem = computed(() => {\r\n    const perPage = Number(props.perPage);\r\n    const firstItem = props.current * perPage - perPage + 1;\r\n    return firstItem >= 0 ? firstItem : 0;\r\n});\r\n\r\n/** Check if previous button is available. */\r\nconst hasPrev = computed(() => props.current > 1);\r\n\r\n/** Check if first page button should be visible. */\r\nconst hasFirst = computed(() => props.current >= 2 + props.rangeBefore);\r\n\r\n/** Check if first ellipsis should be visible. */\r\nconst hasFirstEllipsis = computed(() => props.current >= props.rangeBefore + 4);\r\n\r\n/** Check if last page button should be visible. */\r\nconst hasLast = computed(\r\n    () => props.current <= pageCount.value - (1 + props.rangeAfter),\r\n);\r\n\r\n/** Check if last ellipsis should be visible. */\r\nconst hasLastEllipsis = computed(\r\n    () => props.current < pageCount.value - (2 + props.rangeAfter),\r\n);\r\n\r\n/** Check if next button is available. */\r\nconst hasNext = computed(() => props.current < pageCount.value);\r\n\r\n/**\r\n * Get near pages, 1 before and 1 after the current.\r\n * Also add the click event to the array.\r\n */\r\nconst pagesInRange = computed<ReturnType<typeof getPage>[]>(() => {\r\n    if (props.simple) return;\r\n\r\n    let left = Math.max(1, props.current - props.rangeBefore);\r\n    if (left - 1 === 2) {\r\n        left--; // Do not show the ellipsis if there is only one to hide\r\n    }\r\n    let right = Math.min(props.current + props.rangeAfter, pageCount.value);\r\n    if (pageCount.value - right === 2) {\r\n        right++; // Do not show the ellipsis if there is only one to hide\r\n    }\r\n\r\n    const pages = [];\r\n    for (let i = left; i <= right; i++) {\r\n        pages.push(getPage(i));\r\n    }\r\n    return pages;\r\n});\r\n\r\n/** Get properties for a page */\r\nfunction getPage(\r\n    num: number,\r\n    ariaLabel?: string,\r\n): {\r\n    number: number;\r\n    isCurrent: boolean;\r\n    click: (event: Event) => void;\r\n    ariaLabel: string;\r\n    tag: DynamicComponent;\r\n} {\r\n    return {\r\n        number: num,\r\n        isCurrent: props.current === num,\r\n        click: (event: Event): void => changePage(num, event),\r\n        ariaLabel: ariaLabel || getAriaPageLabel(num, props.current === num),\r\n        tag: props.buttonTag,\r\n    };\r\n}\r\n\r\n/** Get text for aria-label according to page number. */\r\nfunction getAriaPageLabel(pageNumber: number, isCurrent: boolean): string {\r\n    if (props.ariaPageLabel && (!isCurrent || !props.ariaCurrentLabel))\r\n        return props.ariaPageLabel + \" \" + pageNumber + \".\";\r\n    else if (props.ariaPageLabel && isCurrent && props.ariaCurrentLabel)\r\n        return (\r\n            props.ariaCurrentLabel +\r\n            \", \" +\r\n            props.ariaPageLabel +\r\n            \" \" +\r\n            pageNumber +\r\n            \".\"\r\n        );\r\n    return null;\r\n}\r\n\r\n/** Previous button click listener. */\r\nfunction prev(event?: Event): void {\r\n    changePage(props.current - 1, event);\r\n}\r\n\r\n/** Next button click listener. */\r\nfunction next(event?: Event): void {\r\n    changePage(props.current + 1, event);\r\n}\r\n\r\n/** First button click listener. */\r\nfunction first(event?: Event): void {\r\n    changePage(1, event);\r\n}\r\n\r\n/** Last button click listener. */\r\nfunction last(event?: Event): void {\r\n    changePage(pageCount.value, event);\r\n}\r\n\r\nfunction changePage(page: number, event: Event): void {\r\n    if (props.current === page || page < 1 || page > pageCount.value) return;\r\n    emits(\"change\", page);\r\n    current.value = page;\r\n\r\n    // Set focus on element to keep tab order\r\n    if (event && event.target)\r\n        nextTick(() => (event.target as HTMLElement).focus());\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"rootClass\", \"o-pag\"],\r\n    [\r\n        \"orderClass\",\r\n        \"o-pag--\",\r\n        computed(() => props.order),\r\n        computed(() => !!props.order),\r\n    ],\r\n    [\r\n        \"sizeClass\",\r\n        \"o-pag--\",\r\n        computed(() => props.size),\r\n        computed(() => !!props.size),\r\n    ],\r\n    [\"simpleClass\", \"o-pag--simple\", null, computed(() => props.simple)],\r\n    [\"mobileClass\", \"o-pag--mobile\", null, isMobile],\r\n);\r\n\r\nconst prevBtnClasses = defineClasses(\r\n    [\"prevButtonClass\", \"o-pag__previous\"],\r\n    [\r\n        \"linkDisabledClass\",\r\n        \"o-pag__link--disabled\",\r\n        null,\r\n        computed(() => !hasPrev.value),\r\n    ],\r\n);\r\n\r\nconst nextBtnClasses = defineClasses(\r\n    [\"nextButtonClass\", \"o-pag__next\"],\r\n    [\r\n        \"linkDisabledClass\",\r\n        \"o-pag__link--disabled\",\r\n        null,\r\n        computed(() => !hasNext.value),\r\n    ],\r\n);\r\n\r\nconst infoClasses = defineClasses([\"infoClass\", \"o-pag__info\"]);\r\n\r\nconst ellipsisClasses = defineClasses([\"ellipsisClass\", \"o-pag__ellipsis\"]);\r\n\r\nconst listClasses = defineClasses([\"listClass\", \"o-pag__list\"]);\r\n\r\nconst linkClasses = defineClasses(\r\n    [\"linkClass\", \"o-pag__link\"],\r\n    [\r\n        \"roundedClass\",\r\n        \"o-pag__link--rounded\",\r\n        null,\r\n        computed(() => props.rounded),\r\n    ],\r\n);\r\n\r\nconst linkCurrentClasses = defineClasses([\r\n    \"linkCurrentClass\",\r\n    \"o-pag__link--current\",\r\n]);\r\n\r\nconst listItemClasses = defineClasses([\"listItemClass\", \"o-pag__item\"]);\r\n\r\n// --- Expose Public Functionalities ---\r\n\r\n/** expose functionalities for programmatic usage */\r\ndefineExpose({ last, first, prev, next });\r\n</script>\r\n\r\n<template>\r\n    <nav :class=\"rootClasses\" data-oruga=\"pagination\">\r\n        <!-- \r\n            @slot Previous button slot\r\n            @binding {number} number - page number \r\n            @binding {boolean} isCurrent - if page is current\r\n            @binding {(event:Event): void} click - onClick handler\r\n            @binding {string} ariaLabel - aria-label attribute\r\n        -->\r\n        <slot name=\"previous\" v-bind=\"getPage(current - 1, ariaPreviousLabel)\">\r\n            <o-pagination-button\r\n                v-bind=\"getPage(current - 1, ariaPreviousLabel)\"\r\n                :class=\"prevBtnClasses\"\r\n                :link-class=\"linkClasses\"\r\n                :link-current-class=\"linkCurrentClasses\">\r\n                <o-icon\r\n                    :icon=\"iconPrev\"\r\n                    :pack=\"iconPack\"\r\n                    both\r\n                    aria-hidden=\"true\" />\r\n            </o-pagination-button>\r\n        </slot>\r\n        <!-- \r\n            @slot Next button slot\r\n            @binding {number} number - page number \r\n            @binding {boolean} isCurrent - if page is current\r\n            @binding {(event:Event): void} click - onClick handler\r\n            @binding {string} ariaLabel - aria-label attribute\r\n        -->\r\n        <slot name=\"next\" v-bind=\"getPage(current + 1, ariaNextLabel)\">\r\n            <o-pagination-button\r\n                v-bind=\"getPage(current + 1, ariaNextLabel)\"\r\n                :class=\"nextBtnClasses\"\r\n                :link-class=\"linkClasses\"\r\n                :link-current-class=\"linkCurrentClasses\">\r\n                <o-icon\r\n                    :icon=\"iconNext\"\r\n                    :pack=\"iconPack\"\r\n                    both\r\n                    aria-hidden=\"true\" />\r\n            </o-pagination-button>\r\n        </slot>\r\n\r\n        <small v-if=\"simple\" :class=\"infoClasses\">\r\n            <template v-if=\"perPage == 1\">\r\n                {{ firstItem }} / {{ total }}\r\n            </template>\r\n            <template v-else>\r\n                {{ firstItem }}-{{ Math.min(current * Number(perPage), total) }}\r\n                /\r\n                {{ total }}\r\n            </template>\r\n        </small>\r\n\r\n        <ul v-else :class=\"listClasses\">\r\n            <!--First-->\r\n            <li v-if=\"hasFirst\" :class=\"listItemClasses\">\r\n                <slot v-bind=\"getPage(1)\">\r\n                    <o-pagination-button\r\n                        v-bind=\"getPage(1)\"\r\n                        :link-class=\"linkClasses\"\r\n                        :link-current-class=\"linkCurrentClasses\" />\r\n                </slot>\r\n            </li>\r\n            <li v-if=\"hasFirstEllipsis\" :class=\"listItemClasses\">\r\n                <span :class=\"ellipsisClasses\">&hellip;</span>\r\n            </li>\r\n\r\n            <!--Pages-->\r\n            <li\r\n                v-for=\"page in pagesInRange\"\r\n                :key=\"page.number\"\r\n                :class=\"listItemClasses\">\r\n                <slot v-bind=\"page\">\r\n                    <o-pagination-button\r\n                        v-bind=\"page\"\r\n                        :link-class=\"linkClasses\"\r\n                        :link-current-class=\"linkCurrentClasses\" />\r\n                </slot>\r\n            </li>\r\n\r\n            <!--Last-->\r\n            <li v-if=\"hasLastEllipsis\" :class=\"listItemClasses\">\r\n                <span :class=\"ellipsisClasses\">&hellip;</span>\r\n            </li>\r\n            <li v-if=\"hasLast\" :class=\"listItemClasses\">\r\n                <!-- \r\n                    @slot Pagination button slot\r\n                    @binding {number} number - page number \r\n                    @binding {boolean} isCurrent - if page is current\r\n                    @binding {(event:Event): void} click - onClick handler\r\n                    @binding {string} ariaLabel - aria-label attribute\r\n                -->\r\n                <slot v-bind=\"getPage(pageCount)\">\r\n                    <o-pagination-button\r\n                        v-bind=\"getPage(pageCount)\"\r\n                        :link-class=\"linkClasses\"\r\n                        :link-current-class=\"linkCurrentClasses\" />\r\n                </slot>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n</template>\r\n"],"names":["firstItem"],"mappings":"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"}