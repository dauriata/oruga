{"version":3,"file":"Tooltip.vue_vue_type_script_setup_true_lang-Bw2K4plP.mjs","sources":["../../src/components/tooltip/Tooltip.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { ref, computed, watch, nextTick, type PropType } from \"vue\";\r\n\r\nimport PositionWrapper from \"../utils/PositionWrapper.vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport { isClient } from \"@/utils/ssr\";\r\nimport {\r\n    defineClasses,\r\n    usePropBinding,\r\n    useEventListener,\r\n    useClickOutside,\r\n} from \"@/composables\";\r\n\r\nimport type { ComponentClass, DynamicComponent } from \"@/types\";\r\n\r\n/**\r\n * Display a brief helper text to your user\r\n * @displayName Tooltip\r\n * @style _tooltip.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OTooltip\",\r\n    configField: \"tooltip\",\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** Whether tooltip is active or not, use v-model:active to make it two-way binding */\r\n    active: { type: Boolean, default: false },\r\n    /** Tooltip text, unnecessary when content slot is used */\r\n    label: { type: String, default: undefined },\r\n    /**\r\n     * Color of the tooltip\r\n     * @values primary, info, success, warning, danger, and any other custom color\r\n     */\r\n    variant: {\r\n        type: String,\r\n        default: () => getOption(\"tooltip.variant\"),\r\n    },\r\n    /**\r\n     * Position of the Tooltip relative to the trigger\r\n     * @values auto, top, bottom, left, right, top-right, top-left, bottom-left, bottom-right\r\n     */\r\n    position: {\r\n        type: String,\r\n        default: () => getOption(\"tooltip.position\", \"auto\"),\r\n        validator: (value: string) =>\r\n            [\r\n                \"auto\",\r\n                \"top\",\r\n                \"bottom\",\r\n                \"left\",\r\n                \"right\",\r\n                \"top-right\",\r\n                \"top-left\",\r\n                \"bottom-left\",\r\n                \"bottom-right\",\r\n            ].indexOf(value) > -1,\r\n    },\r\n    /** Tooltip will be always active */\r\n    always: { type: Boolean, default: false },\r\n    /** Tooltip will be disabled */\r\n    disabled: { type: Boolean, default: false },\r\n    /** Tooltip default animation */\r\n    animation: {\r\n        type: String,\r\n        default: () => getOption(\"tooltip.animation\", \"fade\"),\r\n    },\r\n    /** Tooltip will be multilined */\r\n    multiline: { type: Boolean, default: false },\r\n    /** Tooltip trigger tag name */\r\n    triggerTag: {\r\n        type: [String, Object, Function] as PropType<DynamicComponent>,\r\n        default: () => getOption<DynamicComponent>(\"tooltip.triggerTag\", \"div\"),\r\n    },\r\n    /**\r\n     * Tooltip trigger events\r\n     * @values hover, click, focus, contextmenu\r\n     */\r\n    triggers: {\r\n        type: Array as PropType<string[]>,\r\n        default: () => getOption(\"tooltip.triggers\", [\"hover\"]),\r\n        validator: (values: string[]) =>\r\n            values.filter(\r\n                (value) =>\r\n                    [\"click\", \"hover\", \"contextmenu\", \"focus\"].indexOf(value) >\r\n                    -1,\r\n            ).length === values.length,\r\n    },\r\n    /** Tooltip delay before it appears (number in ms) */\r\n    delay: { type: Number, default: undefined },\r\n    /**\r\n     * Tooltip auto close options (pressing escape, clicking the content or outside)\r\n     * @values true, false, content, outside, escape\r\n     */\r\n    closeable: {\r\n        type: [Array, Boolean] as PropType<string[] | boolean>,\r\n        default: () =>\r\n            getOption(\"tooltip.closeable\", [\"escape\", \"outside\", \"content\"]),\r\n    },\r\n    /**\r\n     * Append the component to another part of the DOM.\r\n     * Set `true` to append the component to the body.\r\n     * In addition, any CSS selector string or an actual DOM node can be used.\r\n     */\r\n    teleport: {\r\n        type: [Boolean, String, Object],\r\n        default: () => getOption(\"dropdown.teleport\", false),\r\n    },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class when the dropdown is teleported */\r\n    teleportClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the tooltip content */\r\n    contentClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the tooltip trigger position */\r\n    positionClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the tooltip trigger */\r\n    triggerClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the tooltip content when is multiline */\r\n    multilineClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the tooltip trigger when is always visible */\r\n    alwaysClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the tooltip variant */\r\n    variantClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the tooltip arrow */\r\n    arrowClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the tooltip arrow position */\r\n    arrowPositionClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * active prop two-way binding\r\n     * @param value {boolean} - updated active prop\r\n     */\r\n    (e: \"update:active\", value: boolean): void;\r\n    /** on active change to false event */\r\n    (e: \"close\"): void;\r\n    /** on active change to true event */\r\n    (e: \"open\"): void;\r\n}>();\r\n\r\nconst isActive = usePropBinding<boolean>(\"active\", props, emits, {\r\n    passive: true,\r\n});\r\n\r\nwatch(isActive, (value) => {\r\n    if (value) emits(\"open\");\r\n    else emits(\"close\");\r\n});\r\n\r\nconst timer = ref();\r\n\r\nconst autoPosition = ref(props.position);\r\n\r\n/** update autoPosition on prop change */\r\nwatch(\r\n    () => props.position,\r\n    (v) => (autoPosition.value = v),\r\n);\r\n\r\n// --- Event Handler ---\r\n\r\nconst contentRef = ref<HTMLElement>();\r\nconst triggerRef = ref<HTMLElement>();\r\n\r\nconst eventCleanups = ref([]);\r\n\r\nwatch(isActive, (value) => {\r\n    // on active set event handler\r\n    if (value && isClient) {\r\n        setTimeout(() => {\r\n            if (cancelOptions.value.indexOf(\"outside\") >= 0) {\r\n                // set outside handler\r\n                eventCleanups.value.push(\r\n                    useClickOutside(contentRef, onClickedOutside, [triggerRef]),\r\n                );\r\n            }\r\n\r\n            if (cancelOptions.value.indexOf(\"escape\") >= 0) {\r\n                // set keyup handler\r\n                eventCleanups.value.push(\r\n                    useEventListener(\"keyup\", onKeyPress, document, {\r\n                        immediate: true,\r\n                    }),\r\n                );\r\n            }\r\n        });\r\n    } else if (!value) {\r\n        // on close cleanup event handler\r\n        eventCleanups.value.forEach((fn) => fn());\r\n        eventCleanups.value.length = 0;\r\n    }\r\n});\r\n\r\nconst cancelOptions = computed<string[]>(() =>\r\n    typeof props.closeable === \"boolean\"\r\n        ? props.closeable\r\n            ? [\"escape\", \"outside\", \"content\"]\r\n            : []\r\n        : props.closeable,\r\n);\r\n\r\n/** Close tooltip if clicked outside. */\r\nfunction onClickedOutside(): void {\r\n    if (!isActive.value || props.always) return;\r\n    if (cancelOptions.value.indexOf(\"outside\") < 0) return;\r\n    isActive.value = false;\r\n}\r\n\r\n/** Keypress event that is bound to the document */\r\nfunction onKeyPress(event: KeyboardEvent): void {\r\n    if (isActive.value && (event.key === \"Escape\" || event.key === \"Esc\")) {\r\n        if (cancelOptions.value.indexOf(\"escape\") < 0) return;\r\n        isActive.value = false;\r\n    }\r\n}\r\n\r\nfunction onClick(): void {\r\n    if (props.triggers.indexOf(\"click\") < 0) return;\r\n    // if not active, toggle after clickOutside event\r\n    // this fixes toggling programmatic\r\n    nextTick(() => setTimeout(() => open()));\r\n}\r\n\r\nfunction onContextMenu(event: Event): void {\r\n    if (props.triggers.indexOf(\"contextmenu\") < 0) return;\r\n    event.preventDefault();\r\n    open();\r\n}\r\n\r\nfunction onFocus(): void {\r\n    if (props.triggers.indexOf(\"focus\") < 0) return;\r\n    open();\r\n}\r\n\r\nfunction onHover(): void {\r\n    if (props.triggers.indexOf(\"hover\") < 0) return;\r\n    open();\r\n}\r\n\r\nfunction open(): void {\r\n    if (props.disabled) return;\r\n    if (props.delay) {\r\n        timer.value = setTimeout(() => {\r\n            isActive.value = true;\r\n            timer.value = null;\r\n        }, props.delay);\r\n    } else {\r\n        isActive.value = true;\r\n    }\r\n}\r\n\r\nfunction onClose(): void {\r\n    if (cancelOptions.value.indexOf(\"content\") < 0) return;\r\n    isActive.value = !props.closeable;\r\n    if (timer.value && props.closeable) clearTimeout(timer.value);\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"rootClass\", \"o-tip\"],\r\n    [\r\n        \"teleportClass\",\r\n        \"o-tip--teleport\",\r\n        null,\r\n        computed(() => !!props.teleport),\r\n    ],\r\n);\r\n\r\nconst triggerClasses = defineClasses([\"triggerClass\", \"o-tip__trigger\"]);\r\n\r\nconst arrowClasses = defineClasses(\r\n    [\"arrowClass\", \"o-tip__arrow\"],\r\n    [\r\n        \"arrowPositionClass\",\r\n        \"o-tip__arrow--\",\r\n        autoPosition,\r\n        computed(() => !!autoPosition.value),\r\n    ],\r\n    [\r\n        \"variantArrowClass\",\r\n        \"o-tip__arrow--\",\r\n        computed(() => props.variant),\r\n        computed(() => !!props.variant),\r\n    ],\r\n);\r\n\r\nconst contentClasses = defineClasses(\r\n    [\"contentClass\", \"o-tip__content\"],\r\n    [\r\n        \"positionClass\",\r\n        \"o-tip__content--\",\r\n        autoPosition,\r\n        computed(() => !!autoPosition.value),\r\n    ],\r\n    [\r\n        \"variantClass\",\r\n        \"o-tip__content--\",\r\n        computed(() => props.variant),\r\n        computed(() => !!props.variant),\r\n    ],\r\n    [\r\n        \"multilineClass\",\r\n        \"o-tip__content--multiline\",\r\n        null,\r\n        computed(() => props.multiline),\r\n    ],\r\n    [\r\n        \"alwaysClass\",\r\n        \"o-tip__content--always\",\r\n        null,\r\n        computed(() => props.always),\r\n    ],\r\n);\r\n</script>\r\n\r\n<template>\r\n    <div :class=\"rootClasses\" data-oruga=\"tooltip\">\r\n        <PositionWrapper\r\n            v-slot=\"{ setContent }\"\r\n            v-model:position=\"autoPosition\"\r\n            :teleport=\"teleport\"\r\n            :class=\"rootClasses\"\r\n            :trigger=\"triggerRef\"\r\n            default-position=\"top\"\r\n            :disabled=\"!isActive\">\r\n            <transition :name=\"animation\">\r\n                <div\r\n                    v-show=\"isActive || (always && !disabled)\"\r\n                    :ref=\"(el) => (contentRef = setContent(el as HTMLElement))\"\r\n                    :class=\"contentClasses\">\r\n                    <span :class=\"arrowClasses\"></span>\r\n\r\n                    <!--\r\n                        @slot Tooltip content, default is label prop\r\n                    -->\r\n                    <slot name=\"content\">{{ label }}</slot>\r\n                </div>\r\n            </transition>\r\n        </PositionWrapper>\r\n\r\n        <component\r\n            :is=\"triggerTag\"\r\n            ref=\"triggerRef\"\r\n            :class=\"triggerClasses\"\r\n            aria-haspopup=\"true\"\r\n            @click=\"onClick\"\r\n            @contextmenu=\"onContextMenu\"\r\n            @mouseenter=\"onHover\"\r\n            @focus.capture=\"onFocus\"\r\n            @blur.capture=\"onClose\"\r\n            @mouseleave=\"onClose\">\r\n            <!--\r\n                @slot Tooltip trigger slot\r\n                @binding {boolean} active - tooltip active state\r\n            -->\r\n            <slot :active=\"isActive\" />\r\n        </component>\r\n    </div>\r\n</template>\r\n"],"names":[],"mappings":"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"}