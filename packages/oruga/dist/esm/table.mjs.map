{"version":3,"file":"table.mjs","sources":["../../src/components/table/TableMobileSort.vue","../../src/components/table/TableColumn.vue","../../src/components/table/TablePagination.vue","../../src/components/table/Table.vue","../../src/components/table/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { computed, watch, ref, type PropType } from \"vue\";\r\n\r\nimport OButton from \"../button/Button.vue\";\r\nimport OSelect from \"../select/Select.vue\";\r\nimport OIcon from \"../icon/Icon.vue\";\r\nimport OField from \"../field/Field.vue\";\r\n\r\nimport { getValueByPath } from \"@/utils/helpers\";\r\n\r\nimport type { TableColumn } from \"./types\";\r\nimport type { ClassBind } from \"@/types\";\r\n\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OTableMobileSort\",\r\n    configField: \"table\",\r\n});\r\n\r\nconst props = defineProps({\r\n    currentSortColumn: {\r\n        type: Object as PropType<TableColumn>,\r\n        default: undefined,\r\n    },\r\n    columns: {\r\n        type: Array as PropType<TableColumn[]>,\r\n        default: undefined,\r\n    },\r\n    placeholder: { type: String, default: undefined },\r\n    iconPack: { type: String, default: undefined },\r\n    sortIcon: { type: String, default: \"arrow-up\" },\r\n    sortIconSize: { type: String, default: \"small\" },\r\n    isAsc: { type: Boolean, default: false },\r\n    mobileSortClasses: { type: Array as PropType<ClassBind[]>, required: true },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    (e: \"sort\", column: TableColumn, event: Event);\r\n}>();\r\n\r\nconst mobileSort = ref<string>(\r\n    getValueByPath(props.currentSortColumn, \"identifier\"),\r\n);\r\n\r\nconst showPlaceholder = computed(\r\n    () =>\r\n        !props.columns ||\r\n        !props.columns.some(\r\n            (column) =>\r\n                getValueByPath(column, \"identifier\") === mobileSort.value,\r\n        ),\r\n);\r\n\r\nconst sortableColumns = computed(() =>\r\n    props.columns ? props.columns.filter((c) => c.sortable) : [],\r\n);\r\n\r\nconst isCurrentSort = computed(\r\n    () =>\r\n        getValueByPath(props.currentSortColumn, \"identifier\") ===\r\n        mobileSort.value,\r\n);\r\n\r\nwatch(mobileSort, (value) => {\r\n    if (props.currentSortColumn.identifier === value) return;\r\n    sort();\r\n});\r\n\r\nwatch(\r\n    () => props.currentSortColumn,\r\n    (column) => {\r\n        mobileSort.value = getValueByPath(column, \"identifier\");\r\n    },\r\n);\r\n\r\nfunction sort(event?: Event): void {\r\n    const column = sortableColumns.value.filter(\r\n        (c) => getValueByPath(c, \"identifier\") === mobileSort.value,\r\n    )[0];\r\n    emits(\"sort\", column, event);\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div :class=\"mobileSortClasses\">\r\n        <o-field>\r\n            <o-select v-model=\"mobileSort\" expanded>\r\n                <template v-if=\"placeholder\">\r\n                    <option\r\n                        v-show=\"showPlaceholder\"\r\n                        :value=\"{}\"\r\n                        selected\r\n                        disabled\r\n                        hidden>\r\n                        {{ placeholder }}\r\n                    </option>\r\n                </template>\r\n                <option\r\n                    v-for=\"(column, index) in sortableColumns\"\r\n                    :key=\"index\"\r\n                    :value=\"column.identifier\">\r\n                    {{ column.label }}\r\n                </option>\r\n            </o-select>\r\n            <o-button @click=\"sort($event)\">\r\n                <o-icon\r\n                    v-show=\"isCurrentSort\"\r\n                    :icon=\"sortIcon\"\r\n                    :pack=\"iconPack\"\r\n                    :size=\"sortIconSize\"\r\n                    both\r\n                    :rotation=\"!isAsc ? 180 : 0\" />\r\n            </o-button>\r\n        </o-field>\r\n    </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { toRaw, computed, getCurrentInstance, type PropType } from \"vue\";\r\n\r\nimport { useProviderChild } from \"@/composables\";\r\nimport { toCssDimension } from \"@/utils/helpers\";\r\n\r\nimport type { TableColumnComponent } from \"./types\";\r\n\r\n/**\r\n * @displayName Table Column\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OTableColumn\",\r\n    configField: \"table\",\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Define the column label */\r\n    label: { type: String, default: undefined },\r\n    /** Define an object property key if data is an object */\r\n    field: { type: String, default: undefined },\r\n    /** Define a column sub heading  */\r\n    subheading: { type: String, default: undefined },\r\n    /** Add addtional meta information for the column for custom purpose*/\r\n    meta: {\r\n        type: [String, Number, Boolean, Function, Object, Array],\r\n        default: undefined,\r\n    },\r\n    /** Column fixed width */\r\n    width: { type: [Number, String], default: undefined },\r\n    /** Define column value as number */\r\n    numeric: { type: Boolean, default: false },\r\n    /**\r\n     * Position of the column content\r\n     * @values left, centered, right\r\n     */\r\n    position: {\r\n        type: String,\r\n        default: undefined,\r\n        validator: (value: string) =>\r\n            [\"left\", \"centered\", \"right\"].indexOf(value) > -1,\r\n    },\r\n    /** Enable an additional searchbar below the column header */\r\n    searchable: { type: Boolean, default: false },\r\n    /** Enable column sortability */\r\n    sortable: { type: Boolean, default: false },\r\n    /** Define whether the column is visible or not */\r\n    visible: { type: Boolean, default: true },\r\n    /** Define a custom sort function */\r\n    customSort: {\r\n        type: Function as PropType<\r\n            (a: unknown, b: unknown, isAsc: boolean) => number\r\n        >,\r\n        default: undefined,\r\n    },\r\n    /** Define a custom funtion for the filter search */\r\n    customSearch: {\r\n        type: Function as PropType<(row: unknown, filter: string) => boolean>,\r\n        default: undefined,\r\n    },\r\n    /** Whether the column is sticky or not */\r\n    sticky: { type: Boolean, default: false },\r\n    /** Make header selectable */\r\n    headerSelectable: { type: Boolean, default: false },\r\n    /**\r\n     * Adds native attributes to th\r\n     * @deprecated will be moved to table component in v0.9\r\n     */\r\n    thAttrs: {\r\n        type: Function as PropType<(column: typeof props) => object>,\r\n        default: () => ({}),\r\n    },\r\n    /**\r\n     * Adds native attributes to td\r\n     * @deprecated will be moved to table component in v0.9\r\n     */\r\n    tdAttrs: {\r\n        type: Function as PropType<\r\n            (row: unknown, column: typeof props) => object\r\n        >,\r\n        default: () => ({}),\r\n    },\r\n});\r\n\r\nconst style = computed(() => ({\r\n    width: toCssDimension(props.width),\r\n}));\r\n\r\nconst isHeaderUnselectable = computed(\r\n    () => !props.headerSelectable && props.sortable,\r\n);\r\n\r\nconst vm = getCurrentInstance();\r\n\r\nconst providedData = computed<TableColumnComponent>(() => ({\r\n    ...toRaw(props), // TODO: remove toRaw when tdAttrs/thAttrs are moved to table component\r\n    label: props.label,\r\n    field: props.field,\r\n    subheading: props.subheading,\r\n    meta: props.meta,\r\n    width: props.width,\r\n    numeric: props.numeric,\r\n    position: props.position,\r\n    searchable: props.searchable,\r\n    sortable: props.sortable,\r\n    visible: props.visible,\r\n    customSort: props.customSort,\r\n    customSearch: props.customSearch,\r\n    sticky: props.sticky,\r\n    headerSelectable: props.headerSelectable,\r\n    $el: vm.proxy,\r\n    $slots: vm.slots,\r\n    style: style.value,\r\n    isHeaderUnselectable: isHeaderUnselectable.value,\r\n}));\r\n\r\nconst { item } = useProviderChild({ data: providedData });\r\n</script>\r\n\r\n<template>\r\n    <span :data-id=\"item.identifier\" data-oruga=\"table-column\">\r\n        {{ label }}\r\n\r\n        <!--\r\n            Do not render these slots here.\r\n            These are only for documentation purposes.\r\n            Slots are defined in table component.\r\n        -->\r\n        <template v-if=\"false\">\r\n            <!--\r\n                @slot Default Slot\r\n                @binding {unknown} row - row data \r\n                @binding {Column} column - column definition \r\n                @binding {number} index - row index \r\n                @binding {number} colindex - column index \r\n                @binding {(row): void} toggle-details - toggle details function \r\n            -->\r\n            <slot\r\n                :row=\"null\"\r\n                :column=\"null\"\r\n                :index=\"null\"\r\n                :colindex=\"null\"\r\n                :toggle-details=\"null\" />\r\n            <!--\r\n                @slot Override header label \r\n                @binding {Column} column - column definition \r\n                @binding {number} index - column index \r\n            -->\r\n            <slot name=\"header\" :column=\"null\" :index=\"null\" />\r\n            <!--\r\n                @slot Override subheading label \r\n                @binding {Column} column - column definition \r\n                @binding {number} index - column index \r\n            -->\r\n            <slot name=\"subheading\" :column=\"null\" :index=\"null\" />\r\n\r\n            <!--\r\n                @slot Override searchable input \r\n                @binding {Column} column - column definition \r\n                @binding {number} index - column index \r\n                @binding {Record<string,string>} filters - active filters object\r\n            -->\r\n            <slot\r\n                name=\"searchable\"\r\n                :column=\"null\"\r\n                :index=\"null\"\r\n                :filters=\"null\" />\r\n        </template>\r\n    </span>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport type { PropType } from \"vue\";\r\n\r\nimport OPagination from \"../pagination/Pagination.vue\";\r\n\r\nimport { usePropBinding } from \"@/composables\";\r\n\r\nimport type { ComponentClass } from \"@/types\";\r\n\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OTablePagination\",\r\n    configField: \"table\",\r\n});\r\n\r\nconst props = defineProps({\r\n    current: { type: Number, default: undefined },\r\n    paginated: { type: Boolean, default: false },\r\n    rootClass: {\r\n        type: [String, Array, Object] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * current prop two-way binding\r\n     * @param value {number} updated current prop\r\n     */\r\n    (e: \"update:current\", value: number): void;\r\n    /**\r\n     * on current change event\r\n     * @param value {number} current value\r\n     */\r\n    (e: \"change\", event: number): void;\r\n}>();\r\n\r\nconst currentPage = usePropBinding(\"current\", props, emits);\r\n\r\n/** Paginator change listener. */\r\nfunction pageChanged(page: number): void {\r\n    const newPage = page > 0 ? page : 1;\r\n    currentPage.value = newPage;\r\n    emits(\"change\", newPage);\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div :class=\"rootClass\">\r\n        <div>\r\n            <slot />\r\n        </div>\r\n        <div>\r\n            <o-pagination\r\n                v-if=\"paginated\"\r\n                v-bind=\"$attrs\"\r\n                :current=\"currentPage\"\r\n                @change=\"pageChanged\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport {\r\n    computed,\r\n    ref,\r\n    watch,\r\n    onMounted,\r\n    nextTick,\r\n    useSlots,\r\n    toValue,\r\n    type PropType,\r\n} from \"vue\";\r\n\r\nimport OCheckbox from \"../checkbox/Checkbox.vue\";\r\nimport OIcon from \"../icon/Icon.vue\";\r\nimport OInput from \"../input/Input.vue\";\r\nimport OLoading from \"../loading/Loading.vue\";\r\nimport OSlotComponent from \"../utils/SlotComponent\";\r\n\r\nimport OTableMobileSort from \"./TableMobileSort.vue\";\r\nimport OTableColumn from \"./TableColumn.vue\";\r\nimport OTablePagination from \"./TablePagination.vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport {\r\n    getValueByPath,\r\n    indexOf,\r\n    toCssDimension,\r\n    escapeRegExpChars,\r\n    removeDiacriticsFromString,\r\n    uuid,\r\n} from \"@/utils/helpers\";\r\nimport {\r\n    defineClasses,\r\n    useProviderParent,\r\n    usePropBinding,\r\n    useMatchMedia,\r\n    useDebounce,\r\n    getActiveClasses,\r\n} from \"@/composables\";\r\n\r\nimport type { Column, TableColumn, TableColumnComponent } from \"./types\";\r\nimport type { ComponentClass, ClassBind } from \"@/types\";\r\n\r\n/**\r\n * Tabulated data are sometimes needed, it's even better when it's responsive\r\n * @displayName Table\r\n * @requires ./TableColumn.vue\r\n * @style _table.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OTable\",\r\n    configField: \"table\",\r\n    inheritAttrs: false,\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** Table data */\r\n    data: { type: Array as PropType<unknown[]>, default: () => [] },\r\n    /** Table columns */\r\n    columns: { type: Array as PropType<Column[]>, default: () => [] },\r\n    /** Border to all cells */\r\n    bordered: {\r\n        type: Boolean,\r\n        default: () => getOption(\"table.bordered\", false),\r\n    },\r\n    /** Whether table is striped */\r\n    striped: {\r\n        type: Boolean,\r\n        default: () => getOption(\"table.striped\", false),\r\n    },\r\n    /** Makes the cells narrower */\r\n    narrowed: {\r\n        type: Boolean,\r\n        default: () => getOption(\"table.narrowed\", false),\r\n    },\r\n    /** Rows are highlighted when hovering */\r\n    hoverable: {\r\n        type: Boolean,\r\n        default: () => getOption(\"table.hoverable\", false),\r\n    },\r\n    /** Enable loading state */\r\n    loading: { type: Boolean, default: false },\r\n    /** Allow row details  */\r\n    detailed: { type: Boolean, default: false },\r\n    /** Rows can be checked (multiple) */\r\n    checkable: { type: Boolean, default: false },\r\n    /** Show check/uncheck all checkbox in table header when checkable */\r\n    headerCheckable: { type: Boolean, default: true },\r\n    /**\r\n     * Position of the checkbox when checkable\r\n     * @values left, right\r\n     */\r\n    checkboxPosition: {\r\n        type: String,\r\n        default: () => getOption(\"table.checkboxPosition\", \"left\"),\r\n        validator: (value: string) => [\"left\", \"right\"].indexOf(value) >= 0,\r\n    },\r\n    /**\r\n     * Color of the checkbox when checkable\r\n     * @values primary, info, success, warning, danger, and any other custom color\r\n     */\r\n    checkboxVariant: {\r\n        type: String,\r\n        default: () => getOption(\"table.checkboxVariant\"),\r\n    },\r\n    /** Set which row is selected, use v-model:selected to make it two-way binding */\r\n    selected: { type: Object, default: undefined },\r\n    /** Custom method to verify if a row is selectable, works when is selected. */\r\n    isRowSelectable: { type: Function, default: () => true },\r\n    /** Table can be focused and user can navigate with keyboard arrows (require selected) and rows are highlighted when hovering */\r\n    focusable: { type: Boolean, default: false },\r\n    /** Custom method to verify if row is checked, works when is checkable. Useful for backend pagination */\r\n    customIsChecked: {\r\n        type: Function as PropType<(row: unknown, data: unknown[]) => boolean>,\r\n        default: undefined,\r\n    },\r\n    /** Custom method to verify if a row is checkable, works when is checkable */\r\n    isRowCheckable: {\r\n        type: Function as PropType<(row: unknown) => boolean>,\r\n        default: (row: unknown) =>\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            getOption(\"table.isRowCheckable\", (row) => true)(row),\r\n    },\r\n    /** Set which rows are checked, use v-model:checkedRows to make it two-way binding */\r\n    checkedRows: { type: Array, default: () => [] },\r\n    /** Rows appears as cards on mobile (collapse rows) */\r\n    mobileCards: {\r\n        type: Boolean,\r\n        default: () => getOption(\"table.mobileCards\", true),\r\n    },\r\n    /** Sets the default sort column and order — e.g. ['first_name', 'desc'] */\r\n    defaultSort: {\r\n        type: [String, Array] as PropType<string | string[]>,\r\n        default: () => getOption(\"table.defaultSort\"),\r\n    },\r\n    /**\r\n     * Sets the default sort column direction on the first click\r\n     * @values asc, desc\r\n     */\r\n    defaultSortDirection: {\r\n        type: String,\r\n        default: () => getOption(\"table.defaultSortDirection\", \"asc\"),\r\n    },\r\n    /** Sets the header sorting icon */\r\n    sortIcon: {\r\n        type: String,\r\n        default: () => getOption(\"table.sortIcon\", \"arrow-up\"),\r\n    },\r\n    /**\r\n     * Sets the size of the sorting icon\r\n     * @values small, medium, large\r\n     */\r\n    sortIconSize: {\r\n        type: String,\r\n        default: () => getOption(\"table.sortIconSize\", \"small\"),\r\n    },\r\n    /**\r\n     * Icon pack to use\r\n     * @values mdi, fa, fas and any other custom icon pack\r\n     */\r\n    iconPack: {\r\n        type: String,\r\n        default: () => getOption(\"table.iconPack\"),\r\n    },\r\n    /** Columns won't be sorted with Javascript, use with sort event to sort in your backend */\r\n    backendSorting: {\r\n        type: Boolean,\r\n        default: () => getOption(\"table.backendSorting\", false),\r\n    },\r\n    /** Columns won't be filtered with Javascript, use with searchable prop to the columns to filter in your backend */\r\n    backendFiltering: {\r\n        type: Boolean,\r\n        default: () => getOption(\"table.backendFiltering\", false),\r\n    },\r\n    /** Add a class to row based on the return */\r\n    rowClass: {\r\n        type: Function as PropType<(row: unknown, index: number) => string>,\r\n        default: (row: unknown, index: number) =>\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            getOption(\"table.rowClass\", (row, index) => \"\")(row, index),\r\n    },\r\n    /** Allow pre-defined opened details. Ideal to open details via vue-router. (A unique key is required; check detail-key prop) */\r\n    openedDetailed: { type: Array, default: () => [] },\r\n    /** Controls the visibility of the trigger that toggles the detailed rows. */\r\n    hasDetailedVisible: {\r\n        type: Function as PropType<(row: unknown) => boolean>,\r\n        default: (row: unknown) =>\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            getOption(\"table.hasDetailedVisible\", (row) => true)(row),\r\n    },\r\n    /** Use a unique key of your data Object when use detailed or opened detailed. (id recommended) */\r\n    detailKey: {\r\n        type: String,\r\n        default: () => getOption(\"table.detailKey\"),\r\n    },\r\n    /** Allow chevron icon and column to be visible */\r\n    showDetailIcon: {\r\n        type: Boolean,\r\n        default: () => getOption(\"table.showDetailIcon\", true),\r\n    },\r\n    /** Icon name of detail action */\r\n    detailIcon: {\r\n        type: String,\r\n        default: () => getOption(\"table.detailIcon\", \"chevron-right\"),\r\n    },\r\n    /** Custom style on details */\r\n    customDetailRow: { type: Boolean, default: false },\r\n    /* Transition name to use when toggling row details. */\r\n    detailTransition: {\r\n        type: String,\r\n        default: () => getOption(\"table.detailTransition\", \"slide\"),\r\n    },\r\n    /** Text when nothing is selected */\r\n    mobileSortPlaceholder: {\r\n        type: String,\r\n        default: () => getOption(\"table.mobileSortPlaceholder\"),\r\n    },\r\n    /** Use a unique key of your data Object for each row. Useful if your data prop has dynamic indices. (id recommended) */\r\n    customRowKey: {\r\n        type: String,\r\n        default: () => getOption(\"table.customRowKey\"),\r\n    },\r\n    /** Allows rows to be draggable */\r\n    draggable: { type: Boolean, default: false },\r\n    /** Allows columns to be draggable */\r\n    draggableColumn: { type: Boolean, default: false },\r\n    /** Add a horizontal scrollbar when table is too wide */\r\n    scrollable: { type: Boolean, default: undefined },\r\n    /** Show a sticky table header */\r\n    stickyHeader: { type: Boolean, default: false },\r\n    /** Table fixed height */\r\n    height: { type: [Number, String], default: undefined },\r\n    /** Add a native event to filter */\r\n    filtersEvent: { type: String, default: \"\" },\r\n    /** Filtering debounce time (in milliseconds) */\r\n    debounceSearch: { type: Number, default: undefined },\r\n    /** Show header */\r\n    showHeader: {\r\n        type: Boolean,\r\n        default: () => getOption(\"table.showHeader\", true),\r\n    },\r\n    /** Make the checkbox column sticky when checkable */\r\n    stickyCheckbox: { type: Boolean, default: false },\r\n    /** Adds pagination to the table */\r\n    paginated: {\r\n        type: Boolean,\r\n        default: () => getOption(\"table.paginated\", false),\r\n    },\r\n    /** Rows won't be paginated with Javascript, use with page-change event to paginate in your backend */\r\n    backendPagination: { type: Boolean, default: false },\r\n    /** Total number of table data if backend-pagination is enabled */\r\n    total: { type: Number, default: 0 },\r\n    /** Current page of table data (if paginated), use v-model:currentPage to make it two-way binding */\r\n    currentPage: { type: Number, default: 1 },\r\n    /** How many rows per page (if paginated) */\r\n    perPage: {\r\n        type: [Number, String],\r\n        default: () => getOption(\"table.perPage\", 20),\r\n    },\r\n    /**\r\n     * Pagination position (if paginated)\r\n     * @values bottom, top, both\r\n     */\r\n    paginationPosition: {\r\n        type: String,\r\n        default: () => getOption(\"table.paginationPosition\", \"bottom\"),\r\n        validator: (value: string) =>\r\n            [\"bottom\", \"top\", \"both\"].indexOf(value) >= 0,\r\n    },\r\n    /** Rounded pagination if paginated */\r\n    paginationRounded: {\r\n        type: Boolean,\r\n        default: () => getOption(\"table.paginationRounded\", false),\r\n    },\r\n    /** Size of pagination if paginated */\r\n    paginationSize: {\r\n        type: String,\r\n        default: () => getOption(\"table.paginationSize\", \"small\"),\r\n    },\r\n    /** Enable simple style pagination if paginated */\r\n    paginationSimple: {\r\n        type: Boolean,\r\n        default: () => getOption(\"table.paginationSimple\", false),\r\n    },\r\n    /**\r\n     * Pagination buttons order if paginated\r\n     * @values centered, right, left\r\n     */\r\n    paginationOrder: {\r\n        type: String,\r\n        default: () => getOption(\"table.paginationOrder\"),\r\n        validator: (value: string) =>\r\n            [\"centered\", \"right\", \"left\"].indexOf(value) >= 0,\r\n    },\r\n    /** Mobile breakpoint as max-width value */\r\n    mobileBreakpoint: {\r\n        type: String,\r\n        default: () => getOption(\"table.mobileBreakpoint\"),\r\n    },\r\n    /** Accessibility label for the pagination next page button. */\r\n    ariaNextLabel: {\r\n        type: String,\r\n        default: () => getOption(\"table.ariaNextLabel\"),\r\n    },\r\n    /** Accessibility label for the pagination previous page button. */\r\n    ariaPreviousLabel: {\r\n        type: String,\r\n        default: () => getOption(\"table.ariaPreviousLabel\"),\r\n    },\r\n    /** Accessibility label for the pagination page button. */\r\n    ariaPageLabel: {\r\n        type: String,\r\n        default: () => getOption(\"table.ariaPageLabel\"),\r\n    },\r\n    /** Accessibility label for the pagination current page button. */\r\n    ariaCurrentLabel: {\r\n        type: String,\r\n        default: () => getOption(\"table.ariaCurrentLabel\"),\r\n    },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table */\r\n    tableClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table wrapper */\r\n    wrapperClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table footer */\r\n    footerClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table when it is empty */\r\n    emptyClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table row detail */\r\n    detailedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table when is bordered */\r\n    borderedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table when rows are striped */\r\n    stripedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table when rows are narrowed */\r\n    narrowedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table when is hoverable */\r\n    hoverableClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table wrapper when header is sticky */\r\n    stickyHeaderClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table wrapper when its content is scrollable */\r\n    scrollableClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table row when selected */\r\n    trSelectedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table row when checkable and checked */\r\n    trCheckedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table `th` element */\r\n    thClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table `th` element when component is positioned */\r\n    thPositionClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table `th` element when component is sticky\" */\r\n    thStickyClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table `th` element when is checkable */\r\n    thCheckboxClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table `th` element currently sorted */\r\n    thCurrentSortClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the sortable Table `th` element */\r\n    thSortableClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table `th` element that is unsortable */\r\n    thUnselectableClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table sort icon in the header */\r\n    thSortIconClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table `th` element of the detail column of triggers */\r\n    thDetailedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table `th` subheading element */\r\n    thSubheadingClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table `td` element */\r\n    tdClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table `td` element when component is positioned */\r\n    tdPositionClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table `td` element when component is sticky */\r\n    tdStickyClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table `td` element when is checkable */\r\n    tdCheckboxClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table `td` element that contains the chevron to trigger details */\r\n    tdDetailedChevronClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the sortable form wrapper on mobile */\r\n    mobileSortClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table pagination wrapper */\r\n    paginationWrapperClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Table component when on mobile */\r\n    mobileClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * currentPage prop two-way binding\r\n     * @param value {number} updated currentPage prop\r\n     */\r\n    (e: \"update:currentPage\", value: number): void;\r\n    /**\r\n     * on pagination page change event\r\n     * @param page {number} updated page\r\n     */\r\n    (e: \"page-change\", page: number): void;\r\n    /**\r\n     * select prop two-way binding\r\n     * @param value {typeof data} updated select prop\r\n     */\r\n    (e: \"update:selected\", value: unknown): void;\r\n    /**\r\n     * on row select event\r\n     * @param newRow {typeof data} new select value\r\n     * @param oldRow {typeof data} old select value\r\n     */\r\n    (e: \"select\", newrow: unknown, oldrow: unknown): void;\r\n    /**\r\n     * on row checked event\r\n     * @param value {Array<typeof data>} all checked rows\r\n     * @param row {typeof data} row data\r\n     */\r\n    (e: \"check\", value: Array<unknown>, row?: unknown): void;\r\n    /**\r\n     * on all rows checked event\r\n     * @param value {Array<typeof data>} all checked rows\r\n     */\r\n    (e: \"check-all\", value: Array<unknown>): void;\r\n    /**\r\n     * checkedRows prop two-way binding\r\n     * @param value {Array<typeof data>} updated checkedRows prop\r\n     */\r\n    (e: \"update:checkedRows\", value: Array<unknown>): void;\r\n    /**\r\n     * on column sort change event\r\n     * @param column {Column} column data\r\n     * @param direction {string}  'asc' or 'desc'\r\n     *\r\n     * @param event {Event} native  event\r\n     */\r\n    (e: \"sort\", column: Column, direction: \"asc\" | \"desc\", event: Event): void;\r\n    /**\r\n     * on filter change event\r\n     * @param filters {Record<string, string>} filter object\r\n     */\r\n    (e: \"filters-change\", value: Record<string, string>): void;\r\n    /**\r\n     * on natvie filter event based on props filtersEvent\r\n     * @param filtersEvent {string} props filtersEvent value\r\n     * @param filters {Record<string, string>} filter object\r\n     * @param event {Event} native  event\r\n     */\r\n    (\r\n        e: \"filters-event\",\r\n        filtersEvent: string,\r\n        filters: Record<string, string>,\r\n        event: Event,\r\n    ): void;\r\n    /**\r\n     * openedDetailed prop two-way binding\r\n     * @param value {Array<typeof data>} updated openedDetailed prop\r\n     */\r\n    (e: \"update:openedDetailed\", value: Array<unknown>): void;\r\n    /**\r\n     * on details open event\r\n     * @param row {typeof data} row data\r\n     */\r\n    (e: \"details-open\", row: unknown): void;\r\n    /**\r\n     * on details close event\r\n     * @param row {typeof data} row data\r\n     */\r\n    (e: \"details-close\", row: unknown): void;\r\n    /**\r\n     * on row click event\r\n     * @param row {typeof data} row data\r\n     * @param index {number} index of clicked row\r\n     * @param event {Event} native click event\r\n     */\r\n    (e: \"click\", row: unknown, index: number, event: Event): void;\r\n    /**\r\n     * on row double click event\r\n     * @param row {typeof data} row data\r\n     * @param index {number} index of clicked row\r\n     * @param event {Event} native click event\r\n     */\r\n    (e: \"dblclick\", row: unknown, index: number, event: Event): void;\r\n    /**\r\n     * on row right click event\r\n     * @param row {typeof data} row data\r\n     * @param index {number} index of clicked row\r\n     * @param event {Event} native contextmenu event\r\n     */\r\n    (e: \"contextmenu\", row: unknown, index: number, event: Event): void;\r\n    /**\r\n     * on row mouseenter event\r\n     * @param row {typeof data} row data\r\n     * @param index {number} index of clicked row\r\n     * @param event {Event} native mouseenter event\r\n     */\r\n    (e: \"mouseenter\", row: unknown, index: number, event: Event): void;\r\n    /**\r\n     * on row mouseleave event\r\n     * @param row {typeof data} row data\r\n     * @param index {number} index of clicked row\r\n     * @param event {Event} native mouseleave event\r\n     */\r\n    (e: \"mouseleave\", row: unknown, index: number, event: Event): void;\r\n    /**\r\n     * on cell click event\r\n     * @param row {typeof data} row data\r\n     * @param column {Column} column data\r\n     * @param index {number} row index\r\n     * @param colindex {number} column index\r\n     * @param event {Event} native click event\r\n     */\r\n    (\r\n        e: \"cell-click\",\r\n        row: unknown,\r\n        column: Column,\r\n        index: number,\r\n        colindex: number,\r\n        event: Event,\r\n    ): void;\r\n    /**\r\n     * on row dragstart event\r\n     * @param row {typeof data} row data\r\n     * @param index {number} index of draged row\r\n     * @param event {DragEvent} native dragstart event\r\n     */\r\n    (e: \"dragstart\", row: unknown, index: number, event: DragEvent): void;\r\n    /**\r\n     * on row dragend event\r\n     * @param row {typeof data} row data\r\n     * @param index {number} index of draged row\r\n     * @param event {DragEvent} native dragend event\r\n     */\r\n    (e: \"dragend\", row: unknown, index: number, event: DragEvent): void;\r\n    /**\r\n     * on row drop event\r\n     * @param row {typeof data} row data\r\n     * @param index {number} index of draged row\r\n     * @param event {DragEvent} native drop event\r\n     */\r\n    (e: \"drop\", row: unknown, index: number, event: DragEvent): void;\r\n\r\n    /**\r\n     * on row dragleave event\r\n     * @param row {typeof data} row data\r\n     * @param index {number} index of draged row\r\n     * @param event {DragEvent} native dragleave event\r\n     */\r\n    (e: \"dragleave\", row: unknown, index: number, event: DragEvent): void;\r\n    /**\r\n     * on row dragover event\r\n     * @param row {typeof data} row data\r\n     * @param index {number} index of draged row\r\n     * @param event {DragEvent} native dragover event\r\n     */\r\n    (e: \"dragover\", row: unknown, index: number, event: DragEvent): void;\r\n    /**\r\n     * on column columndragstart event\r\n     * @param column {Column} column data\r\n     * @param index {number} index of draged column\r\n     * @param event {DragEvent} native columndragstart event\r\n     */\r\n    (\r\n        e: \"columndragstart\",\r\n        column: Column,\r\n        index: number,\r\n        event: DragEvent,\r\n    ): void;\r\n    /**\r\n     * on column columndragend event\r\n     * @param column {Column} column data\r\n     * @param index {number} index of draged column\r\n     * @param event {DragEvent} native columndragend event\r\n     */\r\n    (e: \"columndragend\", column: Column, index: number, event: DragEvent): void;\r\n    /**\r\n     * on column columndrop event\r\n     * @param column {Column} column data\r\n     * @param index {number} index of draged column\r\n     * @param event {DragEvent} native columndrop event\r\n     */\r\n    (e: \"columndrop\", column: Column, index: number, event: DragEvent): void;\r\n    /**\r\n     * on column columndragleave event\r\n     * @param column {Column} column data\r\n     * @param index {number} index of draged column\r\n     * @param event {DragEvent} native columndragleave event\r\n     */\r\n    (\r\n        e: \"columndragleave\",\r\n        column: Column,\r\n        index: number,\r\n        event: DragEvent,\r\n    ): void;\r\n    /**\r\n     * on column columndragover event\r\n     * @param column {Column} column data\r\n     * @param index {number} index of draged column\r\n     * @param event {DragEvent} native columndragover event\r\n     */\r\n    (\r\n        e: \"columndragover\",\r\n        column: Column,\r\n        index: number,\r\n        event: DragEvent,\r\n    ): void;\r\n}>();\r\n\r\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\r\n\r\nconst isMobileActive = computed(() => props.mobileCards && isMobile.value);\r\n\r\nconst rootRef = ref<HTMLElement>();\r\nconst slotRef = ref<HTMLElement>();\r\n\r\n/** Provide functionalities and data to child item components */\r\nconst provider = useProviderParent<TableColumnComponent>(slotRef);\r\n\r\nconst tableColumns = computed<TableColumn[]>(() =>\r\n    provider.sortedItems.value.map((column) => ({\r\n        index: column.index,\r\n        identifier: column.identifier,\r\n        ...toValue(column.data),\r\n        thAttrsData: {},\r\n        tdAttrsData: [],\r\n    })),\r\n);\r\n\r\nconst tableData = computed(() => {\r\n    if (!props.data?.length) return [...props.data];\r\n    // if no customRowKey is given and data are objects, create unique row id for each row\r\n    return props.data.map((row) =>\r\n        !props.customRowKey && typeof row === \"object\"\r\n            ? Object.assign({ __rowKey: uuid() }, row)\r\n            : row,\r\n    );\r\n});\r\n\r\nconst tableRows = ref(tableData.value);\r\nconst dataTotal = ref(\r\n    props.backendPagination ? props.total : tableData.value.length,\r\n);\r\n\r\nconst tableCurrentPage = usePropBinding<number>(\"currentPage\", props, emits, {\r\n    passive: true,\r\n});\r\n\r\n/**\r\n * When table rows data change:\r\n *   1. Update internal value.\r\n *   2. Filter data if it's not backend-filtered.\r\n *   3. Sort again if it's not backend-sorted.\r\n *   4. Set new total if it's not backend-paginated.\r\n */\r\nwatch(\r\n    () => tableData.value,\r\n    (value) => {\r\n        // if not backend filtered, filter rows\r\n        if (!props.backendFiltering)\r\n            tableRows.value = value.filter((row) => isRowFiltered(row));\r\n        else tableRows.value = [...value];\r\n        // if not backend sorted, sort rows\r\n        if (!props.backendSorting) sort(currentSortColumn.value, true);\r\n        // if not backend paginated, set pagination total\r\n        if (!props.backendPagination) dataTotal.value = tableRows.value.length;\r\n    },\r\n    { deep: true },\r\n);\r\n\r\n/**\r\n * When Pagination total change, update internal total\r\n * only if it's backend-paginated.\r\n */\r\nwatch(\r\n    () => props.total,\r\n    (newTotal) => {\r\n        if (!props.backendPagination) return;\r\n        dataTotal.value = newTotal;\r\n    },\r\n);\r\n\r\nconst tableWrapperStyle = computed(() => ({\r\n    height: toCssDimension(props.height),\r\n}));\r\n\r\n/** Splitted data based on the pagination. */\r\nconst visibleRows = computed(() => {\r\n    if (!props.paginated) return tableRows.value;\r\n\r\n    const currentPage = tableCurrentPage.value;\r\n    const perPage = Number(props.perPage);\r\n\r\n    if (tableRows.value.length <= perPage) {\r\n        return tableRows.value;\r\n    } else {\r\n        const start = (currentPage - 1) * perPage;\r\n        const end = start + perPage;\r\n        return tableRows.value.slice(start, end);\r\n    }\r\n});\r\n\r\nconst visibleColumns = computed(() => {\r\n    if (!tableColumns.value) return [];\r\n    return tableColumns.value.filter(\r\n        (column) => column.visible || column.visible === undefined,\r\n    );\r\n});\r\n\r\n/** process thAttrs & tdAttrs when row or columns got changed */\r\nwatch([visibleRows, visibleColumns], () => {\r\n    if (visibleColumns.value.length && visibleRows.value.length) {\r\n        for (let i = 0; i < visibleColumns.value.length; i++) {\r\n            const col = visibleColumns.value[i];\r\n            col.thAttrsData =\r\n                typeof col.thAttrs === \"function\" ? col.thAttrs(col) : {};\r\n            col.tdAttrsData = visibleRows.value.map((data) =>\r\n                typeof col.tdAttrs === \"function\" ? col.tdAttrs(data, col) : {},\r\n            );\r\n        }\r\n    }\r\n});\r\n\r\n/** Return total column count based if it's checkable or expanded */\r\nconst columnCount = computed(() => {\r\n    let count = visibleColumns.value.length;\r\n    count += props.checkable ? 1 : 0;\r\n    count += props.detailed && props.showDetailIcon ? 1 : 0;\r\n    return count;\r\n});\r\n\r\n/** Check if has any searchable column. */\r\nconst hasSearchablenewColumns = computed(() =>\r\n    tableColumns.value.some((column) => column.searchable),\r\n);\r\n\r\n/** return if scrollable table */\r\nconst isScrollable = computed(() => {\r\n    if (props.scrollable) return true;\r\n    if (!tableColumns.value) return false;\r\n    return tableColumns.value.some((column) => column.sticky);\r\n});\r\n\r\nconst slots = useSlots();\r\n\r\nconst hasCustomSubheadings = computed(() => {\r\n    if (slots.subheading) return true;\r\n    return tableColumns.value.some((column) => !!column.subheading);\r\n});\r\n\r\n/** Check if footer slot has custom content. */\r\nfunction hasCustomFooterSlot(): boolean {\r\n    if (slots.footer) {\r\n        // [Vue warn]: Slot \"footer\" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.\r\n        const footer = slots.footer();\r\n        if (footer.length > 1) return true;\r\n\r\n        const tag = footer[0][\"tag\"];\r\n        if (tag !== \"th\" && tag !== \"td\") return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/** Table arrow keys listener, change selection. */\r\nfunction onArrowPressed(pos: number, event: KeyboardEvent): void {\r\n    if (!visibleRows.value.length) return;\r\n\r\n    let index = visibleRows.value.indexOf(props.selected) + pos;\r\n\r\n    // Prevent from going up from first and down from last\r\n    index =\r\n        index < 0\r\n            ? 0\r\n            : index > visibleRows.value.length - 1\r\n              ? visibleRows.value.length - 1\r\n              : index;\r\n\r\n    const row = visibleRows.value[index];\r\n\r\n    if (!props.isRowSelectable(row)) {\r\n        let newIndex = null;\r\n        if (pos > 0) {\r\n            for (\r\n                let i = index;\r\n                i < visibleRows.value.length && newIndex === null;\r\n                i++\r\n            ) {\r\n                if (props.isRowSelectable(visibleRows.value[i])) newIndex = i;\r\n            }\r\n        } else {\r\n            for (let i = index; i >= 0 && newIndex === null; i--) {\r\n                if (props.isRowSelectable(visibleRows.value[i])) newIndex = i;\r\n            }\r\n        }\r\n        if (newIndex >= 0) {\r\n            selectRow(visibleRows.value[newIndex], index, event);\r\n        }\r\n    } else {\r\n        selectRow(row, index, event);\r\n    }\r\n}\r\n\r\n/**\r\n * Row click listener.\r\n * Emit all necessary events.\r\n */\r\nfunction selectRow(row: unknown, index: number, event: Event): void {\r\n    emits(\"click\", row, index, event);\r\n\r\n    if (props.selected === row) return;\r\n    if (!props.isRowSelectable(row)) return;\r\n\r\n    // emit new and old row\r\n    emits(\"select\", row, props.selected);\r\n\r\n    // emit new row to update user variable\r\n    emits(\"update:selected\", row);\r\n}\r\n\r\nfunction isRowSelected(row: unknown, selectedRow: unknown): boolean {\r\n    return selectedRow ? getRowKey(row) === getRowKey(selectedRow) : false;\r\n}\r\n\r\nfunction getRowKey(row: unknown): unknown {\r\n    if (props.customRowKey) return row[props.customRowKey];\r\n    if (typeof row === \"object\") return row[\"__rowKey\"];\r\n    return row;\r\n}\r\n\r\n// --- Filter Feature ---\r\n\r\nconst filters = ref<Record<string, string>>({});\r\n\r\nwatch(\r\n    filters.value,\r\n    (value) => {\r\n        if (props.debounceSearch)\r\n            useDebounce(() => handleFiltersChange(value), props.debounceSearch);\r\n        else handleFiltersChange(value);\r\n    },\r\n    { deep: true },\r\n);\r\n\r\nfunction onFiltersEvent(event: Event): void {\r\n    emits(\"filters-event\", props.filtersEvent, filters.value, event);\r\n}\r\n\r\nfunction handleFiltersChange(value: Record<string, string>): void {\r\n    if (props.backendFiltering) {\r\n        emits(\"filters-change\", value);\r\n    } else {\r\n        tableRows.value = props.data.filter((row) => isRowFiltered(row));\r\n        if (!props.backendPagination) {\r\n            dataTotal.value = tableRows.value.length;\r\n        }\r\n        if (!props.backendSorting) {\r\n            if (Object.keys(currentSortColumn.value).length > 0) {\r\n                doSortSingleColumn(currentSortColumn.value);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction isRowFiltered(row: unknown): boolean {\r\n    for (const key in filters.value) {\r\n        if (!filters.value[key]) continue;\r\n        const input = filters.value[key];\r\n        const column = tableColumns.value.filter((c) => c.field === key)[0];\r\n        if (typeof column?.customSearch === \"function\") {\r\n            if (!column.customSearch(row, input)) return false;\r\n        } else {\r\n            const value = getValueByPath(row, key);\r\n            if (value == null) return false;\r\n            if (Number.isInteger(value)) {\r\n                if (value !== Number(input)) return false;\r\n            } else {\r\n                const re = new RegExp(escapeRegExpChars(input), \"i\");\r\n                if (Array.isArray(value)) {\r\n                    const valid = value.some(\r\n                        (val) =>\r\n                            re.test(removeDiacriticsFromString(val)) ||\r\n                            re.test(val),\r\n                    );\r\n                    if (!valid) return false;\r\n                } else {\r\n                    if (\r\n                        !re.test(removeDiacriticsFromString(value)) &&\r\n                        !re.test(value)\r\n                    ) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n// --- Sort Feature ---\r\n\r\nconst currentSortColumn = ref<TableColumn>();\r\nconst isAsc = ref(true);\r\n\r\nonMounted(() => nextTick(() => checkSort()));\r\n\r\n/** Check if has any sortable column. */\r\nconst hasSortablenewColumns = computed(() =>\r\n    tableColumns.value.some((column) => column.sortable),\r\n);\r\n\r\n/** Check if the column is the current sort column. */\r\nfunction isColumnSorted(column: TableColumn): boolean {\r\n    return currentSortColumn.value?.identifier === column.identifier;\r\n}\r\n\r\n/** Call initSort only first time (For example async data). */\r\nfunction checkSort(): void {\r\n    if (tableColumns.value.length && !currentSortColumn.value) {\r\n        // is first time sort\r\n        initSort();\r\n    } else if (tableColumns.value.length) {\r\n        if (\r\n            currentSortColumn.value &&\r\n            Object.keys(currentSortColumn.value).length > 0\r\n        ) {\r\n            for (let i = 0; i < tableColumns.value.length; i++) {\r\n                if (\r\n                    currentSortColumn.value.field ===\r\n                    tableColumns.value[i].field\r\n                ) {\r\n                    currentSortColumn.value = tableColumns.value[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Initial sorted column based on the default-sort prop. */\r\nfunction initSort(): void {\r\n    if (!props.defaultSort) return;\r\n    let sortField = \"\";\r\n    let sortDirection = props.defaultSortDirection;\r\n    if (Array.isArray(props.defaultSort)) {\r\n        sortField = props.defaultSort[0];\r\n        if (props.defaultSort[1]) {\r\n            sortDirection = props.defaultSort[1];\r\n        }\r\n    } else {\r\n        sortField = props.defaultSort;\r\n    }\r\n    const sortColumn = tableColumns.value.filter(\r\n        (column) => column.field === sortField,\r\n    )[0];\r\n    if (sortColumn) {\r\n        isAsc.value = sortDirection.toLowerCase() !== \"desc\";\r\n        sort(sortColumn, true);\r\n    }\r\n}\r\n\r\n/**\r\n * Sort the column.\r\n * Toggle current direction on column if it's sortable\r\n * and not just updating the prop.\r\n */\r\nfunction sort(\r\n    column: TableColumn,\r\n    updateDirection = false,\r\n    event?: Event,\r\n): void {\r\n    if (!column || !column.sortable) return;\r\n\r\n    if (!updateDirection)\r\n        isAsc.value = isColumnSorted(column)\r\n            ? !isAsc.value\r\n            : props.defaultSortDirection.toLowerCase() !== \"desc\";\r\n\r\n    // if not first time sort\r\n    if (currentSortColumn.value)\r\n        emits(\"sort\", column, isAsc.value ? \"asc\" : \"desc\", event);\r\n\r\n    if (!props.backendSorting) doSortSingleColumn(column);\r\n\r\n    currentSortColumn.value = column;\r\n}\r\n\r\nfunction doSortSingleColumn(column: Column): void {\r\n    tableRows.value = sortBy(\r\n        tableRows.value,\r\n        column.field,\r\n        column.customSort,\r\n        isAsc.value,\r\n    );\r\n}\r\n\r\n/**\r\n * Sort an array by key without mutating original data.\r\n * Call the user sort function if it was passed.\r\n */\r\nfunction sortBy(\r\n    array: unknown[],\r\n    key: string,\r\n    fn: (a: unknown, b: unknown, asc: boolean) => number,\r\n    isAsc: boolean,\r\n): unknown[] {\r\n    let sorted = [];\r\n    // Sorting without mutating original data\r\n    if (fn && typeof fn === \"function\") {\r\n        sorted = [...array].sort((a, b) => fn(a, b, isAsc));\r\n    } else {\r\n        sorted = [...array].sort((a, b) => {\r\n            // Get nested values from objects\r\n            let newA = getValueByPath(a, key);\r\n            let newB = getValueByPath(b, key);\r\n\r\n            // sort boolean type\r\n            if (typeof newA === \"boolean\" && typeof newB === \"boolean\") {\r\n                return isAsc ? (newA > newB ? 1 : -1) : newA > newB ? -1 : 1;\r\n            }\r\n\r\n            if (!newA && newA !== 0) return 1;\r\n            if (!newB && newB !== 0) return -1;\r\n            if (newA === newB) return 0;\r\n\r\n            newA = typeof newA === \"string\" ? newA.toUpperCase() : newA;\r\n            newB = typeof newB === \"string\" ? newB.toUpperCase() : newB;\r\n\r\n            return isAsc ? (newA > newB ? 1 : -1) : newA > newB ? -1 : 1;\r\n        });\r\n    }\r\n\r\n    return sorted;\r\n}\r\n\r\n// --- Checkable Feature ---\r\n\r\nconst newCheckedRows = ref([...props.checkedRows]);\r\nconst lastCheckedRowIndex = ref(null);\r\n\r\n/**\r\n * When checkedRows prop change, update internal value without\r\n * mutating original data.\r\n */\r\nwatch(\r\n    () => props.checkedRows,\r\n    (rows) => {\r\n        newCheckedRows.value = [...rows];\r\n    },\r\n    { deep: true },\r\n);\r\n\r\n/** Check if all rows in the page are checked. */\r\nconst isAllChecked = computed(() => {\r\n    const validVisibleData = visibleRows.value.filter((row) =>\r\n        props.isRowCheckable(row),\r\n    );\r\n    if (validVisibleData.length === 0) return false;\r\n    const isAllChecked = validVisibleData.some(\r\n        (currentVisibleRow) =>\r\n            indexOf(\r\n                newCheckedRows.value,\r\n                currentVisibleRow,\r\n                props.customIsChecked,\r\n            ) < 0,\r\n    );\r\n    return !isAllChecked;\r\n});\r\n\r\n/** Check if all rows in the page are checkable. */\r\nconst isAllUncheckable = computed(() => {\r\n    const validVisibleData = visibleRows.value.filter((row) =>\r\n        props.isRowCheckable(row),\r\n    );\r\n    return validVisibleData.length === 0;\r\n});\r\n\r\n/** Check if the row is checked (is added to the array). */\r\nfunction isRowChecked(row: unknown): boolean {\r\n    return indexOf(newCheckedRows.value, row, props.customIsChecked) >= 0;\r\n}\r\n\r\n/** Remove a checked row from the array. */\r\nfunction removeCheckedRow(row: unknown): void {\r\n    const index = indexOf(newCheckedRows.value, row, props.customIsChecked);\r\n    if (index >= 0) newCheckedRows.value.splice(index, 1);\r\n}\r\n\r\n/**\r\n * Header checkbox click listener.\r\n * Add or remove all rows in current page.\r\n */\r\nfunction checkAll(): void {\r\n    const allChecked = isAllChecked.value;\r\n    visibleRows.value.forEach((currentRow) => {\r\n        if (props.isRowCheckable(currentRow)) removeCheckedRow(currentRow);\r\n\r\n        if (!allChecked) {\r\n            if (props.isRowCheckable(currentRow))\r\n                newCheckedRows.value.push(currentRow);\r\n        }\r\n    });\r\n\r\n    emits(\"check\", newCheckedRows.value);\r\n    emits(\"check-all\", newCheckedRows.value);\r\n\r\n    // Emit checked rows to update user variable\r\n    emits(\"update:checkedRows\", newCheckedRows.value);\r\n}\r\n\r\n/** Row checkbox click listener. */\r\nfunction checkRow(row: unknown, index: number): void {\r\n    if (!props.isRowCheckable(row)) return;\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const lastIndex = lastCheckedRowIndex.value;\r\n    lastCheckedRowIndex.value = index;\r\n\r\n    // if (event.shiftKey && lastIndex !== null && index !== lastIndex) {\r\n    //         shiftCheckRow(row, index, lastIndex);\r\n\r\n    if (!isRowChecked(row)) newCheckedRows.value.push(row);\r\n    else removeCheckedRow(row);\r\n\r\n    emits(\"check\", newCheckedRows.value, row);\r\n\r\n    // Emit checked rows to update user variable\r\n    emits(\"update:checkedRows\", newCheckedRows.value);\r\n}\r\n\r\n/** Check row when shift is pressed. */\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nfunction shiftCheckRow(\r\n    row: unknown,\r\n    index: number,\r\n    lastCheckedRowIndex: number,\r\n): void {\r\n    // Get the subset of the list between the two indicies\r\n    const subset = visibleRows.value.slice(\r\n        Math.min(index, lastCheckedRowIndex),\r\n        Math.max(index, lastCheckedRowIndex) + 1,\r\n    );\r\n\r\n    // Determine the operation based on the state of the clicked checkbox\r\n    const shouldCheck = !isRowChecked(row);\r\n\r\n    subset.forEach((item) => {\r\n        removeCheckedRow(item);\r\n        if (shouldCheck && props.isRowCheckable(item))\r\n            newCheckedRows.value.push(item);\r\n    });\r\n}\r\n\r\n// --- Detail Row Feature ---\r\n\r\nconst visibleDetailRows = ref(props.openedDetailed);\r\n\r\n/**\r\n * return if detailed row tabled\r\n * will be with chevron column & icon or not\r\n */\r\nconst showDetailRowIcon = computed(\r\n    () => props.detailed && props.showDetailIcon,\r\n);\r\n\r\n/**\r\n * When the user wants to control the detailed rows via props.\r\n * Or wants to open the details of certain row with the router for example.\r\n */\r\nwatch(\r\n    () => props.openedDetailed,\r\n    (expandedRows) => {\r\n        visibleDetailRows.value = expandedRows;\r\n    },\r\n);\r\n\r\n/** Toggle to show/hide details slot */\r\nfunction toggleDetails(row: unknown): void {\r\n    const found = isVisibleDetailRow(row);\r\n\r\n    if (found) {\r\n        closeDetailRow(row);\r\n        emits(\"details-close\", row);\r\n    } else {\r\n        openDetailRow(row);\r\n        emits(\"details-open\", row);\r\n    }\r\n\r\n    // Syncs the detailed rows with the parent component\r\n    emits(\"update:openedDetailed\", visibleDetailRows.value);\r\n}\r\n\r\nfunction openDetailRow(row: unknown): void {\r\n    const index = handleDetailKey(row);\r\n    visibleDetailRows.value.push(index);\r\n}\r\n\r\nfunction closeDetailRow(row: unknown): void {\r\n    const index = handleDetailKey(row);\r\n    const i = visibleDetailRows.value.indexOf(index);\r\n    if (i >= 0) visibleDetailRows.value.splice(i, 1);\r\n}\r\n\r\nfunction isVisibleDetailRow(row: unknown): boolean {\r\n    const index = handleDetailKey(row);\r\n    return visibleDetailRows.value.indexOf(index) >= 0;\r\n}\r\n\r\nfunction isActiveDetailRow(row: unknown): boolean {\r\n    return props.detailed && !props.customDetailRow && isVisibleDetailRow(row);\r\n}\r\n\r\nfunction isActiveCustomDetailRow(row: unknown): boolean {\r\n    return props.detailed && props.customDetailRow && isVisibleDetailRow(row);\r\n}\r\n\r\n/**\r\n * When the detailKey is defined we use the object[detailKey] as index.\r\n * If not, use the object reference by default.\r\n */\r\nfunction handleDetailKey(row: unknown): string {\r\n    const key = props.detailKey;\r\n    return !key?.length || !row ? row : row[key];\r\n}\r\n\r\n// --- Drag&Drop Feature ---\r\n\r\nconst isDraggingRow = ref(false);\r\nconst isDraggingColumn = ref(false);\r\n\r\nconst canDragRow = computed(() => props.draggable && !isDraggingColumn.value);\r\n\r\nconst canDragColumn = computed(\r\n    () => props.draggableColumn && !isDraggingRow.value,\r\n);\r\n\r\n/** Emits drag start event*/\r\nfunction handleDragStart(row: unknown, index: number, event: DragEvent): void {\r\n    if (!props.draggable) return;\r\n    emits(\"dragstart\", row, index, event);\r\n}\r\n\r\n/** Emits drag leave event */\r\nfunction handleDragEnd(row: unknown, index: number, event: DragEvent): void {\r\n    if (!props.draggable) return;\r\n    emits(\"dragend\", row, index, event);\r\n}\r\n\r\n/** Emits drop event */\r\nfunction handleDrop(row: unknown, index: number, event: DragEvent): void {\r\n    if (!props.draggable) return;\r\n    emits(\"drop\", row, index, event);\r\n}\r\n\r\n/** Emits drag over event */\r\nfunction handleDragOver(row: unknown, index: number, event: DragEvent): void {\r\n    if (!props.draggable) return;\r\n    emits(\"dragover\", row, index, event);\r\n}\r\n\r\n/** Emits drag leave event */\r\nfunction handleDragLeave(row: unknown, index: number, event: DragEvent): void {\r\n    if (!props.draggable) return;\r\n    emits(\"dragleave\", row, index, event);\r\n}\r\n\r\n/** Emits drag start event (column) */\r\nfunction handleColumnDragStart(\r\n    column: Column,\r\n    index: number,\r\n    event: DragEvent,\r\n): void {\r\n    if (!canDragColumn.value) return;\r\n    isDraggingColumn.value = true;\r\n    emits(\"columndragstart\", column, index, event);\r\n}\r\n\r\n/** Emits drag leave event (column) */\r\nfunction handleColumnDragEnd(\r\n    column: Column,\r\n    index: number,\r\n    event: DragEvent,\r\n): void {\r\n    if (!canDragColumn.value) return;\r\n    isDraggingColumn.value = false;\r\n    emits(\"columndragend\", column, index, event);\r\n}\r\n\r\n/** Emits drop event (column) */\r\nfunction handleColumnDrop(\r\n    column: Column,\r\n    index: number,\r\n    event: DragEvent,\r\n): void {\r\n    if (!canDragColumn.value) return;\r\n    emits(\"columndrop\", column, index, event);\r\n}\r\n\r\n/** Emits drag over event (column) */\r\nfunction handleColumnDragOver(\r\n    column: Column,\r\n    index: number,\r\n    event: DragEvent,\r\n): void {\r\n    if (!canDragColumn.value) return;\r\n    emits(\"columndragover\", column, index, event);\r\n}\r\n\r\n/** Emits drag leave event (column) */\r\nfunction handleColumnDragLeave(\r\n    column: Column,\r\n    index: number,\r\n    event: DragEvent,\r\n): void {\r\n    if (!canDragColumn.value) return;\r\n    emits(\"columndragleave\", column, index, event);\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"rootClass\", \"o-table__root\"],\r\n    [\"mobileClass\", \"o-table__wrapper--mobile\", null, isMobileActive],\r\n);\r\n\r\nconst tableClasses = defineClasses(\r\n    [\"tableClass\", \"o-table\"],\r\n    [\r\n        \"borderedClass\",\r\n        \"o-table--bordered\",\r\n        null,\r\n        computed(() => props.bordered),\r\n    ],\r\n    [\"stripedClass\", \"o-table--striped\", null, computed(() => props.striped)],\r\n    [\r\n        \"narrowedClass\",\r\n        \"o-table--narrowed\",\r\n        null,\r\n        computed(() => props.narrowed),\r\n    ],\r\n    [\r\n        \"hoverableClass\",\r\n        \"o-table--hoverable\",\r\n        null,\r\n        computed(\r\n            () =>\r\n                (props.hoverable || props.focusable) &&\r\n                !!visibleRows.value.length,\r\n        ),\r\n    ],\r\n    [\r\n        \"emptyClass\",\r\n        \"o-table--table__empty\",\r\n        null,\r\n        computed(() => !visibleRows.value.length),\r\n    ],\r\n);\r\n\r\nconst tableWrapperClasses = defineClasses(\r\n    [\"wrapperClass\", \"o-table__wrapper\"],\r\n    [\r\n        \"stickyHeaderClass\",\r\n        \"o-table__wrapper--sticky-header\",\r\n        null,\r\n        computed(() => props.stickyHeader),\r\n    ],\r\n    [\"scrollableClass\", \"o-table__wrapper--scrollable\", null, isScrollable],\r\n    [\"mobileClass\", \"o-table__wrapper--mobile\", null, isMobileActive],\r\n);\r\n\r\nconst footerClasses = defineClasses([\"footerClass\", \"o-table__footer\"]);\r\n\r\nconst thBaseClasses = defineClasses([\"thClass\", \"o-table__th\"]);\r\n\r\nconst tdBaseClasses = defineClasses([\"tdClass\", \"o-table__td\"]);\r\n\r\nconst thCheckboxClasses = defineClasses([\r\n    \"thCheckboxClass\",\r\n    \"o-table__th-checkbox\",\r\n]);\r\n\r\nconst thDetailedClasses = defineClasses([\r\n    \"thDetailedClass\",\r\n    \"o-table__th--detailed\",\r\n]);\r\n\r\nconst thSubheadingClasses = defineClasses([\"thSubheadingClass\", \"o-table__th\"]);\r\n\r\nconst tdCheckboxClasses = defineClasses(\r\n    [\"tdCheckboxClass\", \"o-table__td-checkbox\"],\r\n    [\r\n        \"thStickyClass\",\r\n        \"o-table__th--sticky\",\r\n        null,\r\n        computed(() => props.stickyCheckbox),\r\n    ],\r\n);\r\n\r\nconst detailedClasses = defineClasses([\"detailedClass\", \"o-table__detail\"]);\r\n\r\nconst tdDetailedChevronClasses = defineClasses([\r\n    \"tdDetailedChevronClass\",\r\n    \"o-table__td-chevron\",\r\n]);\r\n\r\nconst mobileSortClasses = defineClasses([\r\n    \"mobileSortClass\",\r\n    \"o-table__mobile-sort\",\r\n]);\r\n\r\nconst paginationWrapperClasses = defineClasses([\r\n    \"paginationWrapperClass\",\r\n    \"o-table__pagination\",\r\n]);\r\n\r\nconst paginationWrapperRootClasses = computed(() =>\r\n    getActiveClasses(paginationWrapperClasses.value),\r\n);\r\n\r\nconst thSortIconClasses = defineClasses([\r\n    \"thSortIconClass\",\r\n    \"o-table__th__sort-icon\",\r\n]);\r\n\r\nfunction thClasses(column: TableColumn): ClassBind[] {\r\n    const classes = defineClasses(\r\n        [\r\n            \"thCurrentSortClass\",\r\n            \"o-table__th-current-sort\",\r\n            null,\r\n            isColumnSorted(column),\r\n        ],\r\n        [\"thSortableClass\", \"o-table__th--sortable\", null, column.sortable],\r\n        [\r\n            \"thUnselectableClass\",\r\n            \"o-table__th--unselectable\",\r\n            null,\r\n            column.isHeaderUnselectable,\r\n        ],\r\n        [\r\n            \"thPositionClass\",\r\n            \"o-table__th--\",\r\n            column.position,\r\n            !!column.position,\r\n        ],\r\n        [\"thStickyClass\", \"o-table__th--sticky\", null, column.sticky],\r\n    );\r\n\r\n    return [...thBaseClasses.value, ...classes.value];\r\n}\r\n\r\nfunction rowClasses(row: unknown, index: number): ClassBind[] {\r\n    const classes = defineClasses(\r\n        [\r\n            \"trSelectedClass\",\r\n            \"o-table__tr--selected\",\r\n            null,\r\n            isRowSelected(row, props.selected),\r\n        ],\r\n        [\"trCheckedClass\", \"o-table__tr--checked\", null, isRowChecked(row)],\r\n    );\r\n\r\n    const rowClass = props.rowClass(row, index);\r\n\r\n    return [...classes.value, { [rowClass]: true }];\r\n}\r\n\r\nfunction tdClasses(row: unknown, column: TableColumnComponent): ClassBind[] {\r\n    const classes = defineClasses(\r\n        [\r\n            \"tdPositionClass\",\r\n            \"o-table__td--\",\r\n            column.position,\r\n            !!column.position,\r\n        ],\r\n\r\n        [\"tdStickyClass\", \"o-table__td--sticky\", null, column.sticky],\r\n    );\r\n\r\n    return [...tdBaseClasses.value, ...classes.value];\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div ref=\"rootRef\" :class=\"rootClasses\" data-oruga=\"table\">\r\n        <div ref=\"slotRef\" style=\"display: none\">\r\n            <!--\r\n                @slot Place o-table-column here\r\n            -->\r\n            <slot>\r\n                <template v-if=\"columns?.length\">\r\n                    <o-table-column\r\n                        v-for=\"(column, idx) in columns\"\r\n                        :key=\"idx\"\r\n                        v-slot=\"{ row }\"\r\n                        v-bind=\"column\">\r\n                        {{ column.field ? row[column.field] : row }}\r\n                    </o-table-column>\r\n                </template>\r\n            </slot>\r\n        </div>\r\n\r\n        <o-table-mobile-sort\r\n            v-if=\"isMobileActive && hasSortablenewColumns\"\r\n            :current-sort-column=\"currentSortColumn\"\r\n            :columns=\"tableColumns\"\r\n            :placeholder=\"mobileSortPlaceholder\"\r\n            :icon-pack=\"iconPack\"\r\n            :sort-icon=\"sortIcon\"\r\n            :sort-icon-size=\"sortIconSize\"\r\n            :is-asc=\"isAsc\"\r\n            :mobile-sort-classes=\"mobileSortClasses\"\r\n            @sort=\"(column, event) => sort(column, null, event)\" />\r\n\r\n        <template\r\n            v-if=\"\r\n                paginated &&\r\n                (paginationPosition === 'top' || paginationPosition === 'both')\r\n            \">\r\n            <!--\r\n                @slot Override pagination label\r\n                @binding {number} current - current page\r\n                @binding {number} per-page - rows per page\r\n                @binding {number} total - total rows count\r\n                @binding {(page: number): void } change - on page change event\r\n            -->\r\n            <slot\r\n                name=\"pagination\"\r\n                :current=\"tableCurrentPage\"\r\n                :per-page=\"perPage\"\r\n                :total=\"dataTotal\"\r\n                :change=\"(page) => (tableCurrentPage = page)\">\r\n                <o-table-pagination\r\n                    v-bind=\"$attrs\"\r\n                    v-model:current=\"tableCurrentPage\"\r\n                    :paginated=\"paginated\"\r\n                    :per-page=\"perPage\"\r\n                    :total=\"dataTotal\"\r\n                    :rounded=\"paginationRounded\"\r\n                    :size=\"paginationSize\"\r\n                    :order=\"paginationOrder\"\r\n                    :simple=\"paginationSimple\"\r\n                    :icon-pack=\"iconPack\"\r\n                    :aria-next-label=\"ariaNextLabel\"\r\n                    :aria-previous-label=\"ariaPreviousLabel\"\r\n                    :aria-page-label=\"ariaPageLabel\"\r\n                    :aria-current-label=\"ariaCurrentLabel\"\r\n                    :root-class=\"paginationWrapperRootClasses\"\r\n                    @change=\"(page) => $emit('page-change', page)\">\r\n                    <!--\r\n                        @slot Additional slot if table is paginated\r\n                    -->\r\n                    <slot name=\"top-left\" />\r\n                </o-table-pagination>\r\n            </slot>\r\n        </template>\r\n\r\n        <div :class=\"tableWrapperClasses\" :style=\"tableWrapperStyle\">\r\n            <table\r\n                :class=\"tableClasses\"\r\n                :tabindex=\"!focusable ? null : 0\"\r\n                @keydown.self.prevent.up=\"onArrowPressed(-1, $event)\"\r\n                @keydown.self.prevent.down=\"onArrowPressed(1, $event)\">\r\n                <caption v-if=\"$slots.caption\">\r\n                    <!--\r\n                        @slot Define a table caption here\r\n                    -->\r\n                    <slot name=\"caption\" />\r\n                </caption>\r\n                <thead v-if=\"tableColumns.length && showHeader\">\r\n                    <!--\r\n                        @slot Define preheader content here\r\n                    -->\r\n                    <slot name=\"preheader\" />\r\n                    <tr>\r\n                        <th\r\n                            v-if=\"showDetailRowIcon\"\r\n                            :class=\"[...thBaseClasses, ...thDetailedClasses]\" />\r\n                        <th\r\n                            v-if=\"checkable && checkboxPosition === 'left'\"\r\n                            :class=\"[...thBaseClasses, ...thCheckboxClasses]\">\r\n                            <!--\r\n                                @slot Override check all checkbox\r\n                                @binding {boolean} is-all-checked - if all rows are checked\r\n                                @binding {boolean} is-all-uncheckable - if check all is uncheckable\r\n                                @binding {(): void} check-all - check all function\r\n                            -->\r\n                            <slot\r\n                                name=\"check-all\"\r\n                                :is-all-checked=\"isAllChecked\"\r\n                                :is-all-uncheckable=\"isAllUncheckable\"\r\n                                :check-all=\"checkAll\">\r\n                                <o-checkbox\r\n                                    v-if=\"headerCheckable\"\r\n                                    :model-value=\"isAllChecked\"\r\n                                    autocomplete=\"off\"\r\n                                    :variant=\"checkboxVariant\"\r\n                                    :disabled=\"isAllUncheckable\"\r\n                                    @update:model-value=\"checkAll\" />\r\n                            </slot>\r\n                        </th>\r\n                        <th\r\n                            v-for=\"(column, index) in visibleColumns\"\r\n                            :key=\"column.identifier + ':' + index + 'header'\"\r\n                            v-bind=\"column.thAttrsData\"\r\n                            :class=\"thClasses(column)\"\r\n                            :style=\"isMobileActive ? {} : column.style\"\r\n                            :draggable=\"canDragColumn\"\r\n                            @click.stop=\"sort(column, null, $event)\"\r\n                            @dragstart=\"\r\n                                handleColumnDragStart(column, index, $event)\r\n                            \"\r\n                            @dragend=\"\r\n                                handleColumnDragEnd(column, index, $event)\r\n                            \"\r\n                            @drop=\"handleColumnDrop(column, index, $event)\"\r\n                            @dragover=\"\r\n                                handleColumnDragOver(column, index, $event)\r\n                            \"\r\n                            @dragleave=\"\r\n                                handleColumnDragLeave(column, index, $event)\r\n                            \">\r\n                            <template v-if=\"column.$slots?.header\">\r\n                                <o-slot-component\r\n                                    :component=\"column.$el\"\r\n                                    name=\"header\"\r\n                                    tag=\"span\"\r\n                                    :props=\"{ column, index }\" />\r\n                            </template>\r\n                            <template v-else>\r\n                                <span>\r\n                                    {{ column.label }}\r\n                                    <span\r\n                                        v-show=\"\r\n                                            column.sortable &&\r\n                                            isColumnSorted(column)\r\n                                        \"\r\n                                        :class=\"thSortIconClasses\">\r\n                                        <o-icon\r\n                                            :icon=\"sortIcon\"\r\n                                            :pack=\"iconPack\"\r\n                                            both\r\n                                            :size=\"sortIconSize\"\r\n                                            :rotation=\"!isAsc ? 180 : 0\" />\r\n                                    </span>\r\n                                </span>\r\n                            </template>\r\n                        </th>\r\n                        <th\r\n                            v-if=\"checkable && checkboxPosition === 'right'\"\r\n                            :class=\"[...thBaseClasses, ...thCheckboxClasses]\">\r\n                            <template v-if=\"headerCheckable\">\r\n                                <!--\r\n                                    @slot Override check all checkbox\r\n                                    @binding {boolean} is-all-checked - if all rows are checked\r\n                                    @binding {boolean} is-all-uncheckable - if check all is uncheckable\r\n                                    @binding {(): void} check-all - check all function\r\n                                -->\r\n                                <slot\r\n                                    name=\"check-all\"\r\n                                    :is-all-checked=\"isAllChecked\"\r\n                                    :is-all-uncheckable=\"isAllUncheckable\"\r\n                                    :check-all=\"checkAll\">\r\n                                    <o-checkbox\r\n                                        :model-value=\"isAllChecked\"\r\n                                        autocomplete=\"off\"\r\n                                        :variant=\"checkboxVariant\"\r\n                                        :disabled=\"isAllUncheckable\"\r\n                                        @update:model-value=\"checkAll\" />\r\n                                </slot>\r\n                            </template>\r\n                        </th>\r\n                    </tr>\r\n                    <tr v-if=\"hasSearchablenewColumns\">\r\n                        <th\r\n                            v-if=\"showDetailRowIcon\"\r\n                            :class=\"[...thBaseClasses, ...thDetailedClasses]\" />\r\n                        <th v-if=\"checkable && checkboxPosition === 'left'\" />\r\n                        <th\r\n                            v-for=\"(column, index) in visibleColumns\"\r\n                            :key=\"\r\n                                column.identifier + ':' + index + 'searchable'\r\n                            \"\r\n                            v-bind=\"column.thAttrsData\"\r\n                            :class=\"thClasses(column)\"\r\n                            :style=\"isMobileActive ? {} : column.style\">\r\n                            <template v-if=\"column.searchable\">\r\n                                <template v-if=\"column.$slots?.searchable\">\r\n                                    <o-slot-component\r\n                                        :component=\"column.$el\"\r\n                                        name=\"searchable\"\r\n                                        tag=\"span\"\r\n                                        :props=\"{ column, index, filters }\" />\r\n                                </template>\r\n                                <o-input\r\n                                    v-else\r\n                                    v-model=\"filters[column.field]\"\r\n                                    :type=\"column.numeric ? 'number' : 'text'\"\r\n                                    @[filtersEvent]=\"onFiltersEvent\" />\r\n                            </template>\r\n                        </th>\r\n                        <th v-if=\"checkable && checkboxPosition === 'right'\" />\r\n                    </tr>\r\n                    <tr v-if=\"hasCustomSubheadings\">\r\n                        <th\r\n                            v-if=\"showDetailRowIcon\"\r\n                            :class=\"[...thBaseClasses, ...thDetailedClasses]\" />\r\n                        <th v-if=\"checkable && checkboxPosition === 'left'\" />\r\n                        <th\r\n                            v-for=\"(column, index) in visibleColumns\"\r\n                            :key=\"\r\n                                column.identifier + ':' + index + 'subheading'\r\n                            \"\r\n                            :style=\"isMobileActive ? {} : column.style\"\r\n                            :class=\"[...thBaseClasses, ...thSubheadingClasses]\">\r\n                            <template v-if=\"column.$slots?.subheading\">\r\n                                <o-slot-component\r\n                                    :component=\"column.$el\"\r\n                                    name=\"subheading\"\r\n                                    tag=\"span\"\r\n                                    :props=\"{ column, index }\" />\r\n                            </template>\r\n                            <template v-else>\r\n                                {{ column.subheading }}\r\n                            </template>\r\n                        </th>\r\n                        <th v-if=\"checkable && checkboxPosition === 'right'\" />\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <template\r\n                        v-for=\"(row, index) in visibleRows\"\r\n                        :key=\"getRowKey(row) + 'row'\">\r\n                        <tr\r\n                            :class=\"rowClasses(row, index)\"\r\n                            :draggable=\"canDragRow\"\r\n                            @click=\"selectRow(row, index, $event)\"\r\n                            @dblclick=\"$emit('dblclick', row, index, $event)\"\r\n                            @mouseenter=\"\r\n                                $emit('mouseenter', row, index, $event)\r\n                            \"\r\n                            @mouseleave=\"\r\n                                $emit('mouseleave', row, index, $event)\r\n                            \"\r\n                            @contextmenu=\"\r\n                                $emit('contextmenu', row, index, $event)\r\n                            \"\r\n                            @dragstart=\"handleDragStart(row, index, $event)\"\r\n                            @dragend=\"handleDragEnd(row, index, $event)\"\r\n                            @drop=\"handleDrop(row, index, $event)\"\r\n                            @dragover=\"handleDragOver(row, index, $event)\"\r\n                            @dragleave=\"handleDragLeave(row, index, $event)\">\r\n                            <!-- detailed toggle column -->\r\n                            <td\r\n                                v-if=\"showDetailRowIcon\"\r\n                                :class=\"[\r\n                                    ...tdBaseClasses,\r\n                                    ...tdDetailedChevronClasses,\r\n                                ]\">\r\n                                <o-icon\r\n                                    v-if=\"hasDetailedVisible(row)\"\r\n                                    :icon=\"detailIcon\"\r\n                                    :pack=\"iconPack\"\r\n                                    :rotation=\"isVisibleDetailRow(row) ? 90 : 0\"\r\n                                    role=\"button\"\r\n                                    clickable\r\n                                    both\r\n                                    @click.stop=\"toggleDetails(row)\" />\r\n                            </td>\r\n\r\n                            <!-- checkable column left -->\r\n                            <td\r\n                                v-if=\"checkable && checkboxPosition === 'left'\"\r\n                                :class=\"[\r\n                                    ...thBaseClasses,\r\n                                    ...tdCheckboxClasses,\r\n                                ]\">\r\n                                <o-checkbox\r\n                                    :model-value=\"isRowChecked(row)\"\r\n                                    autocomplete=\"off\"\r\n                                    :variant=\"checkboxVariant\"\r\n                                    :disabled=\"!isRowCheckable(row)\"\r\n                                    @update:model-value=\"\r\n                                        checkRow(row, index)\r\n                                    \" />\r\n                            </td>\r\n\r\n                            <!-- row data columns -->\r\n                            <o-slot-component\r\n                                v-for=\"(column, colindex) in visibleColumns\"\r\n                                :key=\"\r\n                                    column.identifier + index + ':' + colindex\r\n                                \"\r\n                                v-bind=\"column.tdAttrsData[index]\"\r\n                                :component=\"column.$el\"\r\n                                name=\"default\"\r\n                                tag=\"td\"\r\n                                :class=\"tdClasses(row, column)\"\r\n                                :style=\"isMobileActive ? {} : column.style\"\r\n                                :data-label=\"column.label\"\r\n                                :props=\"{\r\n                                    row,\r\n                                    column,\r\n                                    index,\r\n                                    colindex,\r\n                                    toggleDetails,\r\n                                }\"\r\n                                @click=\"\r\n                                    $emit(\r\n                                        'cell-click',\r\n                                        row,\r\n                                        column,\r\n                                        index,\r\n                                        colindex,\r\n                                        $event,\r\n                                    )\r\n                                \" />\r\n\r\n                            <!-- checkable column right -->\r\n                            <td\r\n                                v-if=\"checkable && checkboxPosition === 'right'\"\r\n                                :class=\"[\r\n                                    ...thBaseClasses,\r\n                                    ...tdCheckboxClasses,\r\n                                ]\">\r\n                                <o-checkbox\r\n                                    :model-value=\"isRowChecked(row)\"\r\n                                    autocomplete=\"off\"\r\n                                    :variant=\"checkboxVariant\"\r\n                                    :disabled=\"!isRowCheckable(row)\"\r\n                                    @update:model-value=\"\r\n                                        checkRow(row, index)\r\n                                    \" />\r\n                            </td>\r\n                        </tr>\r\n\r\n                        <transition :name=\"detailTransition\">\r\n                            <tr\r\n                                v-if=\"isActiveDetailRow(row)\"\r\n                                :key=\"getRowKey(row) + 'detail'\"\r\n                                :class=\"detailedClasses\">\r\n                                <td :colspan=\"columnCount\">\r\n                                    <!--\r\n                                        @slot Place row detail content here\r\n                                        @binding {unknown} row - row conent\r\n                                        @binding {number} index - row index\r\n                                    -->\r\n                                    <slot\r\n                                        name=\"detail\"\r\n                                        :row=\"row\"\r\n                                        :index=\"index\" />\r\n                                </td>\r\n                            </tr>\r\n                        </transition>\r\n                        <!--\r\n                            @slot Place row detail content here\r\n                            @binding {unknown} row - row conent\r\n                            @binding {number} index - row index\r\n                        -->\r\n                        <slot\r\n                            v-if=\"isActiveCustomDetailRow(row)\"\r\n                            name=\"detail\"\r\n                            :row=\"row\"\r\n                            :index=\"index\" />\r\n                    </template>\r\n\r\n                    <tr v-if=\"!visibleRows.length\">\r\n                        <td :colspan=\"columnCount\">\r\n                            <!--\r\n                                @slot Define content if table is empty\r\n                            -->\r\n                            <slot name=\"empty\" />\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n\r\n                <tfoot v-if=\"$slots.footer\">\r\n                    <tr :class=\"footerClasses\">\r\n                        <!--\r\n                            @slot Define a custom footer\r\n                            @binding {number} column-count - counts of visible columns\r\n                            @binding {number} row-count - counts of visible rows\r\n                        -->\r\n                        <slot\r\n                            v-if=\"hasCustomFooterSlot()\"\r\n                            name=\"footer\"\r\n                            :column-count=\"columnCount\"\r\n                            :row-count=\"visibleRows?.length\" />\r\n                        <th v-else :colspan=\"columnCount\">\r\n                            <!--\r\n                                @slot Define a custom footer\r\n                                @binding {number} column-count - counts of visible columns\r\n                                @binding {number} row-count - counts of visible rows\r\n                            -->\r\n                            <slot\r\n                                name=\"footer\"\r\n                                :column-count=\"columnCount\"\r\n                                :row-count=\"visibleRows?.length\" />\r\n                        </th>\r\n                    </tr>\r\n                </tfoot>\r\n            </table>\r\n            <!--\r\n                @slot Override loading component\r\n                @binding {boolean} loading - is loading enabled\r\n            -->\r\n            <slot name=\"loading\" :loading=\"loading\">\r\n                <o-loading :full-page=\"false\" :active=\"loading\" />\r\n            </slot>\r\n        </div>\r\n\r\n        <template\r\n            v-if=\"\r\n                (checkable && $slots['bottom-left']) ||\r\n                (paginated &&\r\n                    (paginationPosition === 'bottom' ||\r\n                        paginationPosition === 'both'))\r\n            \">\r\n            <!--\r\n                @slot Override pagination label\r\n                @binding {number} current - current page\r\n                @binding {number} per-page - rows per page\r\n                @binding {number} total - total rows count\r\n                @binding {(page: number): void } change - on page change event\r\n            -->\r\n            <slot\r\n                name=\"pagination\"\r\n                :current=\"tableCurrentPage\"\r\n                :per-page=\"perPage\"\r\n                :total=\"dataTotal\"\r\n                :change=\"(page) => (tableCurrentPage = page)\">\r\n                <o-table-pagination\r\n                    v-bind=\"$attrs\"\r\n                    v-model:current=\"tableCurrentPage\"\r\n                    :paginated=\"paginated\"\r\n                    :per-page=\"perPage\"\r\n                    :total=\"dataTotal\"\r\n                    :rounded=\"paginationRounded\"\r\n                    :size=\"paginationSize\"\r\n                    :order=\"paginationOrder\"\r\n                    :simple=\"paginationSimple\"\r\n                    :icon-pack=\"iconPack\"\r\n                    :aria-next-label=\"ariaNextLabel\"\r\n                    :aria-previous-label=\"ariaPreviousLabel\"\r\n                    :aria-page-label=\"ariaPageLabel\"\r\n                    :aria-current-label=\"ariaCurrentLabel\"\r\n                    :root-class=\"paginationWrapperRootClasses\"\r\n                    @change=\"(page) => $emit('page-change', page)\">\r\n                    <!--\r\n                        @slot Additional slot if table is paginated\r\n                    -->\r\n                    <slot name=\"bottom-left\" />\r\n                </o-table-pagination>\r\n            </slot>\r\n        </template>\r\n    </div>\r\n</template>\r\n","import type { App, Plugin } from \"vue\";\r\n\r\nimport Table from \"./Table.vue\";\r\nimport TableColumn from \"./TableColumn.vue\";\r\n\r\nimport { registerComponent } from \"@/utils/plugins\";\r\n\r\n/** export table specific types */\r\nexport type { Column } from \"./types\";\r\n\r\n/** export table plugin */\r\nexport default {\r\n    install(app: App) {\r\n        registerComponent(app, Table);\r\n        registerComponent(app, TableColumn);\r\n    },\r\n} as Plugin;\r\n\r\n/** export table components */\r\nexport { Table as OTable, TableColumn as OTableColumn };\r\n"],"names":["index","isAsc","isAllChecked","Table","TableColumn"],"mappings":"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"}