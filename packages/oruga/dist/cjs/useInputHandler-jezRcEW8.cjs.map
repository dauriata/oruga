{"version":3,"file":"useInputHandler-jezRcEW8.cjs","sources":["../../src/composables/useInputHandler.ts"],"sourcesContent":["import {\r\n    nextTick,\r\n    ref,\r\n    computed,\r\n    type ExtractPropTypes,\r\n    type MaybeRefOrGetter,\r\n    type Component,\r\n} from \"vue\";\r\nimport { injectField } from \"@/components/field/useFieldShare\";\r\nimport { unrefElement } from \"./unrefElement\";\r\nimport { getOption } from \"@/utils/config\";\r\nimport { isSSR } from \"@/utils/ssr\";\r\n\r\n// This should cover all types of HTML elements that have properties related to\r\n// HTML constraint validation, e.g. .form and .validity.\r\nconst validatableFormElementTypes = isSSR\r\n    ? []\r\n    : [\r\n          HTMLButtonElement,\r\n          HTMLFieldSetElement,\r\n          HTMLInputElement,\r\n          HTMLObjectElement,\r\n          HTMLOutputElement,\r\n          HTMLSelectElement,\r\n          HTMLTextAreaElement,\r\n      ];\r\n\r\nexport type ValidatableFormElement = InstanceType<\r\n    (typeof validatableFormElementTypes)[number]\r\n>;\r\n\r\nfunction asValidatableFormElement(el: unknown): ValidatableFormElement | null {\r\n    return validatableFormElementTypes.some((t) => el instanceof t)\r\n        ? (el as ValidatableFormElement)\r\n        : null;\r\n}\r\n\r\n/**\r\n * Form input handler functionalities\r\n */\r\nexport function useInputHandler(\r\n    /** input ref element - can be a html element or a vue component*/\r\n    inputRef: MaybeRefOrGetter<ValidatableFormElement | Component>,\r\n    /** emitted input events */\r\n    emits: {\r\n        /** on input focus event */\r\n        (e: \"focus\", value: Event): void;\r\n        /** on input blur event */\r\n        (e: \"blur\", value: Event): void;\r\n        /** on input invalid event */\r\n        (e: \"invalid\", value: Event): void;\r\n    },\r\n    /** validation configuration props */\r\n    props: Readonly<\r\n        ExtractPropTypes<{\r\n            useHtml5Validation?: boolean;\r\n            validationMessage?: string;\r\n        }>\r\n    >,\r\n) {\r\n    // inject parent field component if used inside one\r\n    const { parentField } = injectField();\r\n\r\n    const element = computed<ValidatableFormElement>(() => {\r\n        const el = unrefElement<Component | HTMLElement>(inputRef);\r\n        if (!el) {\r\n            console.warn(\"useInputHandler: inputRef contains no element\");\r\n            return undefined;\r\n        }\r\n        if (el.getAttribute(\"data-oruga-input\"))\r\n            // if element is the input element\r\n            return el as ValidatableFormElement;\r\n\r\n        const inputs = el.querySelector(\"[data-oruga-input]\");\r\n\r\n        if (!inputs) {\r\n            console.warn(\r\n                \"useInputHandler: Underlaying Oruga input component not found\",\r\n            );\r\n            return undefined;\r\n        }\r\n        // return underlaying the input element\r\n        return inputs as ValidatableFormElement;\r\n    });\r\n\r\n    // --- Input Focus Feature ---\r\n\r\n    const isFocused = ref(false);\r\n\r\n    /** Focus the underlaying input element. */\r\n    function setFocus(): void {\r\n        nextTick(() => {\r\n            if (element.value) element.value.focus();\r\n        });\r\n    }\r\n\r\n    /** Click the underlaying input element. */\r\n    function doClick(): void {\r\n        nextTick(() => {\r\n            if (element.value) element.value.click();\r\n        });\r\n    }\r\n\r\n    function onBlur(event?: Event): void {\r\n        isFocused.value = false;\r\n        if (parentField?.value) parentField.value.setFocus(false);\r\n        emits(\"blur\", event);\r\n        checkHtml5Validity();\r\n    }\r\n\r\n    function onFocus(event?: Event): void {\r\n        isFocused.value = true;\r\n        if (parentField?.value) parentField.value.setFocus(true);\r\n        emits(\"focus\", event);\r\n    }\r\n\r\n    // --- Validation Feature ---\r\n\r\n    const isValid = ref(true);\r\n\r\n    function setFieldValidity(variant, message): void {\r\n        nextTick(() => {\r\n            if (parentField?.value) {\r\n                // Set type only if not defined\r\n                if (!parentField.value.props.variant) {\r\n                    parentField.value.setVariant(variant);\r\n                }\r\n                // Set message only if not defined\r\n                if (!parentField.value.props.message) {\r\n                    parentField.value.setMessage(message);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check HTML5 validation, set isValid property.\r\n     * If validation fail, send 'danger' type,\r\n     * and error message to parent if it's a Field.\r\n     */\r\n    function checkHtml5Validity(): boolean {\r\n        if (!props.useHtml5Validation) return;\r\n\r\n        if (!element.value) return;\r\n        if (element.value.validity.valid) {\r\n            setFieldValidity(null, null);\r\n            isValid.value = true;\r\n        } else {\r\n            setInvalid();\r\n            isValid.value = false;\r\n        }\r\n\r\n        return isValid.value;\r\n    }\r\n\r\n    function setInvalid(): void {\r\n        const variant = \"danger\";\r\n        const message =\r\n            props.validationMessage || element.value.validationMessage;\r\n        setFieldValidity(variant, message);\r\n    }\r\n\r\n    function onInvalid(event: Event): void {\r\n        checkHtml5Validity();\r\n        const validatable = asValidatableFormElement(event.target);\r\n        if (validatable && parentField?.value && props.useHtml5Validation) {\r\n            // We provide our own error message on the field, so we should suppress the browser's default tooltip.\r\n            // We still want to focus the form's first invalid input, though.\r\n            event.preventDefault();\r\n            let isFirstInvalid = false;\r\n            if (validatable.form != null) {\r\n                const formElements = validatable.form.elements;\r\n                for (let i = 0; i < formElements.length; ++i) {\r\n                    const element = asValidatableFormElement(\r\n                        formElements.item(i),\r\n                    );\r\n                    if (element?.willValidate && !element.validity.valid) {\r\n                        isFirstInvalid = validatable === element;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (isFirstInvalid) {\r\n                const fieldElement = parentField.value.$el;\r\n                const invalidHandler = getOption(\"invalidHandler\");\r\n                if (invalidHandler instanceof Function) {\r\n                    invalidHandler(validatable, fieldElement);\r\n                } else {\r\n                    // We'll scroll to put the whole field in view, not just the element that triggered the event,\r\n                    // which should mean that the message will be visible onscreen.\r\n                    // scrollIntoViewIfNeeded() is a non-standard method (but a very common extension).\r\n                    // If we can't use it, we'll just fall back to focusing the field.\r\n                    const canScrollToField = fieldElement\r\n                        ? fieldElement.scrollIntoView != undefined\r\n                        : false;\r\n                    validatable.focus({ preventScroll: canScrollToField });\r\n                    if (canScrollToField) {\r\n                        fieldElement.scrollIntoView({ block: \"nearest\" });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        emits(\"invalid\", event);\r\n    }\r\n\r\n    return {\r\n        isFocused,\r\n        isValid,\r\n        setFocus,\r\n        doClick,\r\n        onFocus,\r\n        onBlur,\r\n        checkHtml5Validity,\r\n        onInvalid,\r\n    };\r\n}\r\n"],"names":["isSSR","injectField","computed","unrefElement","ref","nextTick","element","getOption"],"mappings":"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"}