{"version":3,"file":"Loading.vue_vue_type_script_setup_true_lang-CBsJmoJ6.cjs","sources":["../../src/components/loading/Loading.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { ref, onMounted, type PropType } from \"vue\";\r\n\r\nimport OIcon from \"../icon/Icon.vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport {\r\n    defineClasses,\r\n    useProgrammaticComponent,\r\n    usePropBinding,\r\n} from \"@/composables\";\r\n\r\nimport type { ComponentClass, ProgrammaticInstance } from \"@/types\";\r\n\r\n/**\r\n * A simple loading overlay\r\n * @displayName Loading\r\n * @style _loading.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OLoading\",\r\n    configField: \"loading\",\r\n    inheritAttrs: false,\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** Whether loading is active or not, use v-model:active to make it two-way binding. */\r\n    active: { type: Boolean, default: false },\r\n    /** Loader will overlay the full page. */\r\n    fullPage: { type: Boolean, default: true },\r\n    /** Notification label, unnecessary when default slot is used. */\r\n    label: { type: String, default: undefined },\r\n    /** Custom animation (transition name) */\r\n    animation: {\r\n        type: String,\r\n        default: () => getOption(\"loading.animation\", \"fade\"),\r\n    },\r\n    /** Is Loading cancable by pressing escape or clicking outside. */\r\n    cancelable: { type: Boolean, default: false },\r\n    /** Callback function to call after user canceled (pressed escape / clicked outside). */\r\n    onCancel: { type: Function as PropType<() => void>, default: () => {} },\r\n    /** Callback function to call after close (programmatically close or user canceled). */\r\n    onClose: { type: Function as PropType<() => void>, default: () => {} },\r\n    /** Icon name to show, unnecessary when default slot is used. */\r\n    icon: {\r\n        type: String,\r\n        default: () => getOption(\"loading.icon\", \"loading\"),\r\n    },\r\n    /** Enable spin effect on icon */\r\n    iconSpin: {\r\n        type: Boolean,\r\n        default: () => getOption(\"loading.iconSpin\", true),\r\n    },\r\n    /**\r\n     * Icon size\r\n     * @values small, medium, large\r\n     */\r\n    iconSize: {\r\n        type: String,\r\n        default: () => getOption(\"loading.iconSize\", \"medium\"),\r\n    },\r\n    /**\r\n     * DOM element where the loading component will be created on (for programmatic usage).\r\n     * Note that this also changes fullPage to false.\r\n     */\r\n    container: {\r\n        type: [Object, String] as PropType<string | HTMLElement>,\r\n        default: () => getOption(\"loading.container\", \"body\"),\r\n    },\r\n    /**\r\n     * This is used internally for programmatic usage\r\n     * @ignore\r\n     */\r\n    programmatic: {\r\n        type: Object as PropType<ProgrammaticInstance>,\r\n        default: undefined,\r\n    },\r\n    /**\r\n     * This is used internally for programmatic usage.\r\n     * @ignore\r\n     */\r\n    promise: { type: Promise, default: undefined },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for the root element when fullpage */\r\n    fullPageClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the loading overlay */\r\n    overlayClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for the loading icon */\r\n    iconClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for the loading label */\r\n    labelClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * active prop two-way binding\r\n     * @param value {boolean} - updated active prop\r\n     */\r\n    (e: \"update:active\", value: boolean): void;\r\n    /**\r\n     * fullPage prop two-way binding\r\n     * @param value {boolean} - updated fullPage prop\r\n     */\r\n    (e: \"update:fullPage\", value: boolean): void;\r\n    /**\r\n     * on component close event\r\n     * @param value {any} - close event data\r\n     */\r\n    (e: \"close\", ...args: any[]): void;\r\n}>();\r\n\r\nconst rootRef = ref();\r\n\r\nconst displayInFullPage = usePropBinding(\"fullPage\", props, emits);\r\n\r\n/** add programmatic usage to this component */\r\nconst { isActive, close, cancel } = useProgrammaticComponent(\r\n    rootRef,\r\n    props,\r\n    emits,\r\n    {\r\n        cancelOptions: [\"escape\", \"outside\"],\r\n    },\r\n);\r\n\r\nonMounted(() => {\r\n    if (props.programmatic && props.container) displayInFullPage.value = false;\r\n});\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"rootClass\", \"o-load\"],\r\n    [\"fullPageClass\", \"o-load--fullpage\", null, displayInFullPage],\r\n);\r\n\r\nconst overlayClasses = defineClasses([\"overlayClass\", \"o-load__overlay\"]);\r\n\r\nconst iconClasses = defineClasses([\"iconClass\", \"o-load__icon\"]);\r\n\r\nconst labelClasses = defineClasses([\"labelClass\", \"o-load__label\"]);\r\n\r\n// --- Expose Public Functionalities ---\r\n\r\n/** expose functionalities for programmatic usage */\r\ndefineExpose({ close, promise: props.promise });\r\n</script>\r\n\r\n<template>\r\n    <transition :name=\"animation\">\r\n        <div\r\n            v-if=\"isActive\"\r\n            ref=\"rootRef\"\r\n            data-oruga=\"loading\"\r\n            role=\"dialog\"\r\n            :class=\"rootClasses\">\r\n            <div\r\n                :class=\"overlayClasses\"\r\n                :tabindex=\"-1\"\r\n                aria-hidden=\"true\"\r\n                @click=\"cancel('outside')\" />\r\n            <!-- \r\n                @slot Override icon and label\r\n                @binding {close} close - function to close the component\r\n            -->\r\n            <slot :close=\"close\">\r\n                <o-icon\r\n                    :icon=\"icon\"\r\n                    :spin=\"iconSpin\"\r\n                    :size=\"iconSize\"\r\n                    :class=\"iconClasses\"\r\n                    both />\r\n                <span v-if=\"label\" :class=\"labelClasses\">\r\n                    {{ label }}\r\n                </span>\r\n            </slot>\r\n        </div>\r\n    </transition>\r\n</template>\r\n"],"names":["ref","usePropBinding","useProgrammaticComponent","onMounted","defineClasses"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,UAAM,QAAQ;AAuFd,UAAM,QAAQ;AAkBd,UAAM,UAAUA,IAAAA;AAEhB,UAAM,oBAAoBC,aAAA,eAAe,YAAY,OAAO,KAAK;AAGjE,UAAM,EAAE,UAAU,OAAO,OAAW,IAAAC,gBAAA;AAAA,MAChC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACI,eAAe,CAAC,UAAU,SAAS;AAAA,MACvC;AAAA,IAAA;AAGJC,QAAAA,UAAU,MAAM;AACR,UAAA,MAAM,gBAAgB,MAAM;AAAW,0BAAkB,QAAQ;AAAA,IAAA,CACxE;AAID,UAAM,cAAcC,cAAA;AAAA,MAChB,CAAC,aAAa,QAAQ;AAAA,MACtB,CAAC,iBAAiB,oBAAoB,MAAM,iBAAiB;AAAA,IAAA;AAGjE,UAAM,iBAAiBA,cAAA,cAAc,CAAC,gBAAgB,iBAAiB,CAAC;AAExE,UAAM,cAAcA,cAAA,cAAc,CAAC,aAAa,cAAc,CAAC;AAE/D,UAAM,eAAeA,cAAA,cAAc,CAAC,cAAc,eAAe,CAAC;AAKlE,aAAa,EAAE,OAAO,SAAS,MAAM,QAAS,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}