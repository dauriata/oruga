{"version":3,"file":"trapFocus-BdXZCQ-C.cjs","sources":["../../src/directives/trapFocus.ts"],"sourcesContent":["const findFocusable = (element: any, programmatic = false) => {\r\n    if (!element) return null;\r\n    if (programmatic) return element.querySelectorAll(`*[tabindex=\"-1\"]`);\r\n\r\n    return element.querySelectorAll(`a[href]:not([tabindex=\"-1\"]),\r\n                                     area[href],\r\n                                     input:not([disabled]),\r\n                                     select:not([disabled]),\r\n                                     textarea:not([disabled]),\r\n                                     button:not([disabled]),\r\n                                     iframe,\r\n                                     object,\r\n                                     embed,\r\n                                     *[tabindex]:not([tabindex=\"-1\"]),\r\n                                     *[contenteditable]`);\r\n};\r\n\r\nlet onKeyDown: any;\r\n\r\nconst bind = (el: any, { value = true }) => {\r\n    if (value) {\r\n        let focusable = findFocusable(el);\r\n        let focusableProg = findFocusable(el, true);\r\n\r\n        if (focusable && focusable.length > 0) {\r\n            onKeyDown = (event: any) => {\r\n                // Need to get focusable each time since it can change between key events\r\n                // ex. changing month in a datepicker\r\n                focusable = findFocusable(el);\r\n                focusableProg = findFocusable(el, true);\r\n                const firstFocusable = focusable[0];\r\n                const lastFocusable = focusable[focusable.length - 1];\r\n\r\n                if (\r\n                    event.target === firstFocusable &&\r\n                    event.shiftKey &&\r\n                    event.key === \"Tab\"\r\n                ) {\r\n                    event.preventDefault();\r\n                    lastFocusable.focus();\r\n                } else if (\r\n                    (event.target === lastFocusable ||\r\n                        Array.from(focusableProg).indexOf(event.target) >= 0) &&\r\n                    !event.shiftKey &&\r\n                    event.key === \"Tab\"\r\n                ) {\r\n                    event.preventDefault();\r\n                    firstFocusable.focus();\r\n                }\r\n            };\r\n            el.addEventListener(\"keydown\", onKeyDown);\r\n        }\r\n    }\r\n};\r\n\r\nconst unbind = (el: any) => {\r\n    el.removeEventListener(\"keydown\", onKeyDown);\r\n};\r\n\r\nconst directive = {\r\n    beforeMount: bind,\r\n    beforeUnmount: unbind,\r\n};\r\n\r\nexport default directive;\r\n\r\nexport const vTrapFocus = directive; // export composition api directive\r\n"],"names":[],"mappings":";;AAAA,MAAM,gBAAgB,CAAC,SAAc,eAAe,UAAU;AAC1D,MAAI,CAAC;AAAgB,WAAA;AACjB,MAAA;AAAqB,WAAA,QAAQ,iBAAiB,kBAAkB;AAEpE,SAAO,QAAQ,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAUoB;AACxD;AAEA,IAAI;AAEJ,MAAM,OAAO,CAAC,IAAS,EAAE,QAAQ,WAAW;AACxC,MAAI,OAAO;AACH,QAAA,YAAY,cAAc,EAAE;AAC5B,QAAA,gBAAgB,cAAc,IAAI,IAAI;AAEtC,QAAA,aAAa,UAAU,SAAS,GAAG;AACnC,kBAAY,CAAC,UAAe;AAGxB,oBAAY,cAAc,EAAE;AACZ,wBAAA,cAAc,IAAI,IAAI;AAChC,cAAA,iBAAiB,UAAU,CAAC;AAClC,cAAM,gBAAgB,UAAU,UAAU,SAAS,CAAC;AAEpD,YACI,MAAM,WAAW,kBACjB,MAAM,YACN,MAAM,QAAQ,OAChB;AACE,gBAAM,eAAe;AACrB,wBAAc,MAAM;AAAA,QAAA,YAEnB,MAAM,WAAW,iBACd,MAAM,KAAK,aAAa,EAAE,QAAQ,MAAM,MAAM,KAAK,MACvD,CAAC,MAAM,YACP,MAAM,QAAQ,OAChB;AACE,gBAAM,eAAe;AACrB,yBAAe,MAAM;AAAA,QACzB;AAAA,MAAA;AAED,SAAA,iBAAiB,WAAW,SAAS;AAAA,IAC5C;AAAA,EACJ;AACJ;AAEA,MAAM,SAAS,CAAC,OAAY;AACrB,KAAA,oBAAoB,WAAW,SAAS;AAC/C;AAEA,MAAM,YAAY;AAAA,EACd,aAAa;AAAA,EACb,eAAe;AACnB;AAIO,MAAM,aAAa;;"}