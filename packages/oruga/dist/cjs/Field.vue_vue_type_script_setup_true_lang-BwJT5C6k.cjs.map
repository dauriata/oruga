{"version":3,"file":"Field.vue_vue_type_script_setup_true_lang-BwJT5C6k.cjs","sources":["../../src/components/field/FieldBody.vue","../../src/components/field/Field.vue"],"sourcesContent":["<script lang=\"ts\">\r\nimport {\r\n    defineComponent,\r\n    h,\r\n    resolveComponent,\r\n    Comment,\r\n    Text,\r\n    useSlots,\r\n    type PropType,\r\n} from \"vue\";\r\n\r\nimport { injectField } from \"./useFieldShare\";\r\n\r\nimport type { ClassBind } from \"@/types\";\r\n\r\nexport default defineComponent({\r\n    name: \"OFieldBody\",\r\n    configField: \"field\",\r\n    props: {\r\n        classes: {\r\n            type: Array as PropType<ClassBind[]>,\r\n            default: undefined,\r\n        },\r\n    },\r\n    setup(props) {\r\n        // inject parent field component if used inside one\r\n        const { parentField } = injectField();\r\n\r\n        const slots = useSlots();\r\n\r\n        return () => {\r\n            let first = true;\r\n            const slot = slots.default();\r\n            const children =\r\n                slot.length === 1 && Array.isArray(slot[0].children)\r\n                    ? slot[0].children\r\n                    : slot;\r\n            return h(\r\n                \"div\",\r\n                { class: props.classes },\r\n                children.map((element: any) => {\r\n                    let message;\r\n                    if (element.type === Comment || element.type === Text) {\r\n                        return element;\r\n                    }\r\n                    if (first) {\r\n                        message = parentField.value.fieldMessage;\r\n                        first = false;\r\n                    }\r\n                    return h(\r\n                        resolveComponent(\"OField\"),\r\n                        {\r\n                            variant: parentField.value.fieldVariant,\r\n                            message,\r\n                        },\r\n                        () => [element],\r\n                    );\r\n                }),\r\n            );\r\n        };\r\n    },\r\n});\r\n</script>\r\n","<script setup lang=\"ts\">\r\nimport { computed, ref, useSlots, watch, type PropType } from \"vue\";\r\n\r\nimport OFieldBody from \"./FieldBody.vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport { defineClasses, useMatchMedia } from \"@/composables\";\r\n\r\nimport { injectField, provideField } from \"../field/useFieldShare\";\r\n\r\nimport type { ComponentClass } from \"@/types\";\r\n\r\n/**\r\n * Fields are used to add functionality to controls and to attach/group components and elements together\r\n * @displayName Field\r\n * @style _field.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OField\",\r\n    configField: \"field\",\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /**\r\n     * Color of the field and help message, also adds a matching icon.\r\n     * Used by Input, Select and Autocomplete.\r\n     * @values primary, info, success, warning, danger, and any other custom color\r\n     */\r\n    variant: { type: String, default: undefined },\r\n    /** Field label */\r\n    label: { type: String, default: undefined },\r\n    /**\r\n     * Vertical size of input\r\n     * @values small, medium, large\r\n     */\r\n    labelSize: {\r\n        type: String,\r\n        default: () => getOption(\"field.labelsize\"),\r\n    },\r\n    /** Same as native for set on the label */\r\n    labelFor: { type: String, default: undefined },\r\n    /** Help message text */\r\n    message: { type: String, default: undefined },\r\n    /**\r\n     * Direct child components/elements of Field will be grouped horizontally\r\n     * (see which ones at the top of the page).\r\n     */\r\n    grouped: { type: Boolean, default: false },\r\n    /** Allow controls to fill up multiple lines, making it responsive */\r\n    groupMultiline: { type: Boolean, default: false },\r\n    /** Group label and control on the same line for horizontal forms */\r\n    horizontal: { type: Boolean, default: false },\r\n    /** Field automatically attach controls together */\r\n    addons: { type: Boolean, default: true },\r\n    /** Mobile breakpoint as max-width value */\r\n    mobileBreakpoint: {\r\n        type: String,\r\n        default: () => getOption(\"field.mobileBreakpoint\"),\r\n    },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class to align label and control in horizontal forms */\r\n    horizontalClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class when fields are grouped together */\r\n    groupedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class when fields fill up multiple lines */\r\n    groupMultilineClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for field label */\r\n    labelClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for field label size */\r\n    labelSizeClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for field label when horizontal */\r\n    labelHorizontalClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for field body */\r\n    bodyClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** \"Class for field body when horizontal */\r\n    bodyHorizontalClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for components automatically attached together when inside a field */\r\n    addonsClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for the field message */\r\n    messageClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the message field variant */\r\n    variantMessageClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the label field variant */\r\n    variantLabelClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of file component when on mobile */\r\n    mobileClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for the focused field */\r\n    focusedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for the filled field */\r\n    filledClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\r\n\r\n/** Set internal variant when prop change. */\r\nconst fieldVariant = ref(props.variant);\r\nwatch(\r\n    () => props.variant,\r\n    (v) => (fieldVariant.value = v),\r\n);\r\n\r\n/** Set internal message when prop change. */\r\nconst fieldMessage = ref(props.message);\r\nwatch(\r\n    () => props.message,\r\n    (v) => (fieldMessage.value = v),\r\n);\r\n\r\n/** this can be set from outside to update the focus state. */\r\nconst isFocused = ref(false);\r\n/** this can be set from outside to update the filled state. */\r\nconst isFilled = ref(false);\r\n\r\n// inject parent field component if used inside one\r\nconst { parentField } = injectField();\r\n\r\n/** Set parent message if we use Field in Field. */\r\nwatch(\r\n    () => fieldMessage.value,\r\n    (value) => {\r\n        if (parentField?.value?.hasInnerField) {\r\n            if (!parentField.value.fieldVariant)\r\n                parentField.value.setVariant(fieldVariant.value);\r\n            if (!parentField.value.fieldMessage)\r\n                parentField.value.setMessage(value);\r\n        }\r\n    },\r\n);\r\n\r\nconst slots = useSlots();\r\n\r\nconst hasLabel = computed(() => props.label || !!slots.label);\r\n\r\nconst hasMessage = computed(\r\n    () =>\r\n        !!(!parentField?.value?.hasInnerField && fieldMessage.value) ||\r\n        !!slots.message,\r\n);\r\n\r\nconst hasInnerField = computed(\r\n    () => props.grouped || props.groupMultiline || hasAddons(),\r\n);\r\n\r\nfunction hasAddons(): boolean {\r\n    if (!props.addons || props.horizontal) return false;\r\n\r\n    let renderedNode = 0;\r\n    // [Vue warn]: Slot \"default\" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.\r\n    const slot = slots.default();\r\n    if (slot) {\r\n        const children =\r\n            slot.length === 1 && Array.isArray(slot[0].children)\r\n                ? slot[0].children\r\n                : slot;\r\n        renderedNode = children.filter((n) => !!n).length;\r\n    }\r\n    return renderedNode > 1 && props.addons && !props.horizontal;\r\n}\r\n\r\n// --- Field Dependency Injection Feature ---\r\n\r\nconst rootRef = ref();\r\n\r\nfunction setFocus(value: boolean): void {\r\n    isFocused.value = value;\r\n}\r\nfunction setFilled(value: boolean): void {\r\n    isFilled.value = value;\r\n}\r\nfunction setVariant(value: string): void {\r\n    fieldVariant.value = value;\r\n}\r\nfunction setMessage(value: string): void {\r\n    fieldMessage.value = value;\r\n}\r\n\r\n// Provided data is a computed ref to enjure reactivity.\r\nconst provideData = computed(() => ({\r\n    $el: rootRef.value,\r\n    props,\r\n    hasInnerField: hasInnerField.value,\r\n    hasMessage: hasMessage.value,\r\n    fieldVariant: fieldVariant.value,\r\n    fieldMessage: fieldMessage.value,\r\n    setFocus,\r\n    setFilled,\r\n    setVariant,\r\n    setMessage,\r\n}));\r\n\r\n// Provide field component data via dependency injection.\r\nprovideField(provideData);\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"rootClass\", \"o-field\"],\r\n    [\r\n        \"horizontalClass\",\r\n        \"o-field--horizontal\",\r\n        null,\r\n        computed(() => !!props.horizontal),\r\n    ],\r\n    [\"mobileClass\", \"o-field--mobile\", null, isMobile],\r\n    [\"focusedClass\", \"o-field--focused\", null, isFocused],\r\n    [\"filledClass\", \"o-field--filled\", null, isFilled],\r\n);\r\n\r\nconst messageClasses = defineClasses(\r\n    [\"messageClass\", \"o-field__message\"],\r\n    [\r\n        \"variantMessageClass\",\r\n        \"o-field__message-\",\r\n        fieldVariant,\r\n        computed(() => !!fieldVariant.value),\r\n    ],\r\n);\r\n\r\nconst labelClasses = defineClasses(\r\n    [\"labelClass\", \"o-field__label\"],\r\n    [\r\n        \"labelSizeClass\",\r\n        \"o-field__label-\",\r\n        computed(() => props.labelSize),\r\n        computed(() => !!props.labelSize),\r\n    ],\r\n    [\r\n        \"variantLabelClass\",\r\n        \"o-field__label-\",\r\n        fieldVariant,\r\n        computed(() => !!fieldVariant.value),\r\n    ],\r\n);\r\n\r\nconst labelHorizontalClasses = defineClasses([\r\n    \"labelHorizontalClass\",\r\n    \"o-field__horizontal-label\",\r\n]);\r\n\r\nconst bodyClasses = defineClasses([\"bodyClass\", \"o-field__body\"]);\r\n\r\nconst bodyHorizontalClasses = defineClasses([\r\n    \"bodyHorizontalClass\",\r\n    \"o-field__horizontal-body\",\r\n]);\r\n\r\nconst innerFieldClasses = defineClasses(\r\n    [\"rootClass\", \"o-field\"],\r\n    [\r\n        \"groupMultilineClass\",\r\n        \"o-field--grouped-multiline\",\r\n        null,\r\n        computed(() => props.groupMultiline),\r\n    ],\r\n\r\n    [\"groupedClass\", \"o-field--grouped\", null, computed(() => props.grouped)],\r\n    [\r\n        \"addonsClass\",\r\n        \"o-field--addons\",\r\n        null,\r\n        computed(() => !props.grouped && hasAddons()),\r\n    ],\r\n);\r\n</script>\r\n\r\n<template>\r\n    <div ref=\"rootRef\" data-oruga=\"field\" :class=\"rootClasses\">\r\n        <div v-if=\"horizontal\" :class=\"labelHorizontalClasses\">\r\n            <label v-if=\"hasLabel\" :for=\"labelFor\" :class=\"labelClasses\">\r\n                <!--\r\n                    @slot Override the label\r\n                -->\r\n                <slot name=\"label\">{{ label }}</slot>\r\n            </label>\r\n        </div>\r\n        <template v-else>\r\n            <label v-if=\"hasLabel\" :for=\"labelFor\" :class=\"labelClasses\">\r\n                <!--\r\n                    @slot Override the label\r\n                -->\r\n                <slot name=\"label\">{{ label }}</slot>\r\n            </label>\r\n        </template>\r\n\r\n        <o-field-body v-if=\"horizontal\" :classes=\"bodyHorizontalClasses\">\r\n            <!--\r\n                @slot Default content\r\n            -->\r\n            <slot />\r\n        </o-field-body>\r\n\r\n        <div v-else-if=\"hasInnerField\" :class=\"bodyClasses\">\r\n            <div :class=\"innerFieldClasses\">\r\n                <!--\r\n                   @slot Default content\r\n                -->\r\n                <slot />\r\n            </div>\r\n        </div>\r\n\r\n        <template v-else>\r\n            <!--\r\n                @slot Default content\r\n            -->\r\n            <slot />\r\n        </template>\r\n\r\n        <p v-if=\"hasMessage && !horizontal\" :class=\"messageClasses\">\r\n            <!--\r\n                @slot Override the message\r\n            -->\r\n            <slot name=\"message\"> {{ fieldMessage }} </slot>\r\n        </p>\r\n    </div>\r\n</template>\r\n"],"names":["defineComponent","injectField","useSlots","h","Comment","Text","resolveComponent","useMatchMedia","ref","watch","computed","provideField","defineClasses"],"mappings":"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"}