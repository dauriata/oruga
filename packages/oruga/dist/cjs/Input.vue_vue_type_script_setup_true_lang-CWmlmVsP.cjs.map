{"version":3,"file":"Input.vue_vue_type_script_setup_true_lang-CWmlmVsP.cjs","sources":["../../src/components/input/Input.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport {\r\n    ref,\r\n    computed,\r\n    nextTick,\r\n    watch,\r\n    onMounted,\r\n    type StyleValue,\r\n    type PropType,\r\n} from \"vue\";\r\n\r\nimport OIcon from \"../icon/Icon.vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport { uuid } from \"@/utils/helpers\";\r\nimport { defineClasses, useInputHandler } from \"@/composables\";\r\n\r\nimport { injectField } from \"../field/useFieldShare\";\r\n\r\nimport type { ComponentClass } from \"@/types\";\r\n\r\n/**\r\n * Get user Input. Use with Field to access all functionalities\r\n * @displayName Input\r\n * @style _input.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OInput\",\r\n    configField: \"input\",\r\n    inheritAttrs: false,\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** @model */\r\n    modelValue: { type: [String, Number], default: \"\" },\r\n    /**\r\n     * Input type, like native\r\n     * @values Any native input type, and textarea\r\n     */\r\n    type: { type: String, default: \"text\" },\r\n    /**\r\n     * Size of the control\r\n     * @values small, medium, large\r\n     */\r\n    size: {\r\n        type: String,\r\n        default: () => getOption(\"input.size\"),\r\n    },\r\n    /**\r\n     * Color of the control\r\n     * @values primary, info, success, warning, danger, and any other custom color\r\n     */\r\n    variant: {\r\n        type: String,\r\n        default: () => getOption(\"input.variant\"),\r\n    },\r\n    /** Input placeholder */\r\n    placeholder: { type: String, default: undefined },\r\n    /** Makes input full width when inside a grouped or addon field */\r\n    expanded: { type: Boolean, default: false },\r\n    /** Makes the element rounded */\r\n    rounded: { type: Boolean, default: false },\r\n    /** Same as native disabled */\r\n    disabled: { type: Boolean, default: false },\r\n    /** Adds the reveal password functionality */\r\n    passwordReveal: { type: Boolean, default: false },\r\n    /** Same as native maxlength, plus character counter */\r\n    maxlength: { type: [Number, String], default: undefined },\r\n    /** Show character counter when maxlength prop is passed */\r\n    counter: {\r\n        type: Boolean,\r\n        default: () => getOption(\"input.counter\", false),\r\n    },\r\n    /** Automatically adjust height in textarea */\r\n    autosize: { type: Boolean, default: false },\r\n    /**\r\n     * Icon pack to use\r\n     * @values mdi, fa, fas and any other custom icon pack\r\n     */\r\n    iconPack: {\r\n        type: String,\r\n        default: () => getOption(\"input.iconPack\", undefined),\r\n    },\r\n    /** Icon to be shown */\r\n    icon: {\r\n        type: String,\r\n        default: () => getOption(\"input.icon\", undefined),\r\n    },\r\n    /** Makes the icon clickable */\r\n    iconClickable: { type: Boolean, default: false },\r\n    /** Icon to be added on the right side */\r\n    iconRight: {\r\n        type: String,\r\n        default: () => getOption(\"input.iconRight\", undefined),\r\n    },\r\n    /** Make the icon right clickable */\r\n    iconRightClickable: { type: Boolean, default: false },\r\n    /** Variant of right icon */\r\n    iconRightVariant: { type: String, default: undefined },\r\n    /** Add a button/icon to clear the inputed text */\r\n    clearable: {\r\n        type: Boolean,\r\n        default: () => getOption(\"input.clearable\", false),\r\n    },\r\n    /** Icon name to be added on the clear button */\r\n    clearIcon: {\r\n        type: String,\r\n        default: () => getOption(\"input.clearIcon\", \"close-circle\"),\r\n    },\r\n    /** Show status icon using field and variant prop */\r\n    statusIcon: {\r\n        type: Boolean,\r\n        default: () => getOption(\"statusIcon\", true),\r\n    },\r\n    /** Native options to use in HTML5 validation */\r\n    autocomplete: {\r\n        type: String,\r\n        default: () => getOption(\"input.autocomplete\", \"off\"),\r\n    },\r\n    /** Accessibility label to establish relationship between the checkbox and control label */\r\n    ariaLabelledby: { type: String, default: () => uuid() },\r\n    /** Enable html 5 native validation */\r\n    useHtml5Validation: {\r\n        type: Boolean,\r\n        default: () => getOption(\"useHtml5Validation\", true),\r\n    },\r\n    /** The message which is shown when a validation error occurs */\r\n    validationMessage: { type: String, default: undefined },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of input when expanded */\r\n    expandedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of input when type textarea */\r\n    textareaClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the left icon space inside the input */\r\n    iconLeftSpaceClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the right icon space inside the input */\r\n    iconRightSpaceClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the native input element */\r\n    inputClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of input when rounded */\r\n    roundedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of input when disabled */\r\n    disabledClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the left icon */\r\n    iconLeftClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the right icon */\r\n    iconRightClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class to display when a right icon is used */\r\n    hasIconRightClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the counter element */\r\n    counterClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the input size */\r\n    sizeClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the input variant */\r\n    variantClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * modelValue prop two-way binding\r\n     * @param value {string | number} updated modelValue prop\r\n     */\r\n    (e: \"update:modelValue\", value: string | number): void;\r\n    /**\r\n     * on input change event\r\n     * @param value {string | number} input value\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"input\", value: string | number, event: Event): void;\r\n    /**\r\n     * on input focus event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"focus\", event: Event): void;\r\n    /**\r\n     * on input blur event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"blur\", event: Event): void;\r\n    /**\r\n     * on input invalid event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"invalid\", event: Event): void;\r\n    /**\r\n     * on icon click event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"icon-click\", event: Event): void;\r\n    /**\r\n     * on icon right click event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"icon-right-click\", event: Event): void;\r\n}>();\r\n\r\n// --- Validation Feature ---\r\n\r\nconst inputRef = ref<HTMLInputElement>();\r\nconst textareaRef = ref<HTMLInputElement>();\r\n\r\nconst elementRef = computed<HTMLInputElement>(() =>\r\n    props.type === \"textarea\" ? textareaRef.value : inputRef.value,\r\n);\r\n\r\n// use form input functionalities\r\nconst {\r\n    checkHtml5Validity,\r\n    onBlur,\r\n    onFocus,\r\n    onInvalid,\r\n    setFocus,\r\n    isValid,\r\n    isFocused,\r\n} = useInputHandler(elementRef, emits, props);\r\n\r\n// inject parent field component if used inside one\r\nconst { parentField, statusVariant, statusVariantIcon } = injectField();\r\n\r\nconst vmodel = defineModel<string | number>({ default: \"\" });\r\n\r\n/** Get value length */\r\nconst valueLength = computed(() =>\r\n    typeof vmodel.value === \"string\"\r\n        ? vmodel.value.length\r\n        : typeof vmodel.value === \"number\"\r\n          ? vmodel.value.toString().length\r\n          : 0,\r\n);\r\n\r\nonMounted(() => {\r\n    /**\r\n     * When v-model is changed:\r\n     *  1. Set parent field filled state.\r\n     *  2. Resize textarea input\r\n     *  3. Check html5 valdiation\r\n     */\r\n    watch(\r\n        () => vmodel.value,\r\n        (value) => {\r\n            if (parentField?.value) parentField.value.setFilled(!!value);\r\n            if (props.autosize) resize();\r\n            if (!isValid.value) nextTick(() => checkHtml5Validity());\r\n        },\r\n        { immediate: true },\r\n    );\r\n});\r\n\r\nconst height = ref(\"auto\");\r\n\r\nfunction resize(): void {\r\n    height.value = \"auto\";\r\n    nextTick(() => {\r\n        if (!textareaRef.value) return;\r\n        const scrollHeight = textareaRef.value.scrollHeight;\r\n        height.value = scrollHeight + \"px\";\r\n    });\r\n}\r\n\r\n/** Computed inline styles for autoresize */\r\nconst computedStyles = computed(\r\n    (): StyleValue =>\r\n        props.autosize\r\n            ? {\r\n                  resize: \"none\",\r\n                  height: height.value,\r\n                  overflow: \"hidden\",\r\n              }\r\n            : {},\r\n);\r\n\r\nfunction onInput(event: Event): void {\r\n    emits(\"input\", (event.target as HTMLInputElement).value, event);\r\n}\r\n\r\n// --- Icon Feature ---\r\n\r\nconst hasIconRight = computed(() => {\r\n    return !!(\r\n        props.passwordReveal ||\r\n        (props.statusIcon && statusVariantIcon.value) ||\r\n        (props.clearable && vmodel.value && props.clearIcon) ||\r\n        props.iconRight\r\n    );\r\n});\r\n\r\nconst computedIconRight = computed(() => {\r\n    if (props.passwordReveal) {\r\n        return passwordVisibleIcon.value;\r\n    } else if (props.clearable && vmodel.value && props.clearIcon) {\r\n        return props.clearIcon;\r\n    } else if (props.iconRight) {\r\n        return props.iconRight;\r\n    }\r\n    return statusVariantIcon.value;\r\n});\r\n\r\nconst computedIconRightVariant = computed(() =>\r\n    props.passwordReveal || props.iconRight\r\n        ? props.iconRightVariant || props.variant || null\r\n        : statusVariant.value,\r\n);\r\n\r\nfunction iconClick(event: Event): void {\r\n    emits(\"icon-click\", event);\r\n    nextTick(() => setFocus());\r\n}\r\n\r\nfunction rightIconClick(event: Event): void {\r\n    if (props.passwordReveal) togglePasswordVisibility();\r\n    else if (props.clearable) vmodel.value = \"\";\r\n    if (props.iconRightClickable) {\r\n        emits(\"icon-right-click\", event);\r\n        nextTick(() => setFocus());\r\n    }\r\n}\r\n\r\n// --- Password Visability Feature ---\r\n\r\nconst isPasswordVisible = ref(false);\r\n\r\nconst inputType = computed(() => {\r\n    if (props.passwordReveal) {\r\n        return isPasswordVisible.value ? \"text\" : \"password\";\r\n    } else {\r\n        return props.type;\r\n    }\r\n});\r\n\r\n/** Current password-reveal icon name. */\r\nconst passwordVisibleIcon = computed(() =>\r\n    !isPasswordVisible.value ? \"eye\" : \"eye-off\",\r\n);\r\n\r\n/**\r\n * Toggle the visibility of a password-reveal input\r\n * by changing the type and focus the input right away.\r\n */\r\nfunction togglePasswordVisibility(): void {\r\n    isPasswordVisible.value = !isPasswordVisible.value;\r\n    nextTick(() => setFocus());\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"rootClass\", \"o-input__wrapper\"],\r\n    [\r\n        \"expandedClass\",\r\n        \"o-input__wrapper--expanded\",\r\n        null,\r\n        computed(() => props.expanded),\r\n    ],\r\n    [\r\n        \"hasIconRightClass\",\r\n        \"o-input__wrapper--has-icon-right\",\r\n        null,\r\n        hasIconRight,\r\n    ],\r\n);\r\n\r\nconst inputClasses = defineClasses(\r\n    [\"inputClass\", \"o-input\"],\r\n    [\"roundedClass\", \"o-input--rounded\", null, computed(() => props.rounded)],\r\n    [\r\n        \"sizeClass\",\r\n        \"o-input--\",\r\n        computed(() => props.size),\r\n        computed(() => !!props.size),\r\n    ],\r\n    [\r\n        \"variantClass\",\r\n        \"o-input--\",\r\n        computed(() => statusVariant.value || props.variant),\r\n        computed(() => !!statusVariant.value || !!props.variant),\r\n    ],\r\n    [\r\n        \"disabledClass\",\r\n        \"o-input--disabled\",\r\n        null,\r\n        computed(() => props.disabled),\r\n    ],\r\n    [\r\n        \"textareaClass\",\r\n        \"o-input__textarea\",\r\n        null,\r\n        computed(() => props.type === \"textarea\"),\r\n    ],\r\n    [\r\n        \"iconLeftSpaceClass\",\r\n        \"o-input--iconspace-left\",\r\n        null,\r\n        computed(() => !!props.icon),\r\n    ],\r\n    [\"iconRightSpaceClass\", \"o-input--iconspace-right\", null, hasIconRight],\r\n);\r\n\r\nconst iconLeftClasses = defineClasses([\"iconLeftClass\", \"o-input__icon-left\"]);\r\n\r\nconst iconRightClasses = defineClasses([\r\n    \"iconRightClass\",\r\n    \"o-input__icon-right\",\r\n]);\r\n\r\nconst counterClasses = defineClasses([\"counterClass\", \"o-input__counter\"]);\r\n\r\n// --- Expose Public Functionalities ---\r\n\r\n/** expose functionalities for programmatic usage */\r\ndefineExpose({ focus: setFocus });\r\n</script>\r\n\r\n<template>\r\n    <div data-oruga=\"input\" :class=\"rootClasses\">\r\n        <input\r\n            v-if=\"type !== 'textarea'\"\r\n            v-bind=\"$attrs\"\r\n            ref=\"inputRef\"\r\n            v-model=\"vmodel\"\r\n            :data-oruga-input=\"inputType\"\r\n            :type=\"inputType\"\r\n            :class=\"inputClasses\"\r\n            :maxlength=\"maxlength\"\r\n            :autocomplete=\"autocomplete\"\r\n            :placeholder=\"placeholder\"\r\n            :disabled=\"disabled\"\r\n            :aria-labelledby=\"ariaLabelledby\"\r\n            @blur=\"onBlur\"\r\n            @focus=\"onFocus\"\r\n            @invalid=\"onInvalid\"\r\n            @input=\"onInput\" />\r\n\r\n        <textarea\r\n            v-else\r\n            v-bind=\"$attrs\"\r\n            ref=\"textareaRef\"\r\n            v-model=\"vmodel\"\r\n            data-oruga-input=\"textarea\"\r\n            :class=\"inputClasses\"\r\n            :maxlength=\"maxlength\"\r\n            :style=\"computedStyles\"\r\n            :placeholder=\"placeholder\"\r\n            :disabled=\"disabled\"\r\n            :aria-labelledby=\"ariaLabelledby\"\r\n            @blur=\"onBlur\"\r\n            @focus=\"onFocus\"\r\n            @invalid=\"onInvalid\"\r\n            @input=\"onInput\" />\r\n\r\n        <o-icon\r\n            v-if=\"icon\"\r\n            :class=\"iconLeftClasses\"\r\n            :clickable=\"iconClickable\"\r\n            :icon=\"icon\"\r\n            :pack=\"iconPack\"\r\n            :size=\"size\"\r\n            @click=\"iconClick\" />\r\n\r\n        <o-icon\r\n            v-if=\"hasIconRight\"\r\n            :class=\"iconRightClasses\"\r\n            :clickable=\"passwordReveal || clearable || iconRightClickable\"\r\n            :icon=\"computedIconRight\"\r\n            :pack=\"iconPack\"\r\n            :size=\"size\"\r\n            :variant=\"computedIconRightVariant\"\r\n            both\r\n            @click=\"rightIconClick\" />\r\n\r\n        <small\r\n            v-if=\"maxlength && counter && isFocused && type !== 'number'\"\r\n            :class=\"counterClasses\">\r\n            {{ valueLength }} / {{ maxlength }}\r\n        </small>\r\n    </div>\r\n</template>\r\n"],"names":["ref","computed","useInputHandler","injectField","_useModel","onMounted","watch","nextTick","defineClasses"],"mappings":"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"}