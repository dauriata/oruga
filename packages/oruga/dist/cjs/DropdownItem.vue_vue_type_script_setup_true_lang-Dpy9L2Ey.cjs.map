{"version":3,"file":"DropdownItem.vue_vue_type_script_setup_true_lang-Dpy9L2Ey.cjs","sources":["../../src/components/dropdown/Dropdown.vue","../../src/components/dropdown/DropdownItem.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport {\r\n    computed,\r\n    nextTick,\r\n    ref,\r\n    watch,\r\n    onUnmounted,\r\n    type PropType,\r\n    type Component,\r\n} from \"vue\";\r\n\r\nimport PositionWrapper from \"../utils/PositionWrapper.vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport { vTrapFocus } from \"@/directives/trapFocus\";\r\nimport { toCssDimension, isMobileAgent } from \"@/utils/helpers\";\r\nimport { isClient } from \"@/utils/ssr\";\r\nimport {\r\n    unrefElement,\r\n    defineClasses,\r\n    useProviderParent,\r\n    useMatchMedia,\r\n    useEventListener,\r\n    useClickOutside,\r\n} from \"@/composables\";\r\n\r\nimport type { DropdownComponent } from \"./types\";\r\n\r\nimport type { ComponentClass, DynamicComponent } from \"@/types\";\r\n\r\n/**\r\n * Dropdowns are very versatile, can used as a quick menu or even like a select for discoverable content\r\n * @displayName Dropdown\r\n * @requires ./DropdownItem.vue\r\n * @style _dropdown.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"ODropdown\",\r\n    configField: \"dropdown\",\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** @model */\r\n    modelValue: {\r\n        type: [String, Number, Boolean, Object, Array],\r\n        default: undefined,\r\n    },\r\n    /** The active state of the dropdown, use v-model:active to make it two-way binding. */\r\n    active: { type: Boolean, default: false },\r\n    /** Trigger label, unnecessary when trgger slot is used */\r\n    label: { type: String, default: undefined },\r\n    /** Dropdown is disabled */\r\n    disabled: { type: Boolean, default: false },\r\n    /** Dropdown content (items) are shown inline, trigger is removed */\r\n    inline: { type: Boolean, default: false },\r\n    /** Dropdown content will be scrollable */\r\n    scrollable: { type: Boolean, default: false },\r\n    /** Max height of dropdown content */\r\n    maxHeight: {\r\n        type: [String, Number],\r\n        default: () => getOption(\"dropdown.maxHeight\", 200),\r\n    },\r\n    /**\r\n     * Position of the dropdown relative to the trigger\r\n     * @values auto, top, bottom, left, right, top-right, top-left, bottom-left, bottom-right\r\n     */\r\n    position: {\r\n        type: String,\r\n        default: () => getOption(\"dropdown.position\", \"bottom-left\"),\r\n        validator: (value: string) =>\r\n            [\r\n                \"auto\",\r\n                \"top\",\r\n                \"bottom\",\r\n                \"left\",\r\n                \"right\",\r\n                \"top-right\",\r\n                \"top-left\",\r\n                \"bottom-left\",\r\n                \"bottom-right\",\r\n            ].indexOf(value) > -1,\r\n    },\r\n    /** Dropdown content (items) are shown into a modal on mobile */\r\n    mobileModal: {\r\n        type: Boolean,\r\n        default: () => getOption(\"dropdown.mobileModal\", true),\r\n    },\r\n    /** Custom animation (transition name) */\r\n    animation: {\r\n        type: String,\r\n        default: () => getOption(\"dropdown.animation\", \"fade\"),\r\n    },\r\n    /** Allows multiple selections */\r\n    multiple: { type: Boolean, default: false },\r\n    /** Trap focus inside the dropdown. */\r\n    trapFocus: {\r\n        type: Boolean,\r\n        default: () => getOption(\"dropdown.trapFocus\", true),\r\n    },\r\n    /** Makes the component check if menu reached scroll start or end and emit scroll events. */\r\n    checkScroll: {\r\n        type: Boolean,\r\n        default: () => getOption(\"dropdown.checkScroll\", false),\r\n    },\r\n    /** Dropdown will be expanded (full-width) */\r\n    expanded: { type: Boolean, default: false },\r\n    /** HTML element ID of the dropdown menu element */\r\n    menuId: { type: String, default: null },\r\n    /** Tabindex of the dropdown menu element */\r\n    menuTabindex: { type: Number, default: null },\r\n    /** Dropdown menu tag name */\r\n    menuTag: {\r\n        type: [String, Object, Function] as PropType<DynamicComponent>,\r\n        default: () => getOption<DynamicComponent>(\"dropdown.menuTag\", \"div\"),\r\n    },\r\n    /** Dropdown trigger tag name */\r\n    triggerTag: {\r\n        type: [String, Object, Function] as PropType<DynamicComponent>,\r\n        default: () =>\r\n            getOption<DynamicComponent>(\"dropdown.triggerTag\", \"div\"),\r\n    },\r\n    /**\r\n     * Dropdown will be triggered by any events\r\n     * @values click, hover, contextmenu, focus\r\n     */\r\n    triggers: {\r\n        type: Array as PropType<string[]>,\r\n        default: () => getOption(\"dropdown.triggers\", [\"click\"]),\r\n        validator: (values: string[]) =>\r\n            values.filter(\r\n                (value) =>\r\n                    [\"click\", \"hover\", \"contextmenu\", \"focus\"].indexOf(value) >\r\n                    -1,\r\n            ).length === values.length,\r\n    },\r\n    /** Dropdown delay before it appears (number in ms) */\r\n    delay: { type: Number, default: undefined },\r\n    /**\r\n     * Dropdown close options (pressing escape, clicking the content or outside)\r\n     * @values true, false, escape, outside, content\r\n     */\r\n    closeable: {\r\n        type: [Array, Boolean] as PropType<string[] | boolean>,\r\n        default: () =>\r\n            getOption(\"dropdown.closeable\", [\"escape\", \"outside\", \"content\"]),\r\n    },\r\n    /** Set the tabindex attribute on the dropdown trigger div (-1 to prevent selection via tab key) */\r\n    tabindex: { type: Number, default: 0 },\r\n    /**\r\n     * Role attribute to be passed to the list container for better accessibility.\r\n     * Use menu only in situations where your dropdown is related to a navigation menu.\r\n     * @values list, listbox, menu, dialog\r\n     */\r\n    ariaRole: {\r\n        type: String,\r\n        default: getOption(\"dropdown.ariaRole\", \"list\"),\r\n        validator: (value: string) =>\r\n            [\"list\", \"listbox\", \"menu\", \"dialog\"].indexOf(value) > -1,\r\n    },\r\n    /** Mobile breakpoint as max-width value */\r\n    mobileBreakpoint: {\r\n        type: String,\r\n        default: () => getOption(\"dropdown.mobileBreakpoint\"),\r\n    },\r\n    /**\r\n     * Append the component to another part of the DOM.\r\n     * Set `true` to append the component to the body.\r\n     * In addition, any CSS selector string or an actual DOM node can be used.\r\n     */\r\n    teleport: {\r\n        type: [Boolean, String, Object],\r\n        default: () => getOption(\"dropdown.teleport\", false),\r\n    },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class when the dropdown is teleported */\r\n    teleportClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the trigger element */\r\n    triggerClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of dropdown menu when inline */\r\n    inlineClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the overlay when on mobile */\r\n    menuMobileOverlayClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the dropdown menu */\r\n    menuClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of dropdown menu position */\r\n    menuPositionClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of dropdown menu when active */\r\n    menuActiveClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of dropdown when on mobile */\r\n    mobileClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of dropdown when disabled */\r\n    disabledClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of dropdown when expanded */\r\n    expandedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for the root element indicating position of dropdown */\r\n    positionClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for the root element indicating whether the dropdown is open */\r\n    activeClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class for the root element when the dropdown is hoverable */\r\n    hoverableClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * modelValue prop two-way binding\r\n     * @param value {[String, Number, Boolean, Object, Array]} updated modelValue prop\r\n     */\r\n    (\r\n        e: \"update:modelValue\",\r\n        value: [string, number, boolean, object, Array<any>],\r\n    ): void;\r\n    /**\r\n     * active prop two-way binding\r\n     * @param value {boolean} updated active prop\r\n     */\r\n    (e: \"update:active\", value: boolean): void;\r\n    /**\r\n     * on change event - fired after modelValue:update\r\n     * @param value {any} selected value\r\n     */\r\n    (e: \"change\", value: any): void;\r\n    /**\r\n     * on close event\r\n     * @param method {string} close method\r\n     */\r\n    (e: \"close\", method: string): void;\r\n    /** the list inside the dropdown reached the start */\r\n    (e: \"scroll-start\"): void;\r\n    /** the list inside the dropdown reached it's end */\r\n    (e: \"scroll-end\"): void;\r\n}>();\r\n\r\nconst vmodel = defineModel<any>();\r\n\r\nconst isActive = defineModel<boolean>(\"active\");\r\n\r\nconst autoPosition = ref(props.position);\r\n\r\n/** update autoPosition on prop change */\r\nwatch(\r\n    () => props.position,\r\n    (v) => (autoPosition.value = v),\r\n);\r\n\r\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\r\n\r\n// check if mobile modal should be shown\r\nconst isMobileModal = computed(\r\n    () => isMobile.value && props.mobileModal && !props.inline,\r\n);\r\n\r\n// check if client is mobile native\r\nconst isMobileNative = computed(() => props.mobileModal && isMobileAgent.any());\r\n\r\nconst menuStyle = computed(() => ({\r\n    maxHeight: props.scrollable ? toCssDimension(props.maxHeight) : null,\r\n    overflow: props.scrollable ? \"auto\" : null,\r\n}));\r\n\r\nconst hoverable = computed(() => props.triggers.indexOf(\"hover\") >= 0);\r\n\r\n// --- Event Handler ---\r\n\r\nconst contentRef = ref<HTMLElement | Component>();\r\nconst triggerRef = ref<HTMLElement>();\r\n\r\nconst eventCleanups = [];\r\nlet timer: NodeJS.Timeout;\r\n\r\nwatch(\r\n    isActive,\r\n    (value) => {\r\n        // on active set event handler\r\n        if (value && isClient) {\r\n            setTimeout(() => {\r\n                if (cancelOptions.value.indexOf(\"outside\") >= 0) {\r\n                    // set outside handler\r\n                    eventCleanups.push(\r\n                        useClickOutside(contentRef, onClickedOutside, [\r\n                            triggerRef,\r\n                        ]),\r\n                    );\r\n                }\r\n\r\n                if (cancelOptions.value.indexOf(\"escape\") >= 0) {\r\n                    // set keyup handler\r\n                    eventCleanups.push(\r\n                        useEventListener(\"keyup\", onKeyPress, document, {\r\n                            immediate: true,\r\n                        }),\r\n                    );\r\n                }\r\n            });\r\n        } else if (!value) {\r\n            // on close cleanup event handler\r\n            eventCleanups.forEach((fn) => fn());\r\n            eventCleanups.length = 0;\r\n        }\r\n    },\r\n    { immediate: true },\r\n);\r\n\r\nonUnmounted(() => {\r\n    // on close cleanup event handler\r\n    eventCleanups.forEach((fn) => fn());\r\n    eventCleanups.length = 0;\r\n});\r\n\r\nconst cancelOptions = computed(() =>\r\n    typeof props.closeable === \"boolean\"\r\n        ? props.closeable\r\n            ? [\"escape\", \"outside\", \"content\"]\r\n            : []\r\n        : props.closeable,\r\n);\r\n\r\n/** Close dropdown if clicked outside. */\r\nfunction onClickedOutside(): void {\r\n    if (!isActive.value || props.inline) return;\r\n    if (cancelOptions.value.indexOf(\"outside\") < 0) return;\r\n    emits(\"close\", \"outside\");\r\n    isActive.value = false;\r\n}\r\n\r\n/** Keypress event that is bound to the document */\r\nfunction onKeyPress(event: KeyboardEvent): void {\r\n    if (isActive.value && (event.key === \"Escape\" || event.key === \"Esc\")) {\r\n        if (cancelOptions.value.indexOf(\"escape\") < 0) return;\r\n        emits(\"close\", \"escape\");\r\n        isActive.value = false;\r\n    }\r\n}\r\n\r\nfunction onClick(): void {\r\n    if (props.triggers.indexOf(\"click\") < 0) return;\r\n    toggle();\r\n}\r\n\r\nfunction onContextMenu(event: MouseEvent): void {\r\n    if (props.triggers.indexOf(\"contextmenu\") < 0) return;\r\n    event.preventDefault();\r\n    open();\r\n}\r\n\r\nfunction onFocus(): void {\r\n    if (props.triggers.indexOf(\"focus\") < 0) return;\r\n    open();\r\n}\r\n\r\nconst isHovered = ref(false);\r\nfunction onHover(): void {\r\n    if (!isMobileNative.value && props.triggers.indexOf(\"hover\") >= 0) {\r\n        isHovered.value = true;\r\n        open();\r\n    }\r\n}\r\nfunction onHoverLeave(): void {\r\n    if (!isMobileNative.value && isHovered.value) {\r\n        isHovered.value = false;\r\n        onClose();\r\n    }\r\n}\r\n\r\n/** Toggle dropdown if it's not disabled. */\r\nfunction toggle(): void {\r\n    if (props.disabled) return;\r\n    if (isActive.value) isActive.value = !isActive.value;\r\n    // if not active, toggle after clickOutside event\r\n    // this fixes toggling programmatic\r\n    else nextTick(() => (isActive.value = !isActive.value));\r\n}\r\n\r\nfunction open(): void {\r\n    if (props.disabled) return;\r\n    if (props.delay) {\r\n        timer = setTimeout(() => {\r\n            isActive.value = true;\r\n            timer = null;\r\n        }, props.delay);\r\n    } else {\r\n        isActive.value = true;\r\n    }\r\n}\r\n\r\nfunction onClose(): void {\r\n    if (cancelOptions.value.indexOf(\"content\") < 0) return;\r\n    emits(\"close\", \"content\");\r\n    isActive.value = !props.closeable;\r\n    if (timer && props.closeable) clearTimeout(timer);\r\n}\r\n\r\n// --- InfitiveScroll Feature ---\r\n\r\nif (isClient && props.checkScroll)\r\n    useEventListener(\"scroll\", checkDropdownScroll, contentRef);\r\n\r\n/** Check if the scroll list inside the dropdown reached the top or it's end. */\r\nfunction checkDropdownScroll(): void {\r\n    const dropdown = unrefElement(contentRef.value);\r\n    if (dropdown.clientHeight !== dropdown.scrollHeight) {\r\n        if (\r\n            dropdown.scrollTop + dropdown.clientHeight >=\r\n            dropdown.scrollHeight\r\n        ) {\r\n            emits(\"scroll-end\");\r\n        } else if (dropdown.scrollTop <= 0) {\r\n            emits(\"scroll-start\");\r\n        }\r\n    }\r\n}\r\n\r\n// --- Dependency Injection Feature ---\r\n\r\n/**\r\n * Click listener from DropdownItem.\r\n *   1. Set new selected item.\r\n *   2. Emit input event to update the user v-model.\r\n *   3. Close the dropdown.\r\n */\r\nfunction selectItem(value: any): void {\r\n    if (props.multiple) {\r\n        if (vmodel.value && Array.isArray(vmodel.value)) {\r\n            if (vmodel.value.indexOf(value) === -1) {\r\n                // add a value\r\n                vmodel.value = [...vmodel.value, value];\r\n            } else {\r\n                // remove a value\r\n                vmodel.value = vmodel.value.filter((val) => val !== value);\r\n            }\r\n        } else {\r\n            // init new value array\r\n            vmodel.value = [value];\r\n        }\r\n        // emit change after vmodel has changed\r\n        nextTick(() => emits(\"change\", vmodel.value));\r\n    } else {\r\n        if (vmodel.value !== value) {\r\n            // update a single value\r\n            vmodel.value = value;\r\n            // emit change after vmodel has changed\r\n            nextTick(() => emits(\"change\", vmodel.value));\r\n        }\r\n    }\r\n    if (!props.multiple) {\r\n        if (cancelOptions.value.indexOf(\"content\") < 0) return;\r\n        emits(\"close\", \"content\");\r\n        isActive.value = false;\r\n        isHovered.value = false;\r\n    }\r\n}\r\n\r\n// Provided data is a computed ref to enjure reactivity.\r\nconst provideData = computed<DropdownComponent>(() => ({\r\n    props,\r\n    selected: vmodel.value,\r\n    selectItem,\r\n}));\r\n\r\n/** Provide functionalities and data to child item components */\r\nuseProviderParent(contentRef, { data: provideData });\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"rootClass\", \"o-drop\"],\r\n    [\"disabledClass\", \"o-drop--disabled\", null, computed(() => props.disabled)],\r\n    [\"expandedClass\", \"o-drop--expanded\", null, computed(() => props.expanded)],\r\n    [\"inlineClass\", \"o-drop--inline\", null, computed(() => props.inline)],\r\n    [\r\n        \"mobileClass\",\r\n        \"o-drop--mobile\",\r\n        null,\r\n        computed(() => isMobileModal.value && !hoverable.value),\r\n    ],\r\n    [\r\n        \"positionClass\",\r\n        \"o-drop--position-\",\r\n        autoPosition,\r\n        computed(() => !!autoPosition.value),\r\n    ],\r\n    [\r\n        \"activeClass\",\r\n        \"o-drop--active\",\r\n        null,\r\n        computed(() => isActive.value || props.inline),\r\n    ],\r\n    [\"hoverableClass\", \"o-drop--hoverable\", null, hoverable],\r\n);\r\n\r\nconst triggerClasses = defineClasses([\"triggerClass\", \"o-drop__trigger\"]);\r\n\r\nconst positionWrapperClasses = defineClasses([\r\n    \"teleportClass\",\r\n    \"o-drop--teleport\",\r\n    null,\r\n    computed(() => !!props.teleport),\r\n]);\r\n\r\nconst menuMobileOverlayClasses = defineClasses([\r\n    \"menuMobileOverlayClass\",\r\n    \"o-drop__overlay\",\r\n]);\r\n\r\nconst menuClasses = defineClasses(\r\n    [\"menuClass\", \"o-drop__menu\"],\r\n    [\r\n        \"menuPositionClass\",\r\n        \"o-drop__menu--\",\r\n        autoPosition,\r\n        computed(() => !!autoPosition.value),\r\n    ],\r\n    [\r\n        \"menuActiveClass\",\r\n        \"o-drop__menu--active\",\r\n        null,\r\n        computed(() => isActive.value || props.inline),\r\n    ],\r\n);\r\n\r\n// --- Expose Public Functionalities ---\r\n\r\n/** expose functionalities for programmatic usage */\r\ndefineExpose({ $trigger: triggerRef, $content: contentRef });\r\n</script>\r\n\r\n<template>\r\n    <div\r\n        data-oruga=\"dropdown\"\r\n        :class=\"rootClasses\"\r\n        @mouseleave=\"onHoverLeave\"\r\n        @focusout=\"onHoverLeave\">\r\n        <component\r\n            :is=\"triggerTag\"\r\n            v-if=\"!inline\"\r\n            ref=\"triggerRef\"\r\n            :tabindex=\"disabled ? null : tabindex\"\r\n            :class=\"triggerClasses\"\r\n            :aria-haspopup=\"ariaRole === 'list' ? true : ariaRole\"\r\n            @click=\"onClick\"\r\n            @contextmenu=\"onContextMenu\"\r\n            @mouseenter=\"onHover\"\r\n            @focus.capture=\"onFocus\">\r\n            <!--\r\n                @slot Override the trigger element, default is label prop\r\n                @binding {boolean} active - dropdown active state\r\n            -->\r\n            <slot name=\"trigger\" :active=\"isActive\">\r\n                {{ label }}\r\n            </slot>\r\n        </component>\r\n\r\n        <PositionWrapper\r\n            v-slot=\"{ setContent }\"\r\n            v-model:position=\"autoPosition\"\r\n            :teleport=\"teleport\"\r\n            :class=\"[...rootClasses, ...positionWrapperClasses]\"\r\n            :trigger=\"triggerRef\"\r\n            :disabled=\"!isActive\"\r\n            default-position=\"bottom\"\r\n            :disable-positioning=\"!isMobileModal\">\r\n            <transition :name=\"animation\">\r\n                <div\r\n                    v-if=\"isMobileModal\"\r\n                    v-show=\"isActive\"\r\n                    :tabindex=\"-1\"\r\n                    :class=\"menuMobileOverlayClasses\"\r\n                    :aria-hidden=\"disabled || !isActive\" />\r\n            </transition>\r\n\r\n            <transition :name=\"animation\">\r\n                <component\r\n                    :is=\"menuTag\"\r\n                    v-show=\"(!disabled && (isActive || isHovered)) || inline\"\r\n                    :id=\"menuId\"\r\n                    :ref=\"(el) => (contentRef = setContent(el))\"\r\n                    v-trap-focus=\"trapFocus\"\r\n                    :tabindex=\"menuTabindex\"\r\n                    :class=\"menuClasses\"\r\n                    :style=\"menuStyle\"\r\n                    :role=\"ariaRole\"\r\n                    :aria-hidden=\"disabled || !isActive\"\r\n                    :aria-modal=\"!inline && trapFocus\">\r\n                    <!--\r\n                        @slot Place dropdown items here\r\n                        @binding {boolean} active - dropdown active state\r\n                        @binding {boolean} toggle - toggle active state function\r\n                    -->\r\n                    <slot :active=\"isActive\" :toggle=\"toggle\" />\r\n                </component>\r\n            </transition>\r\n        </PositionWrapper>\r\n    </div>\r\n</template>\r\n","<script setup lang=\"ts\" generic=\"T\">\r\nimport { computed, type PropType } from \"vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport { uuid, isEqual } from \"@/utils/helpers\";\r\nimport { defineClasses, useProviderChild } from \"@/composables\";\r\n\r\nimport type { DropdownComponent } from \"./types\";\r\nimport type { ComponentClass, DynamicComponent } from \"@/types\";\r\n\r\n/**\r\n * @displayName Dropdown Item\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"ODropdownItem\",\r\n    configField: \"dropdown\",\r\n});\r\n\r\nconst props = defineProps({\r\n    /** The value that will be returned on events and v-model - default is a uuid */\r\n    value: {\r\n        type: [String, Number, Boolean, Object, Array] as PropType<T>,\r\n        default: undefined, // () => uuid(),\r\n    },\r\n    /** Item label, unnecessary when default slot is used */\r\n    label: { type: String, default: undefined },\r\n    /** Item is disabled */\r\n    disabled: { type: Boolean, default: false },\r\n    /** Item is clickable and emit an event */\r\n    clickable: { type: Boolean, default: true },\r\n    /** Dropdown item tag name */\r\n    tag: {\r\n        type: [String, Object, Function] as PropType<DynamicComponent>,\r\n        default: () => getOption<DynamicComponent>(\"dropdown.itemTag\", \"div\"),\r\n    },\r\n    /** Set the tabindex attribute on the dropdown item div (-1 to prevent selection via tab key) */\r\n    tabindex: { type: [Number, String], default: 0 },\r\n    /**\r\n     * Role attribute to be passed to the list item for better accessibility.\r\n     * Use menuitem only in situations where your dropdown is related to a navigation menu.\r\n     * @values listitem, menuitem, button\r\n     */\r\n    ariaRole: {\r\n        type: String,\r\n        default: getOption(\"dropdown.itemAriaRole\", \"listitem\"),\r\n    },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the dropdown item */\r\n    itemClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the dropdown item when active  */\r\n    itemActiveClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the dropdown item when clickable */\r\n    itemClickableClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the dropdown item when disabled */\r\n    itemDisabledClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * onclick event\r\n     * @param value {[String, Number, Boolean, Object, Array]} value prop data\r\n     * @param event {event} Native Event\r\n     */\r\n    (e: \"click\", value: T, event: Event): void;\r\n}>();\r\n\r\nconst itemValue = computed(() => (props.value || uuid()) as T);\r\n\r\n// Inject functionalities and data from the parent component\r\nconst { parent } = useProviderChild<DropdownComponent<T>>();\r\n\r\nconst isClickable = computed(\r\n    () => !parent.value.props.disabled && !props.disabled && props.clickable,\r\n);\r\n\r\nconst isActive = computed(() => {\r\n    if (parent.value.selected === null) return false;\r\n    if (parent.value.props.multiple && Array.isArray(parent.value.selected))\r\n        return parent.value.selected.some((selected) =>\r\n            isEqual(itemValue.value, selected),\r\n        );\r\n    return isEqual(itemValue.value, parent.value.selected);\r\n});\r\n\r\n/** Click listener, select the item. */\r\nfunction selectItem(event: Event): void {\r\n    if (!isClickable.value) return;\r\n    parent.value.selectItem(itemValue.value);\r\n    emits(\"click\", itemValue.value, event);\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"itemClass\", \"o-drop__item\"],\r\n    [\r\n        \"itemDisabledClass\",\r\n        \"o-drop__item--disabled\",\r\n        null,\r\n        computed(() => parent.value.props.disabled || props.disabled),\r\n    ],\r\n    [\"itemActiveClass\", \"o-drop__item--active\", null, isActive],\r\n    [\"itemClickableClass\", \"o-drop__item--clickable\", null, isClickable],\r\n);\r\n</script>\r\n\r\n<template>\r\n    <component\r\n        :is=\"tag\"\r\n        :class=\"rootClasses\"\r\n        :role=\"ariaRole\"\r\n        :tabindex=\"tabindex\"\r\n        data-oruga=\"dropdown-item\"\r\n        @click=\"selectItem\">\r\n        <!--\r\n            @slot Override the label, default is label prop \r\n        -->\r\n        <slot>{{ label }}</slot>\r\n    </component>\r\n</template>\r\n"],"names":["_useModel","ref","watch","useMatchMedia","computed","isMobileAgent","toCssDimension","isClient","useClickOutside","useEventListener","onUnmounted","nextTick","unrefElement","useProviderParent","defineClasses","uuid","useProviderChild","isEqual"],"mappings":"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"}