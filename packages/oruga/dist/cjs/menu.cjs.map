{"version":3,"file":"menu.cjs","sources":["../../src/components/menu/Menu.vue","../../src/components/menu/MenuItem.vue","../../src/components/menu/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { ref, computed, toRaw, type PropType } from \"vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport {\r\n    defineClasses,\r\n    useProviderParent,\r\n    type ProviderItem,\r\n} from \"@/composables\";\r\n\r\nimport type { MenuComponent, MenuItemComponent } from \"./types\";\r\nimport type { ComponentClass } from \"@/types\";\r\n\r\n/**\r\n * A simple menu\r\n * @displayName Menu\r\n * @requires ./MenuItem.vue\r\n * @style _menu.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OMenu\",\r\n    configField: \"menu\",\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** Menu label */\r\n    label: { type: String, default: undefined },\r\n    /** If sub menu items are collapsible */\r\n    accordion: { type: Boolean, default: true },\r\n    /** If the menu items are clickable */\r\n    activable: { type: Boolean, default: true },\r\n    /**\r\n     * Role attribute to be passed to the list container for better accessibility.\r\n     * Use menu only in situations where your dropdown is related to a navigation menu.\r\n     * @values list, menu, dialog\r\n     */\r\n    ariaRole: {\r\n        type: String,\r\n        default: getOption(\"menu.ariaRole\", \"menu\"),\r\n        validator: (value: string) =>\r\n            [\"menu\", \"list\", \"dialog\"].indexOf(value) > -1,\r\n    },\r\n    /** Icon to be shown */\r\n    icon: { type: String, default: undefined },\r\n    /**\r\n     * Icon pack to use\r\n     * @values mdi, fa, fas and any other custom icon pack\r\n     */\r\n    iconPack: {\r\n        type: String,\r\n        default: () => getOption(\"menu.iconPack\"),\r\n    },\r\n    /**\r\n     * Icon size\r\n     * @values small, medium, large\r\n     */\r\n    iconSize: {\r\n        type: String,\r\n        default: () => getOption(\"menu.iconSize\"),\r\n    },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the menu list */\r\n    listClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the menu list label */\r\n    listLabelClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst rootRef = ref();\r\n\r\n// Provided data is a computed ref to enjure reactivity.\r\nconst provideData = computed<MenuComponent>(() => ({\r\n    activable: props.activable,\r\n    accordion: props.accordion,\r\n    resetMenu,\r\n}));\r\n\r\n/** Provide functionalities and data to child item components */\r\nconst { childItems } = useProviderParent<MenuItemComponent>(rootRef, {\r\n    data: provideData,\r\n});\r\n\r\nfunction resetMenu(excludedItems: ProviderItem[] = []): void {\r\n    childItems.value.forEach((item) => {\r\n        if (!excludedItems.includes(toRaw(item))) (item.data as any as MenuItemComponent).reset();\r\n    });\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses([\"rootClass\", \"o-menu\"]);\r\n\r\nconst listClasses = defineClasses([\"listClass\", \"o-menu__list\"]);\r\n\r\nconst labelClasses = defineClasses([\"listLabelClass\", \"o-menu__label\"]);\r\n</script>\r\n\r\n<template>\r\n    <div ref=\"rootRef\" data-oruga=\"menu\" :class=\"rootClasses\">\r\n        <div v-if=\"label || $slots.label\" :class=\"labelClasses\">\r\n            <!-- \r\n                @slot Override icon and label\r\n            -->\r\n            <slot name=\"label\">\r\n                <o-icon\r\n                    v-if=\"icon\"\r\n                    :icon=\"icon\"\r\n                    :pack=\"iconPack\"\r\n                    :size=\"iconSize\" />\r\n                <span>{{ label }}</span>\r\n            </slot>\r\n        </div>\r\n        <ul :class=\"listClasses\" :role=\"ariaRole\">\r\n            <!--\r\n                @slot Place menu items here \r\n            -->\r\n            <slot />\r\n        </ul>\r\n    </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { ref, computed, toRaw, type PropType } from \"vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport {\r\n    defineClasses,\r\n    usePropBinding,\r\n    useProviderChild,\r\n    useProviderParent,\r\n    type ProviderItem,\r\n} from \"@/composables\";\r\n\r\nimport type {\r\n    MenuComponent,\r\n    MenuItemComponent,\r\n    MenuItemProvider,\r\n} from \"./types\";\r\nimport type { ComponentClass, DynamicComponent } from \"@/types\";\r\n\r\n/**\r\n * A menu list item\r\n * @displayName Menu Item\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OMenuItem\",\r\n    configField: \"menu\",\r\n    inheritAttrs: false,\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** The active state of the menu item, use v-model:active to make it two-way binding. */\r\n    active: { type: Boolean, default: false },\r\n    /** Menu item label */\r\n    label: { type: String, default: undefined },\r\n    /** Menu item will be expanded */\r\n    expanded: { type: Boolean, default: false },\r\n    /** Menu item will be disabled */\r\n    disabled: { type: Boolean, default: false },\r\n    /** Icon to be shown */\r\n    icon: { type: String, default: undefined },\r\n    /**\r\n     * Icon pack to use\r\n     * @values mdi, fa, fas and any other custom icon pack\r\n     */\r\n    iconPack: {\r\n        type: String,\r\n        default: () => getOption(\"menu.iconPack\"),\r\n    },\r\n    /**\r\n     * Icon size\r\n     * @values small, medium, large\r\n     */\r\n    iconSize: {\r\n        type: String,\r\n        default: () => getOption(\"menu.iconSize\"),\r\n    },\r\n    /** Transition name to apply on menu list */\r\n    animation: {\r\n        type: String,\r\n        default: () => getOption(\"menu.animation\", \"slide\"),\r\n    },\r\n    /** Menu item tag name */\r\n    tag: {\r\n        type: [String, Object, Function] as PropType<DynamicComponent>,\r\n        default: () => getOption<DynamicComponent>(\"menu.menuTag\", \"a\"),\r\n    },\r\n    /**\r\n     * Role attribute to be passed to the list item for better accessibility.\r\n     * @values listitem, menuitem\r\n     */\r\n    ariaRole: {\r\n        type: String,\r\n        default: getOption(\"menu.itemAriaRole\", \"menuitem\"),\r\n    },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the menu item */\r\n    itemClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the active menu item */\r\n    itemActiveClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the disabled menu item */\r\n    itemDisabledClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the icon of menu item */\r\n    itemIconTextClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the menu item when is a submenu */\r\n    itemSubmenuClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the root element of menu item */\r\n    itemWrapperClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * modelValue prop two-way binding\r\n     * @param value {boolean} updated modelValue prop\r\n     */\r\n    (e: \"update:modelValue\", value: boolean): void;\r\n    /**\r\n     * expanded prop two-way binding\r\n     * @param value {boolean} updated expanded prop\r\n     */\r\n    (e: \"update:expanded\", value: boolean): void;\r\n}>();\r\n\r\nconst providedData = computed<MenuItemComponent>(() => ({\r\n    reset,\r\n}));\r\n\r\n// Inject functionalities and data from the parent menu component\r\nconst { parent, item } = useProviderChild<MenuComponent>({\r\n    data: providedData,\r\n});\r\n\r\n// Inject functionalities and data from the parent menu-item component\r\nconst providedItem = useProviderChild<MenuItemProvider>({\r\n    key: \"menu-item\",\r\n    needParent: false,\r\n});\r\n\r\nconst itemParent = computed(() => providedItem.parent?.value);\r\n\r\nconst isActive = usePropBinding(\"active\", props, emits, { passive: true });\r\n\r\nconst isExpanded = usePropBinding(\"expanded\", props, emits, { passive: true });\r\n\r\n/** template identifier */\r\nconst identifier = computed(() =>\r\n    itemParent.value\r\n        ? `menu-item-${providedItem.item.value.identifier}`\r\n        : `menu-${item.value.identifier}`,\r\n);\r\n\r\nfunction onClick(): void {\r\n    if (props.disabled) return;\r\n    triggerReset();\r\n    isExpanded.value = props.expanded || !isExpanded.value;\r\n    if (parent.value.activable) isActive.value = true;\r\n}\r\n\r\nfunction triggerReset(child?: ProviderItem): void {\r\n    // The point of this method is to collect references to the clicked item and any parent,\r\n    // this way we can skip resetting those elements.\r\n    if (itemParent.value?.triggerReset) {\r\n        itemParent.value.triggerReset(toRaw(item.value));\r\n    }\r\n    // else if not a sub item reset parent menu\r\n    else if (parent.value.resetMenu) {\r\n        parent.value.resetMenu([toRaw(item.value), child]);\r\n    }\r\n}\r\n\r\nfunction reset(): void {\r\n    if (parent.value.accordion) isExpanded.value = false;\r\n    if (parent.value.activable) isActive.value = false;\r\n}\r\n\r\nconst rootRef = ref();\r\n\r\n// Provided data is a computed ref to enjure reactivity.\r\nconst provideData = computed<MenuItemProvider>(() => ({\r\n    triggerReset,\r\n}));\r\n\r\n/** Provide functionalities and data to child item components */\r\nuseProviderParent(rootRef, { key: \"menu-item\", data: provideData });\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst itemClasses = defineClasses(\r\n    [\"itemClass\", \"o-menu__item\"],\r\n    [\"itemActiveClass\", \"o-menu__item--active\", null, isActive],\r\n    [\r\n        \"itemDisabledClass\",\r\n        \"o-menu__item--disabled\",\r\n        null,\r\n        computed(() => props.disabled),\r\n    ],\r\n    [\r\n        \"itemIconTextClass\",\r\n        \"o-menu__item--icon-text\",\r\n        null,\r\n        computed(() => !!props.icon),\r\n    ],\r\n);\r\n\r\nconst submenuClasses = defineClasses([\r\n    \"itemSubmenuClass\",\r\n    \"o-menu__item__submenu\",\r\n]);\r\n\r\nconst wrapperClasses = defineClasses([\r\n    \"itemWrapperClass\",\r\n    \"o-menu__item__wrapper\",\r\n]);\r\n</script>\r\n\r\n<template>\r\n    <li\r\n        ref=\"rootRef\"\r\n        :role=\"ariaRole\"\r\n        :class=\"wrapperClasses\"\r\n        :data-id=\"identifier\"\r\n        data-oruga=\"menu-item\"\r\n        aria-roledescription=\"item\">\r\n        <component\r\n            :is=\"tag\"\r\n            v-bind=\"$attrs\"\r\n            :class=\"itemClasses\"\r\n            @click=\"onClick()\">\r\n            <o-icon\r\n                v-if=\"icon\"\r\n                :icon=\"icon\"\r\n                :pack=\"iconPack\"\r\n                :size=\"iconSize\" />\r\n            <!-- \r\n                @slot Override label\r\n                @binding {boolean} expanded - item expanded state\r\n                @binding {boolean} active - item active state\r\n            -->\r\n            <slot name=\"label\" :expanded=\"isExpanded\" :active=\"isActive\">\r\n                <span>{{ label }}</span>\r\n            </slot>\r\n        </component>\r\n\r\n        <!-- sub menu items -->\r\n        <template v-if=\"$slots.default\">\r\n            <transition :name=\"animation\">\r\n                <ul v-show=\"isExpanded\" :class=\"submenuClasses\">\r\n                    <!--\r\n                        @slot Place menu items here \r\n                    -->\r\n                    <slot />\r\n                </ul>\r\n            </transition>\r\n        </template>\r\n    </li>\r\n</template>\r\n","import type { App, Plugin } from \"vue\";\r\n\r\nimport Menu from \"./Menu.vue\";\r\nimport MenuItem from \"./MenuItem.vue\";\r\n\r\nimport { registerComponent } from \"@/utils/plugins\";\r\n\r\n/** export menu plugin */\r\nexport default {\r\n    install(app: App) {\r\n        registerComponent(app, Menu);\r\n        registerComponent(app, MenuItem);\r\n    },\r\n} as Plugin;\r\n\r\n/** export menu components */\r\nexport { Menu as OMenu, MenuItem as OMenuItem };\r\n"],"names":["ref","computed","useProviderParent","toRaw","defineClasses","useProviderChild","usePropBinding","registerComponent","Menu","MenuItem"],"mappings":"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"}