{"version":3,"file":"Timepicker.vue_vue_type_script_setup_true_lang-De78V57H.cjs","sources":["../../src/components/timepicker/useTimepickerMixins.ts","../../src/components/timepicker/Timepicker.vue"],"sourcesContent":["import { computed } from \"vue\";\r\nimport { matchWithGroups } from \"../datepicker/utils\";\r\nimport type { TimepickerProps } from \"./types\";\r\n\r\nconst AM = \"AM\";\r\nconst PM = \"PM\";\r\nconst HOUR_FORMAT_24 = \"24\";\r\nconst HOUR_FORMAT_12 = \"12\";\r\n\r\nexport function useTimepickerMixins(props: TimepickerProps) {\r\n    const localeOptions = computed(\r\n        () =>\r\n            new Intl.DateTimeFormat(props.locale, {\r\n                hour: \"numeric\",\r\n                minute: \"numeric\",\r\n                second: props.enableSeconds ? \"numeric\" : undefined,\r\n            }).resolvedOptions() as Intl.DateTimeFormatOptions,\r\n    );\r\n\r\n    const dtf = computed(\r\n        () =>\r\n            new Intl.DateTimeFormat(props.locale, {\r\n                hour: localeOptions.value.hour || \"numeric\",\r\n                minute: localeOptions.value.minute || \"numeric\",\r\n                second: props.enableSeconds\r\n                    ? localeOptions.value.second || \"numeric\"\r\n                    : undefined,\r\n                hourCycle: !isHourFormat24.value ? \"h12\" : \"h23\",\r\n            }),\r\n    );\r\n\r\n    const computedHourFormat = computed(\r\n        () =>\r\n            props.hourFormat ||\r\n            (localeOptions.value.hour12 ? HOUR_FORMAT_12 : HOUR_FORMAT_24),\r\n    );\r\n\r\n    const isHourFormat24 = computed(\r\n        () => computedHourFormat.value === HOUR_FORMAT_24,\r\n    );\r\n\r\n    const sampleTime = computed(() => {\r\n        const d = props.timeCreator();\r\n        d.setHours(10);\r\n        d.setSeconds(0);\r\n        d.setMinutes(0);\r\n        d.setMilliseconds(0);\r\n        return d;\r\n    });\r\n\r\n    const amString = computed(() => {\r\n        if (\r\n            dtf.value.formatToParts &&\r\n            typeof dtf.value.formatToParts === \"function\"\r\n        ) {\r\n            const d = sampleTime.value;\r\n            d.setHours(10);\r\n            const dayPeriod = dtf.value\r\n                .formatToParts(d)\r\n                .find((part) => part.type === \"dayPeriod\");\r\n            if (dayPeriod) return dayPeriod.value;\r\n        }\r\n        return AM;\r\n    });\r\n\r\n    const pmString = computed(() => {\r\n        if (\r\n            dtf.value.formatToParts &&\r\n            typeof dtf.value.formatToParts === \"function\"\r\n        ) {\r\n            const d = sampleTime.value;\r\n            d.setHours(20);\r\n            const dayPeriod = dtf.value\r\n                .formatToParts(d)\r\n                .find((part) => part.type === \"dayPeriod\");\r\n            if (dayPeriod) {\r\n                return dayPeriod.value;\r\n            }\r\n        }\r\n        return PM;\r\n    });\r\n\r\n    const meridiens = computed(() => [amString.value, pmString.value]);\r\n\r\n    const hourLiteral = computed(() => {\r\n        if (\r\n            dtf.value.formatToParts &&\r\n            typeof dtf.value.formatToParts === \"function\"\r\n        ) {\r\n            const d = sampleTime.value;\r\n            const parts = dtf.value.formatToParts(d);\r\n            const literal = parts.find(\r\n                (part, idx) => idx > 0 && parts[idx - 1].type === \"hour\",\r\n            );\r\n            if (literal) return literal.value;\r\n        }\r\n        return \":\";\r\n    });\r\n\r\n    const minuteLiteral = computed(() => {\r\n        if (\r\n            dtf.value.formatToParts &&\r\n            typeof dtf.value.formatToParts === \"function\"\r\n        ) {\r\n            const d = sampleTime.value;\r\n            const parts = dtf.value.formatToParts(d);\r\n            const literal = parts.find(\r\n                (part, idx) => idx > 0 && parts[idx - 1].type === \"minute\",\r\n            );\r\n            if (literal) return literal.value;\r\n        }\r\n        return \":\";\r\n    });\r\n\r\n    const secondLiteral = computed(() => {\r\n        if (\r\n            dtf.value.formatToParts &&\r\n            typeof dtf.value.formatToParts === \"function\"\r\n        ) {\r\n            const d = sampleTime.value;\r\n            const parts = dtf.value.formatToParts(d);\r\n            const literal = parts.find(\r\n                (part, idx) => idx > 0 && parts[idx - 1].type === \"second\",\r\n            );\r\n            if (literal) return literal.value;\r\n        }\r\n        return undefined;\r\n    });\r\n\r\n    function defaultTimeFormatter(time: Date): string {\r\n        return dtf.value.format(time);\r\n    }\r\n\r\n    function defaultTimeParser(time: string): Date {\r\n        if (!time) return null;\r\n\r\n        if (\r\n            dtf.value.formatToParts &&\r\n            typeof dtf.value.formatToParts === \"function\"\r\n        ) {\r\n            const formatRegex = dtf.value\r\n                .formatToParts(sampleTime.value)\r\n                .map((part) => {\r\n                    if (part.type === \"literal\") {\r\n                        return part.value.replace(/ /g, \"\\\\s?\");\r\n                    } else if (part.type === \"dayPeriod\") {\r\n                        return `((?!=<${part.type}>)(${amString.value}|${\r\n                            pmString.value\r\n                        }|${AM}|${PM}|${AM.toLowerCase()}|${PM.toLowerCase()})?)`;\r\n                    }\r\n                    return `((?!=<${part.type}>)\\\\d+)`;\r\n                })\r\n                .join(\"\");\r\n            const timeGroups = matchWithGroups(formatRegex, time);\r\n\r\n            // We do a simple validation for the group.\r\n            // If it is not valid, it will fallback to Date.parse below\r\n            timeGroups.hour = timeGroups.hour\r\n                ? parseInt(timeGroups.hour, 10)\r\n                : null;\r\n            timeGroups.minute = timeGroups.minute\r\n                ? parseInt(timeGroups.minute, 10)\r\n                : null;\r\n            timeGroups.second = timeGroups.second\r\n                ? parseInt(timeGroups.second, 10)\r\n                : null;\r\n            if (\r\n                timeGroups.hour &&\r\n                timeGroups.hour >= 0 &&\r\n                timeGroups.hour < 24 &&\r\n                timeGroups.minute &&\r\n                timeGroups.minute >= 0 &&\r\n                timeGroups.minute < 59\r\n            ) {\r\n                if (\r\n                    timeGroups.dayPeriod &&\r\n                    (timeGroups.dayPeriod.toLowerCase() ===\r\n                        pmString.value.toLowerCase() ||\r\n                        timeGroups.dayPeriod.toLowerCase() ===\r\n                            PM.toLowerCase()) &&\r\n                    timeGroups.hour < 12\r\n                ) {\r\n                    timeGroups.hour += 12;\r\n                }\r\n                const date = sampleTime.value;\r\n                date.setHours(timeGroups.hour);\r\n                date.setMinutes(timeGroups.minute);\r\n                date.setSeconds(timeGroups.second || 0);\r\n                return date;\r\n            }\r\n        }\r\n\r\n        // Fallback if formatToParts is not supported or if we were not able to parse a valid date\r\n        let am = false;\r\n        if (props.hourFormat === HOUR_FORMAT_12) {\r\n            const dateString12 = time.split(\" \");\r\n            time = dateString12[0];\r\n            am = dateString12[1] === amString.value || dateString12[1] === AM;\r\n        }\r\n        const timeSplit = time.split(\":\");\r\n        let hours = parseInt(timeSplit[0], 10);\r\n        const minutes = parseInt(timeSplit[1], 10);\r\n        const seconds = props.enableSeconds ? parseInt(timeSplit[2], 10) : 0;\r\n        if (\r\n            isNaN(hours) ||\r\n            hours < 0 ||\r\n            hours > 23 ||\r\n            (props.hourFormat === HOUR_FORMAT_12 &&\r\n                (hours < 1 || hours > 12)) ||\r\n            isNaN(minutes) ||\r\n            minutes < 0 ||\r\n            minutes > 59\r\n        ) {\r\n            return null;\r\n        }\r\n        const date = sampleTime.value;\r\n        date.setSeconds(seconds);\r\n        date.setMinutes(minutes);\r\n        if (props.hourFormat === HOUR_FORMAT_12) {\r\n            if (am && hours === 12) {\r\n                hours = 0;\r\n            } else if (!am && hours !== 12) {\r\n                hours += 12;\r\n            }\r\n        }\r\n        date.setHours(hours);\r\n        return new Date(date.getTime());\r\n    }\r\n\r\n    return {\r\n        defaultTimeFormatter,\r\n        defaultTimeParser,\r\n        pmString,\r\n        amString,\r\n        meridiens,\r\n        isHourFormat24,\r\n        hourLiteral,\r\n        minuteLiteral,\r\n        secondLiteral,\r\n    };\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { computed, ref, watch, type PropType } from \"vue\";\r\n\r\nimport OSelect from \"../select/Select.vue\";\r\nimport OPickerWrapper from \"../utils/PickerWrapper.vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport {\r\n    defineClasses,\r\n    useVModelBinding,\r\n    useMatchMedia,\r\n    usePropBinding,\r\n    getActiveClasses,\r\n} from \"@/composables\";\r\n\r\nimport { useTimepickerMixins } from \"./useTimepickerMixins\";\r\n\r\nimport type { ComponentClass } from \"@/types\";\r\n\r\n/**\r\n * An input with a simple dropdown/modal for selecting a time, uses native timepicker for mobile\r\n * @displayName Timepicker\r\n * @style _timepicker.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OTimepicker\",\r\n    configField: \"timepicker\",\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** @model */\r\n    modelValue: { type: Date as PropType<Date>, default: undefined },\r\n    /** The active state of the dropdown */\r\n    active: { type: Boolean, default: false },\r\n    /** Min time to select */\r\n    minTime: { type: Date as PropType<Date>, default: undefined },\r\n    /** Max time to select */\r\n    maxTime: { type: Date as PropType<Date>, default: undefined },\r\n    /** Display datepicker inline */\r\n    inline: { type: Boolean, default: false },\r\n    /** Input placeholder */\r\n    placeholder: { type: String, default: undefined },\r\n    /** Makes input full width when inside a grouped or addon field */\r\n    expanded: { type: Boolean, default: false },\r\n    /** Makes the input rounded */\r\n    rounded: { type: Boolean, default: false },\r\n    /** Same as native input readonly */\r\n    readonly: { type: Boolean, default: false },\r\n    /** Same as native disabled */\r\n    disabled: { type: Boolean, default: false },\r\n    /**\r\n     * Size of the button\r\n     * @values small, medium, large\r\n     */\r\n    size: {\r\n        type: String,\r\n        default: () => getOption(\"timepicker.size\"),\r\n    },\r\n    hourFormat: { type: String, default: undefined },\r\n    incrementHours: { type: Number, default: 1 },\r\n    incrementMinutes: { type: Number, default: 1 },\r\n    incrementSeconds: { type: Number, default: 1 },\r\n    /** Open dropdown on focus */\r\n    openOnFocus: {\r\n        type: Boolean,\r\n        default: () => getOption(\"timepicker.openOnFocus\", true),\r\n    },\r\n    /** Close dropdown on click */\r\n    closeOnClick: {\r\n        type: Boolean,\r\n        default: () => getOption(\"timepicker.closeOnClick\", true),\r\n    },\r\n    enableSeconds: { type: Boolean, default: false },\r\n    defaultMinutes: { type: Number, default: undefined },\r\n    defaultSeconds: { type: Number, default: undefined },\r\n    /** Date format locale */\r\n    locale: {\r\n        type: String,\r\n        default: () => getOption(\"locale\"),\r\n    },\r\n    /** Custom function to format a date into a string */\r\n    timeFormatter: {\r\n        type: Function as PropType<(date: Date) => string>,\r\n        default: (\r\n            date: Date | Date[],\r\n            defaultFunction: (date: Date | Date[]) => string,\r\n        ) => getOption(\"timepicker.timeFormatter\", defaultFunction)(date),\r\n    },\r\n    /** Custom function to parse a string into a date */\r\n    timeParser: {\r\n        type: Function as PropType<(date: string) => Date>,\r\n        default: (date: string, defaultFunction: (date: string) => Date) =>\r\n            getOption(\"timepicker.timeParser\", defaultFunction)(date),\r\n    },\r\n    /** time creator function, default is `new Date()` */\r\n    timeCreator: {\r\n        type: Function as PropType<() => Date>,\r\n        default: () => getOption(\"timepicker.timeCreator\", () => new Date())(),\r\n    },\r\n    /** Define a list of times which can not be selected */\r\n    unselectableTimes: {\r\n        type: [Array, Function] as PropType<Date[] | ((date: Date) => boolean)>,\r\n        default: () => [],\r\n    },\r\n    /** Reset the time inputs when meridian changes */\r\n    resetOnMeridianChange: {\r\n        type: Boolean,\r\n        default: false,\r\n    },\r\n    /** Dropdown trapFocus */\r\n    trapFocus: {\r\n        type: Boolean,\r\n        default: () => getOption(\"timepicker.trapFocus\", true),\r\n    },\r\n    /** Dropdown position */\r\n    position: { type: String, default: undefined },\r\n    /** Enable dropdown mobile modal */\r\n    mobileModal: {\r\n        type: Boolean,\r\n        default: () => getOption(\"timepicker.mobileModal\", true),\r\n    },\r\n    /** Enable mobile native input if mobile agent */\r\n    mobileNative: {\r\n        type: Boolean,\r\n        default: () => getOption(\"timepicker.mobileNative\", true),\r\n    },\r\n    /**\r\n     * Icon pack to use\r\n     * @values mdi, fa, fas and any other custom icon pack\r\n     */\r\n    iconPack: {\r\n        type: String,\r\n        default: () => getOption(\"timepicker.iconPack\", undefined),\r\n    },\r\n    /** Icon to be shown */\r\n    icon: {\r\n        type: String,\r\n        default: () => getOption(\"timepicker.icon\", undefined),\r\n    },\r\n    /** Icon to be added on the right side */\r\n    iconRight: {\r\n        type: String,\r\n        default: () => getOption(\"timepicker.iconRight\", undefined),\r\n    },\r\n    /** Make the icon right clickable */\r\n    iconRightClickable: { type: Boolean, default: false },\r\n    /** Mobile breakpoint as max-width value */\r\n    mobileBreakpoint: {\r\n        type: String,\r\n        default: () => getOption(\"timepicker.mobileBreakpoint\"),\r\n    },\r\n    /**\r\n     * Append the component to another part of the DOM.\r\n     * Set `true` to append the component to the body.\r\n     * In addition, any CSS selector string or an actual DOM node can be used.\r\n     */\r\n    teleport: {\r\n        type: [Boolean, String, Object],\r\n        default: () => getOption(\"timepicker.teleport\", false),\r\n    },\r\n    /** Enable html 5 native validation */\r\n    useHtml5Validation: {\r\n        type: Boolean,\r\n        default: () => getOption(\"useHtml5Validation\", true),\r\n    },\r\n    /** The message which is shown when a validation error occurs */\r\n    validationMessage: { type: String, default: undefined },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Timepicker component size */\r\n    sizeClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Timepicker component box where you choose the date */\r\n    boxClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Timepicker separator */\r\n    separatorClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Timepicker footer */\r\n    footerClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /**\r\n     * Class configuration for the internal input component\r\n     * @ignore\r\n     */\r\n    inputClasses: {\r\n        type: Object,\r\n        default: () => getOption(\"timepicker.inputClasses\", {}),\r\n    },\r\n    /**\r\n     * Class configuration for the internal dropdown component\r\n     * @ignore\r\n     */\r\n    dropdownClasses: {\r\n        type: Object,\r\n        default: () => getOption(\"timepicker.dropdownClasses\", {}),\r\n    },\r\n    /**\r\n     * Class configuration for the internal select component\r\n     * @ignore\r\n     */\r\n    selectClasses: {\r\n        type: Object,\r\n        default: () => getOption(\"timepicker.selectClasses\", {}),\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * modelValue prop two-way binding\r\n     * @param value {Date} updated modelValue prop\r\n     */\r\n    (e: \"update:modelValue\", value: Date): void;\r\n    /**\r\n     * active prop two-way binding\r\n     * @param value {boolean} updated active prop\r\n     */\r\n    (e: \"update:active\", value: boolean): void;\r\n    /**\r\n     * on input focus event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"focus\", event: Event): void;\r\n    /**\r\n     * on input blur event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"blur\", event: Event): void;\r\n    /**\r\n     * on input invalid event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"invalid\", event: Event): void;\r\n    /**\r\n     * on icon click event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"icon-click\", event: Event): void;\r\n    /**\r\n     * on icon right click event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"icon-right-click\", event: Event): void;\r\n}>();\r\n\r\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\r\n\r\nconst {\r\n    defaultTimeFormatter,\r\n    defaultTimeParser,\r\n    pmString,\r\n    amString,\r\n    meridiens,\r\n    isHourFormat24,\r\n    hourLiteral,\r\n    minuteLiteral,\r\n    secondLiteral,\r\n} = useTimepickerMixins(props);\r\n\r\nconst pickerRef = ref<InstanceType<typeof OPickerWrapper>>();\r\n\r\nconst vmodel = useVModelBinding<Date>(props, emits);\r\n\r\n/** Dropdown active state */\r\nconst isActive = usePropBinding<boolean>(\"active\", props, emits);\r\n\r\nconst hoursSelected = ref();\r\nconst minutesSelected = ref();\r\nconst secondsSelected = ref();\r\nconst meridienSelected = ref();\r\n\r\n/**\r\n * When v-model is changed:\r\n *   1. Update internal value.\r\n *   2. If it's invalid, validate again.\r\n */\r\nwatch(\r\n    () => props.modelValue,\r\n    (value) => {\r\n        if (value) {\r\n            hoursSelected.value = value.getHours();\r\n            minutesSelected.value = value.getMinutes();\r\n            secondsSelected.value = value.getSeconds();\r\n            meridienSelected.value =\r\n                value.getHours() >= 12 ? pmString.value : amString.value;\r\n        } else {\r\n            hoursSelected.value = null;\r\n            minutesSelected.value = null;\r\n            secondsSelected.value = null;\r\n            meridienSelected.value = amString.value;\r\n        }\r\n    },\r\n    { immediate: true },\r\n);\r\n\r\n/** Format date into string */\r\nconst formattedValue = computed(() =>\r\n    (props.timeFormatter as any)(props.modelValue, defaultTimeFormatter),\r\n);\r\n\r\nconst nativeStep = computed(() => (props.enableSeconds ? \"1\" : null));\r\n\r\nwatch(\r\n    () => props.hourFormat,\r\n    () => {\r\n        if (hoursSelected.value !== null) {\r\n            meridienSelected.value =\r\n                hoursSelected.value >= 12 ? pmString.value : amString.value;\r\n        }\r\n    },\r\n);\r\n\r\nwatch(\r\n    () => props.locale,\r\n    (value) => {\r\n        // see updateInternalState default\r\n        if (!value) meridienSelected.value = amString.value;\r\n    },\r\n);\r\n\r\nfunction formatNumber(value: number, prependZero: boolean): string {\r\n    return isHourFormat24.value || prependZero ? pad(value) : String(value);\r\n}\r\n\r\nfunction pad(value: number): string {\r\n    return (value < 10 ? \"0\" : \"\") + value;\r\n}\r\n\r\nconst hours = computed(() => {\r\n    if (!props.incrementHours || props.incrementHours < 1)\r\n        throw new Error(\"Hour increment cannot be null or less than 1.\");\r\n    const hours = [];\r\n    const numberOfHours = isHourFormat24.value ? 24 : 12;\r\n    for (let i = 0; i < numberOfHours; i += props.incrementHours) {\r\n        let value = i;\r\n        let label = value;\r\n        if (!isHourFormat24.value) {\r\n            value = i + 1;\r\n            label = value;\r\n            if (meridienSelected.value === amString.value) {\r\n                if (value === 12) {\r\n                    value = 0;\r\n                }\r\n            } else if (meridienSelected.value === pmString.value) {\r\n                if (value !== 12) {\r\n                    value += 12;\r\n                }\r\n            }\r\n        }\r\n        hours.push({\r\n            label: formatNumber(label, false),\r\n            value: value,\r\n        });\r\n    }\r\n    return hours;\r\n});\r\n\r\nconst minutes = computed(() => {\r\n    if (!props.incrementMinutes || props.incrementMinutes < 1)\r\n        throw new Error(\"Minute increment cannot be null or less than 1.\");\r\n    const minutes = [];\r\n    for (let i = 0; i < 60; i += props.incrementMinutes) {\r\n        minutes.push({\r\n            label: formatNumber(i, true),\r\n            value: i,\r\n        });\r\n    }\r\n    return minutes;\r\n});\r\n\r\nconst seconds = computed(() => {\r\n    if (!props.incrementSeconds || props.incrementSeconds < 1)\r\n        throw new Error(\"Second increment cannot be null or less than 1.\");\r\n    const seconds = [];\r\n    for (let i = 0; i < 60; i += props.incrementSeconds) {\r\n        seconds.push({\r\n            label: formatNumber(i, true),\r\n            value: i,\r\n        });\r\n    }\r\n    return seconds;\r\n});\r\n\r\nfunction isHourDisabled(hour: number): boolean {\r\n    let disabled = false;\r\n    if (props.minTime) {\r\n        const minHours = props.minTime.getHours();\r\n        const noMinutesAvailable = minutes.value.every((minute) => {\r\n            return isMinuteDisabledForHour(hour, minute.value);\r\n        });\r\n        disabled = hour < minHours || noMinutesAvailable;\r\n    }\r\n    if (props.maxTime) {\r\n        if (!disabled) {\r\n            const maxHours = props.maxTime.getHours();\r\n            disabled = hour > maxHours;\r\n        }\r\n    }\r\n    if (props.unselectableTimes) {\r\n        if (!disabled) {\r\n            if (typeof props.unselectableTimes === \"function\") {\r\n                const date = new Date();\r\n                date.setHours(hour);\r\n                date.setMinutes(minutesSelected.value);\r\n                date.setSeconds(secondsSelected.value);\r\n                return props.unselectableTimes(date);\r\n            } else {\r\n                const unselectable = props.unselectableTimes.filter((time) => {\r\n                    if (props.enableSeconds && secondsSelected.value !== null) {\r\n                        return (\r\n                            time.getHours() === hour &&\r\n                            time.getMinutes() === minutesSelected.value &&\r\n                            time.getSeconds() === secondsSelected.value\r\n                        );\r\n                    } else if (minutesSelected.value !== null) {\r\n                        return (\r\n                            time.getHours() === hour &&\r\n                            time.getMinutes() === minutesSelected.value\r\n                        );\r\n                    }\r\n                    return false;\r\n                });\r\n                if (unselectable.length > 0) {\r\n                    disabled = true;\r\n                } else {\r\n                    disabled = minutes.value.every((minute) => {\r\n                        return (\r\n                            (props.unselectableTimes as Date[]).filter(\r\n                                (time) => {\r\n                                    return (\r\n                                        time.getHours() === hour &&\r\n                                        time.getMinutes() === minute.value\r\n                                    );\r\n                                },\r\n                            ).length > 0\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return disabled;\r\n}\r\n\r\nfunction isMinuteDisabledForHour(hour: number, minute: number): boolean {\r\n    let disabled = false;\r\n    if (props.minTime) {\r\n        const minHours = props.minTime.getHours();\r\n        const minMinutes = props.minTime.getMinutes();\r\n        disabled = hour === minHours && minute < minMinutes;\r\n    }\r\n    if (props.maxTime) {\r\n        if (!disabled) {\r\n            const maxHours = props.maxTime.getHours();\r\n            const maxMinutes = props.maxTime.getMinutes();\r\n            disabled = hour === maxHours && minute > maxMinutes;\r\n        }\r\n    }\r\n    return disabled;\r\n}\r\n\r\nfunction isMinuteDisabled(minute: number): boolean {\r\n    if (hoursSelected.value === null) return false;\r\n\r\n    let disabled = false;\r\n    if (isHourDisabled(hoursSelected.value)) {\r\n        disabled = true;\r\n    } else {\r\n        disabled = isMinuteDisabledForHour(hoursSelected.value, minute);\r\n    }\r\n    if (props.unselectableTimes) {\r\n        if (!disabled) {\r\n            if (typeof props.unselectableTimes === \"function\") {\r\n                const date = new Date();\r\n                date.setHours(hoursSelected.value);\r\n                date.setMinutes(minute);\r\n                date.setSeconds(secondsSelected.value);\r\n                return props.unselectableTimes(date);\r\n            } else {\r\n                const unselectable = props.unselectableTimes.filter((time) => {\r\n                    if (props.enableSeconds && secondsSelected.value !== null) {\r\n                        return (\r\n                            time.getHours() === hoursSelected.value &&\r\n                            time.getMinutes() === minute &&\r\n                            time.getSeconds() === secondsSelected.value\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            time.getHours() === hoursSelected.value &&\r\n                            time.getMinutes() === minute\r\n                        );\r\n                    }\r\n                });\r\n                disabled = unselectable.length > 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction isSecondDisabled(second: number): boolean {\r\n    if (minutesSelected.value == null) return false;\r\n    let disabled = false;\r\n\r\n    if (isMinuteDisabled(minutesSelected.value)) {\r\n        disabled = true;\r\n    } else {\r\n        if (props.minTime) {\r\n            const minHours = props.minTime.getHours();\r\n            const minMinutes = props.minTime.getMinutes();\r\n            const minSeconds = props.minTime.getSeconds();\r\n            disabled =\r\n                hoursSelected.value === minHours &&\r\n                minutesSelected.value === minMinutes &&\r\n                second < minSeconds;\r\n        }\r\n        if (props.maxTime) {\r\n            if (!disabled) {\r\n                const maxHours = props.maxTime.getHours();\r\n                const maxMinutes = props.maxTime.getMinutes();\r\n                const maxSeconds = props.maxTime.getSeconds();\r\n                disabled =\r\n                    hoursSelected.value === maxHours &&\r\n                    minutesSelected.value === maxMinutes &&\r\n                    second > maxSeconds;\r\n            }\r\n        }\r\n    }\r\n    if (props.unselectableTimes) {\r\n        if (!disabled) {\r\n            if (typeof props.unselectableTimes === \"function\") {\r\n                const date = new Date();\r\n                date.setHours(hoursSelected.value);\r\n                date.setMinutes(minutesSelected.value);\r\n                date.setSeconds(second);\r\n                return props.unselectableTimes(date);\r\n            } else {\r\n                const unselectable = props.unselectableTimes.filter((time) => {\r\n                    return (\r\n                        time.getHours() === hoursSelected.value &&\r\n                        time.getMinutes() === minutesSelected.value &&\r\n                        time.getSeconds() === second\r\n                    );\r\n                });\r\n                disabled = unselectable.length > 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction isMeridienDisabled(meridienString: string): boolean {\r\n    const offset = meridienString == \"AM\" ? 0 : 12;\r\n    for (let i = 0; i < 12; i++) {\r\n        if (!isHourDisabled(i + offset)) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction updateDateSelected(\r\n    hours: number,\r\n    minutes: number,\r\n    seconds: number,\r\n    meridiens,\r\n): void {\r\n    if (\r\n        hours != null &&\r\n        minutes != null &&\r\n        ((!isHourFormat24.value && meridiens !== null) || isHourFormat24.value)\r\n    ) {\r\n        let time: Date = null;\r\n        if (vmodel.value) {\r\n            time = new Date(vmodel.value);\r\n        } else {\r\n            time = props.timeCreator();\r\n            time.setMilliseconds(0);\r\n        }\r\n        time.setHours(hours);\r\n        time.setMinutes(minutes);\r\n        time.setSeconds(seconds);\r\n        if (!isNaN(time.getTime())) {\r\n            vmodel.value = new Date(time.getTime());\r\n        }\r\n    }\r\n}\r\n\r\n/** Format date into string 'HH-MM-SS'*/\r\nfunction formatNative(value: Date): string {\r\n    const date = new Date(value);\r\n    if (value && !isNaN(date.getTime())) {\r\n        const hours = date.getHours();\r\n        const minutes = date.getMinutes();\r\n        const seconds = date.getSeconds();\r\n        return (\r\n            formatNumber(hours, true) +\r\n            \":\" +\r\n            formatNumber(minutes, true) +\r\n            \":\" +\r\n            formatNumber(seconds, true)\r\n        );\r\n    }\r\n    return \"\";\r\n}\r\n\r\n// --- Event Handler ---\r\n\r\nfunction onMeridienChange(value: string): void {\r\n    if (hoursSelected.value !== null && props.resetOnMeridianChange) {\r\n        hoursSelected.value = null;\r\n        minutesSelected.value = null;\r\n        secondsSelected.value = null;\r\n        vmodel.value = null;\r\n    } else if (hoursSelected.value !== null) {\r\n        if (value === pmString.value) hoursSelected.value += 12;\r\n        else if (value === amString.value) hoursSelected.value -= 12;\r\n    }\r\n    updateDateSelected(\r\n        hoursSelected.value,\r\n        minutesSelected.value,\r\n        props.enableSeconds ? secondsSelected.value : 0,\r\n        value,\r\n    );\r\n}\r\n\r\nfunction onHoursChange(value: string): void {\r\n    if (!minutesSelected.value && typeof props.defaultMinutes !== \"undefined\")\r\n        minutesSelected.value = props.defaultMinutes;\r\n    if (!secondsSelected.value && typeof props.defaultSeconds !== \"undefined\")\r\n        secondsSelected.value = props.defaultSeconds;\r\n\r\n    updateDateSelected(\r\n        parseInt(value, 10),\r\n        minutesSelected.value,\r\n        props.enableSeconds ? secondsSelected.value : 0,\r\n        meridienSelected.value,\r\n    );\r\n}\r\n\r\nfunction onMinutesChange(value: string): void {\r\n    if (!secondsSelected.value && props.defaultSeconds)\r\n        secondsSelected.value = props.defaultSeconds;\r\n\r\n    updateDateSelected(\r\n        hoursSelected.value,\r\n        parseInt(value, 10),\r\n        props.enableSeconds ? secondsSelected.value : 0,\r\n        meridienSelected.value,\r\n    );\r\n}\r\n\r\nfunction onSecondsChange(value: string): void {\r\n    updateDateSelected(\r\n        hoursSelected.value,\r\n        minutesSelected.value,\r\n        parseInt(value, 10),\r\n        meridienSelected.value,\r\n    );\r\n}\r\n\r\n/** Parse string into date */\r\nfunction onChange(value: string): void {\r\n    const date = (props.timeParser as any)(value, defaultTimeParser);\r\n    vmodel.value = date ? date : null;\r\n}\r\n\r\n/** Parse time from string */\r\nfunction onChangeNativePicker(date: string): void {\r\n    if (date) {\r\n        let time = null;\r\n        if (vmodel.value) {\r\n            time = new Date(vmodel.value);\r\n        } else {\r\n            time = props.timeCreator();\r\n            time.setMilliseconds(0);\r\n        }\r\n        const t = date.split(\":\");\r\n        time.setHours(parseInt(t[0], 10));\r\n        time.setMinutes(parseInt(t[1], 10));\r\n        time.setSeconds(t[2] ? parseInt(t[2], 10) : 0);\r\n        vmodel.value = new Date(time.getTime());\r\n    } else {\r\n        vmodel.value = null;\r\n    }\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst selectSelectClasses = defineClasses([\r\n    \"selectClasses.selectClass\",\r\n    \"o-tpck__select\",\r\n]);\r\n\r\nconst selectPlaceholderClasses = defineClasses([\r\n    \"selectClasses.placeholderClass\",\r\n    \"o-tpck__select-placeholder\",\r\n]);\r\n\r\nconst selectBind = computed(() => ({\r\n    \"select-class\": getActiveClasses(selectSelectClasses.value),\r\n    \"placeholder-class\": getActiveClasses(selectPlaceholderClasses.value),\r\n    ...props.selectClasses,\r\n}));\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"rootClass\", \"o-tpck\"],\r\n    [\r\n        \"sizeClass\",\r\n        \"o-tpck--\",\r\n        computed(() => props.size),\r\n        computed(() => !!props.size),\r\n    ],\r\n    [\"mobileClass\", \"o-tpck--mobile\", null, isMobile],\r\n);\r\n\r\nconst separatorClasses = defineClasses([\"separatorClass\", \"o-tpck__separtor\"]);\r\n\r\nconst footerClasses = defineClasses([\"footerClass\", \"o-tpck__footer\"]);\r\n\r\nconst dropdownClass = defineClasses([\r\n    \"dropdownClasses.rootClass\",\r\n    \"o-tpck__dropdown\",\r\n]);\r\n\r\nconst boxClasses = defineClasses([\"boxClass\", \"o-tpck__box\"]);\r\nconst boxClassBind = computed(() => getActiveClasses(boxClasses.value));\r\n\r\n// --- Expose Public Functionalities ---\r\n\r\n/** expose functionalities for programmatic usage */\r\ndefineExpose({ focus: () => pickerRef.value?.focus() });\r\n</script>\r\n\r\n<template>\r\n    <OPickerWrapper\r\n        ref=\"pickerRef\"\r\n        v-model:active=\"isActive\"\r\n        data-oruga=\"timepicker\"\r\n        :value=\"vmodel\"\r\n        :picker-props=\"props\"\r\n        :formatted-value=\"formattedValue\"\r\n        native-type=\"time\"\r\n        :native-value=\"formatNative(vmodel)\"\r\n        :native-max=\"formatNative(maxTime)\"\r\n        :native-min=\"formatNative(minTime)\"\r\n        :native-step=\"nativeStep\"\r\n        :dropdown-classes=\"dropdownClass\"\r\n        :root-classes=\"rootClasses\"\r\n        :box-class=\"boxClassBind\"\r\n        @change=\"onChange\"\r\n        @native-change=\"onChangeNativePicker\"\r\n        @focus=\"$emit('focus', $event)\"\r\n        @blur=\"$emit('blur', $event)\"\r\n        @invalid=\"$emit('invalid', $event)\"\r\n        @icon-click=\"$emit('icon-click', $event)\"\r\n        @icon-right-click=\"$emit('icon-right-click', $event)\">\r\n        <template v-if=\"$slots.trigger\" #trigger>\r\n            <!--\r\n                @slot Override the trigger\r\n            -->\r\n            <slot name=\"trigger\" />\r\n        </template>\r\n        <o-select\r\n            v-bind=\"selectBind\"\r\n            v-model=\"hoursSelected\"\r\n            override\r\n            :disabled=\"disabled\"\r\n            placeholder=\"00\"\r\n            @change=\"onHoursChange($event.target.value)\">\r\n            <option\r\n                v-for=\"hour in hours\"\r\n                :key=\"hour.value\"\r\n                :value=\"hour.value\"\r\n                :disabled=\"isHourDisabled(hour.value)\">\r\n                {{ hour.label }}\r\n            </option>\r\n        </o-select>\r\n        <span :class=\"separatorClasses\">{{ hourLiteral }}</span>\r\n        <o-select\r\n            v-bind=\"selectBind\"\r\n            v-model=\"minutesSelected\"\r\n            override\r\n            :disabled=\"disabled\"\r\n            placeholder=\"00\"\r\n            @change=\"onMinutesChange($event.target.value)\">\r\n            <option\r\n                v-for=\"minute in minutes\"\r\n                :key=\"minute.value\"\r\n                :value=\"minute.value\"\r\n                :disabled=\"isMinuteDisabled(minute.value)\">\r\n                {{ minute.label }}\r\n            </option>\r\n        </o-select>\r\n        <template v-if=\"enableSeconds\">\r\n            <span :class=\"separatorClasses\">{{ minuteLiteral }}</span>\r\n            <o-select\r\n                v-bind=\"selectBind\"\r\n                v-model=\"secondsSelected\"\r\n                override\r\n                :disabled=\"disabled\"\r\n                placeholder=\"00\"\r\n                @change=\"onSecondsChange($event.target.value)\">\r\n                <option\r\n                    v-for=\"second in seconds\"\r\n                    :key=\"second.value\"\r\n                    :value=\"second.value\"\r\n                    :disabled=\"isSecondDisabled(second.value)\">\r\n                    {{ second.label }}\r\n                </option>\r\n            </o-select>\r\n            <span :class=\"separatorClasses\">{{ secondLiteral }}</span>\r\n        </template>\r\n        <o-select\r\n            v-if=\"!isHourFormat24\"\r\n            v-bind=\"selectBind\"\r\n            v-model=\"meridienSelected\"\r\n            override\r\n            :disabled=\"disabled\"\r\n            @change=\"onMeridienChange($event.target.value)\">\r\n            <option\r\n                v-for=\"meridien in meridiens\"\r\n                :key=\"meridien\"\r\n                :value=\"meridien\"\r\n                :disabled=\"isMeridienDisabled(meridien)\">\r\n                {{ meridien }}\r\n            </option>\r\n        </o-select>\r\n\r\n        <footer v-if=\"$slots.default\" :class=\"footerClasses\">\r\n            <!--\r\n                @slot Define an additional content on footer\r\n            -->\r\n            <slot />\r\n        </footer>\r\n    </OPickerWrapper>\r\n</template>\r\n"],"names":["computed","matchWithGroups","date","useMatchMedia","ref","useVModelBinding","usePropBinding","watch","hours","minutes","seconds","meridiens","defineClasses","getActiveClasses"],"mappings":"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"}