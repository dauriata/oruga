{"version":3,"file":"useFieldShare-DArg23Mc.cjs","sources":["../../src/components/field/useFieldShare.ts"],"sourcesContent":["import { computed, inject, provide, type ComputedRef } from \"vue\";\r\n\r\nimport Field from \"./Field.vue\";\r\nimport { getOption } from \"@/utils/config\";\r\n\r\nexport type FieldProps = InstanceType<typeof Field>[\"$props\"];\r\n\r\ntype FieldData = {\r\n    $el: Element;\r\n    props: FieldProps;\r\n    hasInnerField: boolean;\r\n    hasMessage: boolean;\r\n    fieldVariant: string;\r\n    fieldMessage: string;\r\n    setFocus: (value: boolean) => void;\r\n    setFilled: (value: boolean) => void;\r\n    setVariant: (value: string) => void;\r\n    setMessage: (value: string) => void;\r\n};\r\n\r\n/** provide/inject key */\r\nconst $field = Symbol();\r\n\r\n/** provide/inject type */\r\ntype ProvidedField = ComputedRef<FieldData>;\r\n\r\n/**\r\n * Provide field component data via dependency injection.\r\n * Provided data is a computed ref to enjure reactivity.\r\n */\r\nexport function provideField(data: ProvidedField): void {\r\n    provide<ProvidedField>($field, data);\r\n}\r\n\r\n/** Inject parent field component if used inside one. **/\r\nexport function injectField() {\r\n    const parentField = inject<ProvidedField>($field, undefined);\r\n\r\n    /**\r\n     * Get the type prop from parent if it's a Field.\r\n     */\r\n    const statusVariant = computed(() => {\r\n        if (!parentField?.value) return undefined;\r\n        else if (!parentField.value.fieldVariant) return undefined;\r\n        else {\r\n            if (typeof parentField.value.fieldVariant === \"string\") {\r\n                return parentField.value.fieldVariant;\r\n            } else if (Array.isArray(parentField.value.fieldVariant)) {\r\n                for (const key in parentField.value.fieldVariant as any) {\r\n                    if (parentField.value.fieldVariant[key]) {\r\n                        return key;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    });\r\n\r\n    /**\r\n     * Get the message prop from parent if it's a Field.\r\n     */\r\n    const statusMessage = computed(() =>\r\n        !parentField.value\r\n            ? parentField.value.fieldMessage || parentField.value.hasMessage\r\n            : \"\",\r\n    );\r\n\r\n    /**\r\n     * Icon name based on the variant.\r\n     */\r\n    const statusVariantIcon = computed<string>(() => {\r\n        const statusVariantIcon = getOption(\"statusVariantIcon\", {\r\n            success: \"check\",\r\n            danger: \"alert-circle\",\r\n            info: \"information\",\r\n            warning: \"alert\",\r\n        });\r\n        return statusVariantIcon[statusVariant.value] || \"\";\r\n    });\r\n\r\n    return {\r\n        parentField,\r\n        statusVariant,\r\n        statusVariantIcon,\r\n        statusMessage,\r\n    };\r\n}\r\n"],"names":["provide","inject","computed","statusVariantIcon","getOption"],"mappings":";;;;AAqBA,MAAM,SAAS,OAAO;AASf,SAAS,aAAa,MAA2B;AACpDA,cAAuB,QAAQ,IAAI;AACvC;AAGO,SAAS,cAAc;AACpB,QAAA,cAAcC,IAAsB,OAAA,QAAQ,MAAS;AAKrD,QAAA,gBAAgBC,IAAAA,SAAS,MAAM;AACjC,QAAI,EAAC,2CAAa;AAAc,aAAA;AAAA,aACvB,CAAC,YAAY,MAAM;AAAqB,aAAA;AAAA,SAC5C;AACD,UAAI,OAAO,YAAY,MAAM,iBAAiB,UAAU;AACpD,eAAO,YAAY,MAAM;AAAA,MAAA,WAClB,MAAM,QAAQ,YAAY,MAAM,YAAY,GAAG;AAC3C,mBAAA,OAAO,YAAY,MAAM,cAAqB;AACrD,cAAI,YAAY,MAAM,aAAa,GAAG,GAAG;AAC9B,mBAAA;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACO,WAAA;AAAA,EAAA,CACV;AAKD,QAAM,gBAAgBA,IAAA;AAAA,IAAS,MAC3B,CAAC,YAAY,QACP,YAAY,MAAM,gBAAgB,YAAY,MAAM,aACpD;AAAA,EAAA;AAMJ,QAAA,oBAAoBA,IAAAA,SAAiB,MAAM;AACvCC,UAAAA,qBAAoBC,iBAAU,qBAAqB;AAAA,MACrD,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IAAA,CACZ;AACMD,WAAAA,mBAAkB,cAAc,KAAK,KAAK;AAAA,EAAA,CACpD;AAEM,SAAA;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAER;;;"}