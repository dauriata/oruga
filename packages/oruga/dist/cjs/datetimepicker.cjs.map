{"version":3,"file":"datetimepicker.cjs","sources":["../../src/components/datetimepicker/Datetimepicker.vue","../../src/components/datetimepicker/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { computed, ref, watch, type PropType } from \"vue\";\r\n\r\nimport ODatepicker from \"../datepicker/Datepicker.vue\";\r\nimport OTimepicker from \"../timepicker/Timepicker.vue\";\r\nimport OInput from \"../input/Input.vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport { isMobileAgent } from \"@/utils/helpers\";\r\nimport { defineClasses, useInputHandler } from \"@/composables\";\r\n\r\nimport { matchWithGroups } from \"../datepicker/utils\";\r\n\r\nimport type { DatepickerProps } from \"../datepicker/types\";\r\nimport type { TimepickerProps } from \"../timepicker/types\";\r\nimport type { ComponentClass } from \"@/types\";\r\n\r\n/**\r\n * An input with a simple dropdown/modal for selecting a date and time, uses native datetimepicker for mobile\r\n * @displayName Datetimepicker\r\n * @style _datetimepicker.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"ODatetimepicker\",\r\n    configField: \"datetimepicker\",\r\n    inheritAttrs: false,\r\n});\r\n\r\nconst AM = \"AM\";\r\nconst PM = \"PM\";\r\nconst HOUR_FORMAT_24 = \"24\";\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** @model */\r\n    modelValue: { type: Date, default: undefined },\r\n    /** The active state of the dropdown, use v-model:active to make it two-way binding. */\r\n    active: { type: Boolean, default: false },\r\n    /** Define props for the underlying datepicker component */\r\n    datepicker: {\r\n        type: Object as PropType<DatepickerProps>,\r\n        default: undefined,\r\n    },\r\n    /** Define props for the underlying timepicker component */\r\n    timepicker: {\r\n        type: Object as PropType<TimepickerProps>,\r\n        default: undefined,\r\n    },\r\n    /** Min date to select */\r\n    minDatetime: { type: Date, default: undefined },\r\n    /** Max date to select */\r\n    maxDatetime: { type: Date, default: undefined },\r\n    /**\r\n     * Size of the input control\r\n     * @values small, medium, large\r\n     */\r\n    size: {\r\n        type: String,\r\n        default: () => getOption(\"datetimepicker.size\"),\r\n    } /** Makes input full width when inside a grouped or addon field */,\r\n    expanded: { type: Boolean, default: false },\r\n    /** Makes the input rounded */\r\n    rounded: { type: Boolean, default: false },\r\n    /** Input placeholder */\r\n    placeholder: { type: String, default: undefined },\r\n    /** Same as native input readonly */\r\n    readonly: { type: Boolean, default: false },\r\n    /** Same as native disabled */\r\n    disabled: { type: Boolean, default: false },\r\n    /** Display datetimepicker inline */\r\n    inline: { type: Boolean, default: false },\r\n    /** Open dropdown on focus */\r\n    openOnFocus: {\r\n        type: Boolean,\r\n        default: () => getOption(\"datetimepicker.openOnFocus\", true),\r\n    },\r\n    /** Date format locale */\r\n    locale: {\r\n        type: String,\r\n        default: () => getOption(\"locale\"),\r\n    },\r\n    /** Custom function to format a date into a string */\r\n    datetimeFormatter: {\r\n        type: Function as PropType<(date: Date) => string>,\r\n        default: (\r\n            date: Date | Date[],\r\n            defaultFunction: (date: Date | Date[]) => string,\r\n        ) => getOption(\"datetimepicker.dateFormatter\", defaultFunction)(date),\r\n    },\r\n    /** Custom function to parse a string into a date */\r\n    datetimeParser: {\r\n        type: Function as PropType<(date: string) => Date>,\r\n        default: (date: string, defaultFunction: (date: string) => Date) =>\r\n            getOption(\"datetimepicker.dateParser\", defaultFunction)(date),\r\n    },\r\n    /** Date creator function, default is `new Date()` */\r\n    datetimeCreator: {\r\n        type: Function as PropType<(date: Date) => Date>,\r\n        default: (date: Date) =>\r\n            getOption(\r\n                \"datetimepicker.datetimeCreator\",\r\n                (d: Date) => new Date(d),\r\n            )(date),\r\n    },\r\n    /** Dropdown position */\r\n    position: { type: String, default: undefined },\r\n    /** Enable mobile native input if mobile agent */\r\n    mobileNative: {\r\n        type: Boolean,\r\n        default: () => getOption(\"datetimepicker.mobileNative\", true),\r\n    },\r\n    /**\r\n     * Icon pack to use\r\n     * @values mdi, fa, fas and any other custom icon pack\r\n     */\r\n    iconPack: {\r\n        type: String,\r\n        default: () => getOption(\"datetimepicker.iconPack\", undefined),\r\n    },\r\n    /** Icon to be shown */\r\n    icon: {\r\n        type: String,\r\n        default: () => getOption(\"datetimepicker.icon\", undefined),\r\n    },\r\n    /** Icon to be added on the right side */\r\n    iconRight: {\r\n        type: String,\r\n        default: () => getOption(\"datetimepicker.iconRight\", undefined),\r\n    },\r\n    /** Make the icon right clickable */\r\n    iconRightClickable: { type: Boolean, default: false },\r\n    /**\r\n     * Append the component to another part of the DOM.\r\n     * Set `true` to append the component to the body.\r\n     * In addition, any CSS selector string or an actual DOM node can be used.\r\n     */\r\n    teleport: {\r\n        type: [Boolean, String, Object],\r\n        default: () => getOption(\"datetimepicker.teleport\", false),\r\n    },\r\n    /** Enable html 5 native validation */\r\n    useHtml5Validation: {\r\n        type: Boolean,\r\n        default: () => getOption(\"useHtml5Validation\", true),\r\n    },\r\n    /** The message which is shown when a validation error occurs */\r\n    validationMessage: { type: String, default: undefined },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the Datepicker wrapper */\r\n    datepickerWrapperClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the Timepicker wrapper */\r\n    timepickerWrapperClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * modelValue prop two-way binding\r\n     * @param value {Date | Date[]} updated modelValue prop\r\n     */\r\n    (e: \"update:modelValue\", value: Date | Date[]): void;\r\n    /**\r\n     * active prop two-way binding\r\n     * @param value {boolean} updated active prop\r\n     */\r\n    (e: \"update:active\", value: boolean): void;\r\n    /**\r\n     * on range start is selected event\r\n     * @param value {Date} range start date\r\n     */\r\n    (e: \"range-start\", value: Date): void;\r\n    /**\r\n     * on range end is selected event\r\n     * @param value {Date} range end date\r\n     */\r\n    (e: \"range-end\", value: Date): void;\r\n    /**\r\n     * on month change event\r\n     * @param value {number} month number\r\n     */\r\n    (e: \"change-month\", value: number): void;\r\n    /**\r\n     * on year change event\r\n     * @param value {number} year number\r\n     */\r\n    (e: \"change-year\", value: number): void;\r\n    /**\r\n     * on input focus event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"focus\", event: Event): void;\r\n    /**\r\n     * on input blur event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"blur\", event: Event): void;\r\n    /**\r\n     * on input invalid event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"invalid\", event: Event): void;\r\n    /**\r\n     * on icon click event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"icon-click\", event: Event): void;\r\n    /**\r\n     * on icon right click event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"icon-right-click\", event: Event): void;\r\n}>();\r\n\r\nconst datepickerRef = ref<InstanceType<typeof ODatepicker>>();\r\nconst timepickerRef = ref<InstanceType<typeof OTimepicker>>();\r\nconst nativeInputRef = ref<InstanceType<typeof OInput>>();\r\n\r\nconst elementRef = computed(() =>\r\n    isMobileNative.value ? nativeInputRef.value : datepickerRef.value,\r\n);\r\n\r\n// use form input functionality for native input\r\nconst { setFocus, onBlur, onFocus, onInvalid } = useInputHandler(\r\n    elementRef,\r\n    emits,\r\n    props,\r\n);\r\n\r\nconst isMobileNative = computed(\r\n    () => props.mobileNative && isMobileAgent.any(),\r\n);\r\n\r\nwatch([() => isMobileNative.value, () => props.inline], () => {\r\n    // $refs attached, it's time to refresh datepicker (input)\r\n    if (datepickerRef.value) datepickerRef.value.$forceUpdate();\r\n});\r\n\r\n/** Dropdown active state */\r\nconst isActive = defineModel<boolean>(\"active\");\r\n\r\nconst vmodel = defineModel<Date>();\r\n\r\nfunction updateVModel(value: Date | Date[]): void {\r\n    if (!value) {\r\n        vmodel.value = undefined;\r\n        return;\r\n    }\r\n    if (Array.isArray(value)) {\r\n        updateVModel(value[0]);\r\n        return;\r\n    }\r\n    let date = new Date(value.getTime());\r\n    if (!props.modelValue) {\r\n        date = props.datetimeCreator(value);\r\n    } else {\r\n        // restore time part\r\n        if (\r\n            (value.getDate() !== props.modelValue.getDate() ||\r\n                value.getMonth() !== props.modelValue.getMonth() ||\r\n                value.getFullYear() !== props.modelValue.getFullYear()) &&\r\n            value.getHours() === 0 &&\r\n            value.getMinutes() === 0 &&\r\n            value.getSeconds() === 0\r\n        ) {\r\n            date.setHours(\r\n                props.modelValue.getHours(),\r\n                props.modelValue.getMinutes(),\r\n                props.modelValue.getSeconds(),\r\n                0,\r\n            );\r\n        }\r\n    }\r\n    // check min and max range\r\n    if (props.minDatetime && date < props.minDatetime) {\r\n        date = props.minDatetime;\r\n    } else if (props.maxDatetime && date > props.maxDatetime) {\r\n        date = props.maxDatetime;\r\n    }\r\n    vmodel.value = new Date(date.getTime());\r\n}\r\n\r\nconst minDate = computed(() => {\r\n    if (!props.minDatetime)\r\n        return props.datepicker ? props.datepicker.minDate : null;\r\n    return new Date(\r\n        props.minDatetime.getFullYear(),\r\n        props.minDatetime.getMonth(),\r\n        props.minDatetime.getDate(),\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n    );\r\n});\r\n\r\nconst maxDate = computed(() => {\r\n    if (!props.maxDatetime)\r\n        return props.datepicker ? props.datepicker.maxDate : null;\r\n    return new Date(\r\n        props.maxDatetime.getFullYear(),\r\n        props.maxDatetime.getMonth(),\r\n        props.maxDatetime.getDate(),\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n    );\r\n});\r\n\r\n// Only enable min/max time if local (not necessarily UTC) date portion matches\r\nconst minTime = computed(() => {\r\n    if (\r\n        !props.minDatetime ||\r\n        vmodel.value === null ||\r\n        typeof vmodel.value === \"undefined\" ||\r\n        vmodel.value.getFullYear() != props.minDatetime.getFullYear() ||\r\n        vmodel.value.getMonth() != props.minDatetime.getMonth() ||\r\n        vmodel.value.getDate() != props.minDatetime.getDate()\r\n    ) {\r\n        return props.timepicker ? props.timepicker.minTime : null;\r\n    }\r\n    return props.minDatetime;\r\n});\r\n\r\nconst maxTime = computed(() => {\r\n    if (\r\n        !props.maxDatetime ||\r\n        vmodel.value === null ||\r\n        typeof vmodel.value === \"undefined\" ||\r\n        vmodel.value.getFullYear() != props.maxDatetime.getFullYear() ||\r\n        vmodel.value.getMonth() != props.maxDatetime.getMonth() ||\r\n        vmodel.value.getDate() != props.maxDatetime.getDate()\r\n    ) {\r\n        return props.timepicker ? props.timepicker.maxTime : null;\r\n    }\r\n    return props.maxDatetime;\r\n});\r\n\r\nconst datepickerSize = computed(() =>\r\n    props.datepicker?.size ? props.datepicker.size : props.size,\r\n);\r\n\r\nconst timepickerSize = computed(() =>\r\n    props.timepicker?.size ? props.timepicker.size : props.size,\r\n);\r\n\r\nconst timepickerDisabled = computed(() =>\r\n    props.timepicker?.disabled ? props.timepicker.disabled : props.disabled,\r\n);\r\n\r\nfunction formatNative(value: Date): string {\r\n    const date = new Date(value);\r\n    if (value && !isNaN(date.getTime())) {\r\n        const year = date.getFullYear();\r\n        const month = date.getMonth() + 1;\r\n        const day = date.getDate();\r\n        const hours = date.getHours();\r\n        const minutes = date.getMinutes();\r\n        const seconds = date.getSeconds();\r\n        return (\r\n            year +\r\n            \"-\" +\r\n            ((month < 10 ? \"0\" : \"\") + month) +\r\n            \"-\" +\r\n            ((day < 10 ? \"0\" : \"\") + day) +\r\n            \"T\" +\r\n            ((hours < 10 ? \"0\" : \"\") + hours) +\r\n            \":\" +\r\n            ((minutes < 10 ? \"0\" : \"\") + minutes) +\r\n            \":\" +\r\n            ((seconds < 10 ? \"0\" : \"\") + seconds)\r\n        );\r\n    }\r\n    return \"\";\r\n}\r\n\r\n// --- Time Format Feature ---\r\n\r\nconst enableSeconds = computed(() =>\r\n    timepickerRef.value?.enableSeconds\r\n        ? timepickerRef.value.enableSeconds\r\n        : false,\r\n);\r\n\r\nconst localeOptions = computed(\r\n    () =>\r\n        new Intl.DateTimeFormat(props.locale, {\r\n            year: \"numeric\",\r\n            month: \"numeric\",\r\n            day: \"numeric\",\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n            second: enableSeconds.value ? \"numeric\" : undefined,\r\n        }).resolvedOptions() as Intl.DateTimeFormatOptions,\r\n);\r\n\r\nconst isHourFormat24 = computed(\r\n    () =>\r\n        props.timepicker?.hourFormat === HOUR_FORMAT_24 ||\r\n        !localeOptions.value.hour12,\r\n);\r\n\r\nconst dtf = computed(\r\n    () =>\r\n        new Intl.DateTimeFormat(props.locale, {\r\n            year: localeOptions.value.year || \"numeric\",\r\n            month: localeOptions.value.month || \"numeric\",\r\n            day: localeOptions.value.day || \"numeric\",\r\n            hour: localeOptions.value.hour || \"numeric\",\r\n            minute: localeOptions.value.minute || \"numeric\",\r\n            second: enableSeconds.value\r\n                ? localeOptions.value.second || \"numeric\"\r\n                : undefined,\r\n            hourCycle: !isHourFormat24.value ? \"h12\" : \"h23\",\r\n        }),\r\n);\r\n\r\nconst amString = computed(() => {\r\n    if (\r\n        dtf.value.formatToParts &&\r\n        typeof dtf.value.formatToParts === \"function\"\r\n    ) {\r\n        const d = props.datetimeCreator(new Date());\r\n        d.setHours(10);\r\n        const dayPeriod = dtf.value\r\n            .formatToParts(d)\r\n            .find((part) => part.type === \"dayPeriod\");\r\n        if (dayPeriod) return dayPeriod.value;\r\n    }\r\n    return AM;\r\n});\r\n\r\nconst pmString = computed(() => {\r\n    if (\r\n        dtf.value.formatToParts &&\r\n        typeof dtf.value.formatToParts === \"function\"\r\n    ) {\r\n        const d = props.datetimeCreator(new Date());\r\n        d.setHours(20);\r\n        const dayPeriod = dtf.value\r\n            .formatToParts(d)\r\n            .find((part) => part.type === \"dayPeriod\");\r\n        if (dayPeriod) return dayPeriod.value;\r\n    }\r\n    return PM;\r\n});\r\n\r\nfunction defaultDatetimeParser(value: string): Date {\r\n    function defaultParser(date: string): Date {\r\n        if (\r\n            dtf.value.formatToParts &&\r\n            typeof dtf.value.formatToParts === \"function\"\r\n        ) {\r\n            const dayPeriods = [AM, PM, AM.toLowerCase(), PM.toLowerCase()];\r\n            if (timepickerRef.value) {\r\n                dayPeriods.push(amString.value);\r\n                dayPeriods.push(pmString.value);\r\n            }\r\n            const parts = this.dtf.formatToParts(new Date());\r\n            const formatRegex = parts\r\n                .map((part, idx) => {\r\n                    if (part.type === \"literal\") {\r\n                        if (\r\n                            idx + 1 < parts.length &&\r\n                            parts[idx + 1].type === \"hour\"\r\n                        ) {\r\n                            return `[^\\\\d]+`;\r\n                        }\r\n                        return part.value.replace(/ /g, \"\\\\s?\");\r\n                    } else if (part.type === \"dayPeriod\") {\r\n                        return `((?!=<${part.type}>)(${dayPeriods.join(\r\n                            \"|\",\r\n                        )})?)`;\r\n                    }\r\n                    return `((?!=<${part.type}>)\\\\d+)`;\r\n                })\r\n                .join(\"\");\r\n            const datetimeGroups = matchWithGroups(formatRegex, date);\r\n\r\n            // We do a simple validation for the group.\r\n            // If it is not valid, it will fallback to Date.parse below\r\n            if (\r\n                datetimeGroups.year &&\r\n                datetimeGroups.year.length === 4 &&\r\n                datetimeGroups.month &&\r\n                datetimeGroups.month <= 12 &&\r\n                datetimeGroups.day &&\r\n                datetimeGroups.day <= 31 &&\r\n                datetimeGroups.hour &&\r\n                datetimeGroups.hour >= 0 &&\r\n                datetimeGroups.hour < 24 &&\r\n                datetimeGroups.minute &&\r\n                datetimeGroups.minute >= 0 &&\r\n                datetimeGroups.minute <= 59\r\n            ) {\r\n                const d = new Date(\r\n                    datetimeGroups.year,\r\n                    datetimeGroups.month - 1,\r\n                    datetimeGroups.day,\r\n                    datetimeGroups.hour,\r\n                    datetimeGroups.minute,\r\n                    datetimeGroups.second || 0,\r\n                );\r\n                return d;\r\n            }\r\n        }\r\n\r\n        return new Date(Date.parse(date));\r\n    }\r\n    const date = (props.datetimeParser as any)(value, defaultParser);\r\n    return date;\r\n}\r\n\r\nfunction defaultDatetimeFormatter(date: Date): string {\r\n    return (props.datetimeFormatter as any)(date, (date: Date) =>\r\n        date ? dtf.value.format(date) : \"\",\r\n    );\r\n}\r\n\r\n// --- Event Handler ---\r\n\r\n/** Parse date from string */\r\nfunction onChangeNativePicker(event: Event): void {\r\n    const date = (event.target as HTMLInputElement).value;\r\n    const s = date ? date.split(/\\D/) : [];\r\n    if (s.length >= 5) {\r\n        const year = parseInt(s[0], 10);\r\n        const month = parseInt(s[1], 10) - 1;\r\n        const day = parseInt(s[2], 10);\r\n        const hours = parseInt(s[3], 10);\r\n        const minutes = parseInt(s[4], 10);\r\n        // Seconds are omitted intentionally; they are unsupported by input\r\n        // type=datetime-local and cause the control to fail native validation\r\n        updateVModel(new Date(year, month, day, hours, minutes));\r\n    } else {\r\n        updateVModel(null);\r\n    }\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst datepickerWrapperClasses = defineClasses([\r\n    \"datepickerWrapperClass\",\r\n    \"o-dtpck__date\",\r\n]);\r\n\r\nconst timepickerWrapperClasses = defineClasses([\r\n    \"timepickerWrapperClass\",\r\n    \"o-dtpck__time\",\r\n]);\r\n\r\n// --- Expose Public Functionalities ---\r\n\r\n/** expose functionalities for programmatic usage */\r\ndefineExpose({ focus: setFocus });\r\n</script>\r\n\r\n<template>\r\n    <o-datepicker\r\n        v-if=\"!isMobileNative || inline\"\r\n        ref=\"datepickerRef\"\r\n        v-bind=\"{ ...$attrs, ...datepicker }\"\r\n        v-model:active=\"isActive\"\r\n        :model-value=\"vmodel\"\r\n        data-oruga=\"datetimepicker\"\r\n        :class=\"datepickerWrapperClasses\"\r\n        :rounded=\"rounded\"\r\n        :open-on-focus=\"openOnFocus\"\r\n        :position=\"position\"\r\n        :inline=\"inline\"\r\n        :readonly=\"readonly\"\r\n        :expanded=\"expanded\"\r\n        :close-on-click=\"false\"\r\n        :date-formatter=\"defaultDatetimeFormatter\"\r\n        :date-parser=\"defaultDatetimeParser\"\r\n        :min-date=\"minDate\"\r\n        :max-date=\"maxDate\"\r\n        :icon=\"icon\"\r\n        :icon-right=\"iconRight\"\r\n        :icon-right-clickable=\"iconRightClickable\"\r\n        :icon-pack=\"iconPack\"\r\n        :size=\"datepickerSize\"\r\n        :placeholder=\"placeholder\"\r\n        :range=\"false\"\r\n        :disabled=\"disabled\"\r\n        :mobile-native=\"isMobileNative\"\r\n        :locale=\"locale\"\r\n        :teleport=\"teleport\"\r\n        @update:model-value=\"updateVModel\"\r\n        @focus=\"onFocus\"\r\n        @blur=\"onBlur\"\r\n        @change-month=\"$emit('change-month', $event)\"\r\n        @change-year=\"$emit('change-year', $event)\"\r\n        @icon-click=\"$emit('icon-click', $event)\"\r\n        @icon-right-click=\"$emit('icon-right-click', $event)\">\r\n        <template #footer>\r\n            <div :class=\"timepickerWrapperClasses\">\r\n                <o-timepicker\r\n                    ref=\"timepickerRef\"\r\n                    v-bind=\"timepicker\"\r\n                    v-model=\"vmodel\"\r\n                    inline\r\n                    :readonly=\"readonly\"\r\n                    :min-time=\"minTime\"\r\n                    :max-time=\"maxTime\"\r\n                    :size=\"timepickerSize\"\r\n                    :disabled=\"timepickerDisabled\"\r\n                    :mobile-native=\"isMobileNative\"\r\n                    :locale=\"locale\" />\r\n            </div>\r\n            <template v-if=\"$slots.footer !== undefined\">\r\n                <!--\r\n                    @slot Define an additional footer\r\n                -->\r\n                <slot name=\"footer\" />\r\n            </template>\r\n        </template>\r\n    </o-datepicker>\r\n\r\n    <!-- Native Picker -->\r\n    <o-input\r\n        v-else\r\n        v-bind=\"$attrs\"\r\n        ref=\"nativeInputRef\"\r\n        type=\"datetime-local\"\r\n        autocomplete=\"off\"\r\n        :value=\"formatNative(vmodel)\"\r\n        :max=\"formatNative(maxDate)\"\r\n        :min=\"formatNative(minDate)\"\r\n        :placeholder=\"placeholder\"\r\n        :size=\"datepickerSize\"\r\n        :icon-pack=\"iconPack\"\r\n        :icon=\"icon\"\r\n        :rounded=\"rounded\"\r\n        :disabled=\"disabled\"\r\n        :readonly=\"false\"\r\n        :use-html5-validation=\"false\"\r\n        @change=\"onChangeNativePicker\"\r\n        @focus=\"onFocus\"\r\n        @blur=\"onBlur\"\r\n        @invalid=\"onInvalid\" />\r\n</template>\r\n","import type { App, Plugin } from \"vue\";\r\n\r\nimport Datetimepicker from \"./Datetimepicker.vue\";\r\n\r\nimport { registerComponent } from \"@/utils/plugins\";\r\n\r\n/** export datetimepicker plugin */\r\nexport default {\r\n    install(app: App) {\r\n        registerComponent(app, Datetimepicker);\r\n    },\r\n} as Plugin;\r\n\r\n/** export datetimepicker components */\r\nexport { Datetimepicker as ODatetimepicker };\r\n"],"names":["ref","computed","useInputHandler","isMobileAgent","watch","_useModel","date","matchWithGroups","defineClasses","registerComponent","Datetimepicker"],"mappings":"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"}