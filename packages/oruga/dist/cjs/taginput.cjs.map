{"version":3,"file":"taginput.cjs","sources":["../../src/components/taginput/Taginput.vue","../../src/components/taginput/index.ts"],"sourcesContent":["<script setup lang=\"ts\" generic=\"T extends String | Number | Object\">\r\nimport {\r\n    computed,\r\n    nextTick,\r\n    ref,\r\n    useAttrs,\r\n    watch,\r\n    watchEffect,\r\n    type ComponentInstance,\r\n    type PropType,\r\n} from \"vue\";\r\n\r\nimport OIcon from \"../icon/Icon.vue\";\r\nimport OAutocomplete from \"../autocomplete/Autocomplete.vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport { getValueByPath } from \"@/utils/helpers\";\r\nimport {\r\n    defineClasses,\r\n    getActiveClasses,\r\n    useInputHandler,\r\n} from \"@/composables\";\r\n\r\nimport type { ComponentClass } from \"@/types\";\r\n\r\n/**\r\n * A simple tag input field that can have autocomplete functionality\r\n * @displayName Taginput\r\n * @style _taginput.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OTaginput\",\r\n    configField: \"taginput\",\r\n    inheritAttrs: false,\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** @model */\r\n    modelValue: { type: Array as PropType<T[]>, default: () => [] },\r\n    /** Items data */\r\n    data: { type: Array as PropType<T[]>, default: () => [] },\r\n    /** Property of the object (if data is array of objects) to use as display text */\r\n    field: { type: String, default: \"value\" },\r\n    /** Property of the object (if `data` is array of objects) to use as display text of group */\r\n    groupField: { type: String, default: undefined },\r\n    /** Property of the object (if `data` is array of objects) to use as key to get items array of each group */\r\n    groupOptions: { type: String, default: undefined },\r\n    /**\r\n     * Vertical size of the input control\r\n     * @values small, medium, large\r\n     */\r\n    size: {\r\n        type: String,\r\n        default: () => getOption(\"taginput.size\"),\r\n    },\r\n    /**\r\n     * Color of the each item\r\n     * @values primary, info, success, warning, danger, and any other custom color\r\n     */\r\n    variant: {\r\n        type: String,\r\n        default: () => getOption(\"taginput.variant\"),\r\n    },\r\n    /** Limits the number of items, plus item counter */\r\n    maxitems: { type: Number, default: undefined },\r\n    /** Same as native maxlength, plus character counter */\r\n    maxlength: { type: Number, default: undefined },\r\n    /** Show counter when maxlength or maxtags props are passed */\r\n    counter: {\r\n        type: Boolean,\r\n        default: () => getOption(\"taginput.counter\", true),\r\n    },\r\n    /** Opens a dropdown with choices when the input field is focused */\r\n    openOnFocus: { type: Boolean, default: false },\r\n    /** Keep open dropdown list after select */\r\n    keepOpen: {\r\n        type: Boolean,\r\n        default: () => getOption(\"autocomplete.keepOpen\", false),\r\n    },\r\n    /** Input placeholder */\r\n    placeholder: { type: String, default: undefined },\r\n    /** Makes input full width when inside a grouped or addon field */\r\n    expanded: { type: Boolean, default: false },\r\n    /** Same as native input disabled */\r\n    disabled: { type: Boolean, default: false },\r\n    /**\r\n     * Array of keys\r\n     * (https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)\r\n     * which will add a item when typing\r\n     */\r\n    confirmKeys: {\r\n        type: Array as PropType<string[]>,\r\n        default: () => getOption(\"taginput.confirmKeys\", [\",\", \"Tab\", \"Enter\"]),\r\n    },\r\n    /** Array of chars used to split when pasting a new string */\r\n    separators: {\r\n        type: Array as PropType<string[]>,\r\n        default: () => getOption(\"taginput.separators\", [\",\"]),\r\n    },\r\n    /** The first option will always be pre-selected (easier to just hit enter or tab) */\r\n    keepFirst: { type: Boolean, default: false },\r\n    /** When autocomplete, it allow to add new items */\r\n    allowNew: { type: Boolean, default: false },\r\n    /** Allows adding the same item multiple time */\r\n    allowDuplicates: { type: Boolean, default: false },\r\n    /** Add autocomplete feature (if true, any Autocomplete props may be used too) */\r\n    allowAutocomplete: { type: Boolean, default: false },\r\n    /** Allow removing last item when pressing given keys, if input is empty */\r\n    removeOnKeys: {\r\n        type: Array as PropType<string[]>,\r\n        default: () => getOption(\"taginput.removeOnKeys\", [\"Backspace\"]),\r\n    },\r\n    /** Function to validate the value of the item before adding */\r\n    beforeAdding: {\r\n        type: Function as PropType<(value: any) => boolean>,\r\n        default: () => true,\r\n    },\r\n    /** Function to create a new item to push into v-model (items) */\r\n    createItem: {\r\n        type: Function as PropType<(value: any) => T>,\r\n        default: (item: any) => item,\r\n    },\r\n    /** Makes the component check if list reached scroll start or end and emit scroll events. */\r\n    checkScroll: {\r\n        type: Boolean,\r\n        default: () => getOption(\"taginput.checkScroll\", false),\r\n    },\r\n    /** Add close/delete button to the item */\r\n    closable: {\r\n        type: Boolean,\r\n        default: () => getOption(\"taginput.closable\", true),\r\n    },\r\n    /**\r\n     * Icon pack to use\r\n     * @values mdi, fa, fas and any other custom icon pack\r\n     */\r\n    iconPack: {\r\n        type: String,\r\n        default: () => getOption(\"taginput.iconPack\"),\r\n    },\r\n    /** Icon to be shown */\r\n    icon: {\r\n        type: String,\r\n        default: () => getOption(\"taginput.icon\"),\r\n    },\r\n    /** Icon name of close icon on selected item */\r\n    closeIcon: {\r\n        type: String,\r\n        default: () => getOption(\"taginput.closeIcon\", \"close\"),\r\n    },\r\n    /** Accessibility label for the close button */\r\n    ariaCloseLabel: {\r\n        type: String,\r\n        default: () => getOption(\"taginput.ariaCloseLabel\"),\r\n    },\r\n    /** Native options to use in HTML5 validation */\r\n    autocomplete: {\r\n        type: String,\r\n        default: () => getOption(\"taginput.autocomplete\", \"off\"),\r\n    },\r\n    /** Enable html 5 native validation */\r\n    useHtml5Validation: {\r\n        type: Boolean,\r\n        default: () => getOption(\"useHtml5Validation\", true),\r\n    },\r\n    /** The message which is shown when a validation error occurs */\r\n    validationMessage: { type: String, default: undefined },\r\n    /**\r\n     * Append the component to another part of the DOM.\r\n     * Set `true` to append the component to the body.\r\n     * In addition, any CSS selector string or an actual DOM node can be used.\r\n     */\r\n    teleport: {\r\n        type: [Boolean, String, Object],\r\n        default: () => getOption(\"taginput.teleport\", false),\r\n    },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of input when expanded */\r\n    expandedClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the input container */\r\n    containerClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the input container size */\r\n    sizeClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the entered item variant */\r\n    variantClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the close button of entered item */\r\n    closeClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the entered item */\r\n    itemClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the counter element */\r\n    counterClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /**\r\n     * Class configuration for the underlying autocomplete component\r\n     * @ignore\r\n     */\r\n    autocompleteClasses: {\r\n        type: Object,\r\n        default: () => getOption(\"taginput.autocompleteClasses\", {}),\r\n    },\r\n});\r\n\r\nconst emits = defineEmits<{\r\n    /**\r\n     * modelValue prop two-way binding\r\n     * @param value {(string | number | object)[]} updated modelValue prop\r\n     */\r\n    (e: \"update:modelValue\", value: T[]): void;\r\n    /**\r\n     * on input change event\r\n     * @param value {String} input value\r\n     */\r\n    (e: \"input\", value: string): void;\r\n    /**\r\n     * new item got added\r\n     * @param value {string | number | object} added item\r\n     */\r\n    (e: \"add\", value: T): void;\r\n    /**\r\n     * item got removed\r\n     * @param value {string | number | object} removed item\r\n     */\r\n    (e: \"remove\", value: T): void;\r\n    /**\r\n     * on input focus event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"focus\", event: Event): void;\r\n    /**\r\n     * on input blur event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"blur\", event: Event): void;\r\n    /**\r\n     * on input invalid event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"invalid\", event: Event): void;\r\n    /**\r\n     * on icon click event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"icon-click\", event: Event): void;\r\n    /**\r\n     * on icon right click event\r\n     * @param event {Event} native event\r\n     */\r\n    (e: \"icon-right-click\", event: Event): void;\r\n    /** the list inside the dropdown reached the start */\r\n    (e: \"scroll-start\"): void;\r\n    /** the list inside the dropdown reached it's end */\r\n    (e: \"scroll-end\"): void;\r\n}>();\r\n\r\nconst autocompleteRef = ref<ComponentInstance<typeof OAutocomplete<T>>>();\r\n\r\nconst items = defineModel<T[]>({ default: [] });\r\n\r\n// use form input functionalities\r\nconst { setFocus, onFocus, onBlur, onInvalid } = useInputHandler(\r\n    autocompleteRef,\r\n    emits,\r\n    props,\r\n);\r\n\r\nconst newItem = ref<string>(\"\");\r\nconst isComposing = ref(false);\r\n\r\nconst valueLength = computed(() => newItem.value.trim().length);\r\nconst itemsLength = computed(() => items.value.length);\r\n\r\n/** When modelValue is changed set internal value. */\r\nwatch(\r\n    () => props.modelValue,\r\n    (value) => {\r\n        items.value = Array.isArray(value) ? value.slice(0) : value || [];\r\n    },\r\n);\r\n\r\n/** Show the input field if a maxitems hasn't been set or reached. */\r\nconst hasInput = computed(\r\n    () => props.maxitems == null || itemsLength.value < props.maxitems,\r\n);\r\n\r\nwatchEffect(() => {\r\n    // blur if input is empty\r\n    if (!hasInput.value) onBlur();\r\n});\r\n\r\n/**\r\n * If input has pasteSeparators prop,\r\n * returning new RegExp used to split pasted string.\r\n */\r\nconst separatorsAsRegExp = computed(() =>\r\n    props.separators.length\r\n        ? new RegExp(\r\n              props.separators\r\n                  .map((s) =>\r\n                      s ? s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\") : null,\r\n                  )\r\n                  .join(\"|\"),\r\n              \"g\",\r\n          )\r\n        : null,\r\n);\r\n\r\nfunction getNormalizedItemText(item: T): string {\r\n    if (typeof item === \"object\") item = getValueByPath(item, props.field);\r\n    return `${item}`;\r\n}\r\n\r\nfunction addItem(item?: T | string): void {\r\n    item = item || newItem.value.trim();\r\n\r\n    if (item ) {\r\n        if (typeof item === \"string\") {\r\n            const reg = separatorsAsRegExp.value;\r\n            if (reg && item.match(reg)) {\r\n                item.split(reg)\r\n                    .map((t) => t.trim())\r\n                    .filter((t) => t.length !== 0)\r\n                    .map(addItem);\r\n                return;\r\n            }\r\n        }\r\n        // Add the item input if it is not blank\r\n        // or previously added (if not allowDuplicates).\r\n        const itemToAdd = props.createItem(item);\r\n        const add = !props.allowDuplicates\r\n            ? items.value.indexOf(itemToAdd) === -1\r\n            : true;\r\n        if (add && props.beforeAdding(item)) {\r\n            items.value.push(itemToAdd);\r\n            emits(\"add\", itemToAdd);\r\n        }\r\n    }\r\n\r\n    // after autocomplete events\r\n    requestAnimationFrame(() => {\r\n        newItem.value = \"\";\r\n        emits(\"input\", newItem.value);\r\n    });\r\n}\r\n\r\nfunction removeItem(index: number, event?: Event): void {\r\n    const item = items.value.splice(index, 1)[0];\r\n    emits(\"remove\", item);\r\n    if (event) event.stopPropagation();\r\n    if (props.openOnFocus && autocompleteRef.value) setFocus();\r\n}\r\n\r\n// --- Event Handler ---\r\n\r\nfunction onSelect(option: T): void {\r\n    if (!option) return;\r\n    addItem(option);\r\n    nextTick(() => (newItem.value = \"\"));\r\n}\r\n\r\nfunction onKeydown(event: KeyboardEvent): void {\r\n    if (\r\n        props.removeOnKeys.indexOf(event.key) !== -1 &&\r\n        !newItem.value?.length &&\r\n        itemsLength.value > 0\r\n    ) {\r\n        // remove last item\r\n        removeItem(itemsLength.value - 1);\r\n    }\r\n    // Stop if is to accept select only\r\n    if (props.allowAutocomplete && !props.allowNew) return;\r\n\r\n    if (props.confirmKeys.indexOf(event.key) >= 0) {\r\n        // Allow Tab to advance to next field regardless\r\n        if (event.key !== \"Tab\") event.preventDefault();\r\n        if (event.key === \"Enter\" && isComposing.value) return;\r\n        addItem();\r\n    }\r\n}\r\n\r\nfunction onInput(value: string | number): void {\r\n    emits(\"input\", String(value).trim());\r\n}\r\n\r\nfunction handleOnBlur(event: Event): void {\r\n    // Add item on-blur if not select only\r\n    if (!props.allowAutocomplete) addItem();\r\n    onBlur(event);\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst attrs = useAttrs();\r\n\r\nconst autocompleteRootClasses = defineClasses([\r\n    \"autocompleteClasses.rootClass\",\r\n    \"o-taginput__autocomplete\",\r\n]);\r\n\r\nconst autocompleteInputClasses = defineClasses([\r\n    \"autocompleteClasses.inputClasses.inputClass\",\r\n    \"o-taginput__input\",\r\n]);\r\n\r\nconst autocompleteBind = computed(() => ({\r\n    ...attrs,\r\n    \"root-class\": getActiveClasses(autocompleteRootClasses.value),\r\n    \"input-classes\": {\r\n        \"input-class\": getActiveClasses(autocompleteInputClasses.value),\r\n    },\r\n    ...props.autocompleteClasses,\r\n}));\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"rootClass\", \"o-taginput\"],\r\n    [\r\n        \"expandedClass\",\r\n        \"o-taginput--expanded\",\r\n        null,\r\n        computed(() => props.expanded),\r\n    ],\r\n);\r\n\r\nconst containerClasses = defineClasses(\r\n    [\"containerClass\", \"o-taginput__container\"],\r\n    [\r\n        \"sizeClass\",\r\n        \"o-taginput__container--\",\r\n        computed(() => props.size),\r\n        computed(() => !!props.size),\r\n    ],\r\n);\r\n\r\nconst itemClasses = defineClasses(\r\n    [\"itemClass\", \"o-taginput__item\"],\r\n    [\r\n        \"variantClass\",\r\n        \"o-taginput__item--\",\r\n        computed(() => props.variant),\r\n        computed(() => !!props.variant),\r\n    ],\r\n);\r\n\r\nconst closeClasses = defineClasses([\"closeClass\", \"o-taginput__item__close\"]);\r\n\r\nconst counterClasses = defineClasses([\"counterClass\", \"o-taginput__counter\"]);\r\n\r\n// --- Expose Public Functionalities ---\r\n\r\n/** expose functionalities for programmatic usage */\r\ndefineExpose({ focus: setFocus });\r\n</script>\r\n\r\n<template>\r\n    <div data-oruga=\"taginput\" :class=\"rootClasses\">\r\n        <div :class=\"containerClasses\" @focus=\"onFocus\" @blur=\"onBlur\">\r\n            <!--\r\n                @slot Override selected items\r\n                @binding {unknown[]} items - selected items\r\n            -->\r\n            <slot name=\"selected\" :items=\"items\">\r\n                <span\r\n                    v-for=\"(item, index) in items\"\r\n                    :key=\"getNormalizedItemText(item) + index\"\r\n                    :class=\"itemClasses\">\r\n                    <span>{{ getNormalizedItemText(item) }}</span>\r\n                    <o-icon\r\n                        v-if=\"closable\"\r\n                        :class=\"closeClasses\"\r\n                        clickable\r\n                        :pack=\"iconPack\"\r\n                        :icon=\"closeIcon\"\r\n                        :aria-label=\"ariaCloseLabel\"\r\n                        both\r\n                        @click=\"removeItem(index, $event)\" />\r\n                </span>\r\n            </slot>\r\n\r\n            <o-autocomplete\r\n                v-show=\"hasInput\"\r\n                ref=\"autocompleteRef\"\r\n                v-model=\"newItem\"\r\n                v-bind=\"autocompleteBind\"\r\n                :data=\"data\"\r\n                :field=\"field\"\r\n                :icon=\"icon\"\r\n                :icon-pack=\"iconPack\"\r\n                :maxlength=\"maxlength\"\r\n                :size=\"size\"\r\n                :disabled=\"disabled\"\r\n                :autocomplete=\"autocomplete\"\r\n                :open-on-focus=\"openOnFocus\"\r\n                :keep-first=\"keepFirst\"\r\n                :keep-open=\"keepOpen\"\r\n                :group-field=\"groupField\"\r\n                :group-options=\"groupOptions\"\r\n                :has-counter=\"false\"\r\n                :use-html5-validation=\"useHtml5Validation\"\r\n                :check-scroll=\"checkScroll\"\r\n                :teleport=\"teleport\"\r\n                :confirm-keys=\"confirmKeys\"\r\n                :placeholder=\"placeholder\"\r\n                :validation-message=\"validationMessage\"\r\n                :expanded=\"expanded\"\r\n                @input=\"onInput\"\r\n                @focus=\"onFocus\"\r\n                @blur=\"handleOnBlur\"\r\n                @invalid=\"onInvalid\"\r\n                @keydown=\"onKeydown\"\r\n                @compositionstart=\"isComposing = true\"\r\n                @compositionend=\"isComposing = false\"\r\n                @select=\"onSelect\"\r\n                @scroll-start=\"$emit('scroll-start')\"\r\n                @scroll-end=\"$emit('scroll-end')\"\r\n                @icon-click=\"$emit('icon-click', $event)\"\r\n                @icon-right-click=\"$emit('icon-right-click', $event)\">\r\n                <template v-if=\"$slots.header\" #header>\r\n                    <!--\r\n                        @slot Define an additional header\r\n                    -->\r\n                    <slot name=\"header\" />\r\n                </template>\r\n\r\n                <template v-if=\"$slots.default\" #default=\"props\">\r\n                    <!--\r\n                        @slot Override the select option\r\n                        @binding {object} option - option object\r\n                        @binding {number} index - option index\r\n                        @binding {unknown} value - option value\r\n                    -->\r\n                    <slot\r\n                        :option=\"props.option\"\r\n                        :index=\"props.index\"\r\n                        :value=\"props.value\" />\r\n                </template>\r\n\r\n                <template v-if=\"$slots.empty\" #empty>\r\n                    <!--\r\n                        @slot Define content for empty state \r\n                    -->\r\n                    <slot name=\"empty\" />\r\n                </template>\r\n\r\n                <template v-if=\"$slots.footer\" #footer>\r\n                    <!--\r\n                        @slot Define an additional footer\r\n                    -->\r\n                    <slot name=\"footer\" />\r\n                </template>\r\n            </o-autocomplete>\r\n        </div>\r\n\r\n        <small\r\n            v-if=\"counter && (maxitems || maxlength)\"\r\n            :class=\"counterClasses\">\r\n            <template v-if=\"maxlength && valueLength > 0\">\r\n                <!--\r\n                    @slot Override the counter\r\n                    @binding {number} items - items count\r\n                    @binding {number} total - total count\r\n                -->\r\n                <slot name=\"counter\" :items=\"valueLength\" :total=\"maxlength\">\r\n                    {{ valueLength }} / {{ maxlength }}\r\n                </slot>\r\n            </template>\r\n\r\n            <template v-else-if=\"maxitems\">\r\n                <!--\r\n                    @slot Override the counter\r\n                    @binding {number} items - items count\r\n                    @binding {number} total - total count\r\n                -->\r\n                <slot name=\"counter\" :items=\"itemsLength\" :total=\"maxitems\">\r\n                    {{ itemsLength }} / {{ maxitems }}\r\n                </slot>\r\n            </template>\r\n        </small>\r\n    </div>\r\n</template>\r\n","import type { App, Plugin } from \"vue\";\r\n\r\nimport Taginput from \"./Taginput.vue\";\r\n\r\nimport { registerComponent } from \"@/utils/plugins\";\r\n\r\n/** export taginput plugin */\r\nexport default {\r\n    install(Vue: App) {\r\n        registerComponent(Vue, Taginput);\r\n    },\r\n} as Plugin;\r\n\r\n/** export taginput components */\r\nexport { Taginput as OTaginput };\r\n"],"names":["ref","_useModel","useInputHandler","computed","watch","watchEffect","getValueByPath","index","nextTick","useAttrs","defineClasses","getActiveClasses","registerComponent","Taginput"],"mappings":"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"}