{"version":3,"file":"Icon.vue_vue_type_script_setup_true_lang-CGDJNR6y.cjs","sources":["../../src/utils/icons.ts","../../src/components/icon/Icon.vue"],"sourcesContent":["import { getOption } from \"./config\";\r\nimport { merge } from \"./helpers\";\r\n\r\nexport type IconConfig = {\r\n    sizes?: { default: string; [key: string]: string };\r\n    iconPrefix?: string;\r\n    internalIcons?: Record<string, string>;\r\n};\r\n\r\nconst mdiIcons = {\r\n    sizes: {\r\n        default: \"mdi-24px\",\r\n        small: null,\r\n        medium: \"mdi-36px\",\r\n        large: \"mdi-48px\",\r\n    },\r\n    iconPrefix: \"mdi-\",\r\n};\r\n\r\nconst faIcons = () => {\r\n    const iconComponent = getOption(\"iconComponent\");\r\n    const faIconPrefix = iconComponent ? \"\" : \"fa-\";\r\n    return {\r\n        sizes: {\r\n            default: null,\r\n            small: null,\r\n            medium: \"lg\",\r\n            large: \"2xl\",\r\n        },\r\n        iconPrefix: faIconPrefix,\r\n        internalIcons: {\r\n            check: \"check\",\r\n            information: \"info-circle\",\r\n            alert: \"exclamation-triangle\",\r\n            \"alert-circle\": \"exclamation-circle\",\r\n            \"arrow-up\": \"arrow-up\",\r\n            \"chevron-right\": \"angle-right\",\r\n            \"chevron-left\": \"angle-left\",\r\n            \"chevron-down\": \"angle-down\",\r\n            \"chevron-up\": \"angle-up\",\r\n            eye: \"eye\",\r\n            \"eye-off\": \"eye-slash\",\r\n            \"caret-down\": \"caret-down\",\r\n            \"caret-up\": \"caret-up\",\r\n            \"close-circle\": \"times-circle\",\r\n            close: \"times\",\r\n            loading: \"circle-notch\",\r\n        },\r\n    };\r\n};\r\n\r\nconst getIcons = (): Record<string, IconConfig> => {\r\n    let icons: Record<string, IconConfig> = {\r\n        mdi: mdiIcons,\r\n        fa: faIcons(),\r\n        fas: faIcons(),\r\n        far: faIcons(),\r\n        fad: faIcons(),\r\n        fab: faIcons(),\r\n        fal: faIcons(),\r\n    };\r\n\r\n    const customIconPacks =\r\n        getOption<Record<string, IconConfig>>(\"customIconPacks\");\r\n    if (customIconPacks) icons = merge(icons, customIconPacks, true);\r\n\r\n    return icons;\r\n};\r\n\r\nexport default getIcons;\r\n","<script setup lang=\"ts\">\r\nimport { computed, type PropType } from \"vue\";\r\n\r\nimport { getOption } from \"@/utils/config\";\r\nimport getIcons from \"@/utils/icons\";\r\nimport { defineClasses } from \"@/composables\";\r\n\r\nimport type { ComponentClass } from \"@/types\";\r\n\r\n/**\r\n * Icons take an important role of any application\r\n * @displayName Icon\r\n * @style _icon.scss\r\n */\r\ndefineOptions({\r\n    isOruga: true,\r\n    name: \"OIcon\",\r\n    configField: \"icon\",\r\n});\r\n\r\nconst props = defineProps({\r\n    /** Override existing theme classes completely */\r\n    override: { type: Boolean, default: undefined },\r\n    /** Icon component name */\r\n    component: {\r\n        type: String,\r\n        default: () => getOption(\"iconComponent\"),\r\n    },\r\n    /**\r\n     * Icon pack to use\r\n     * @values mdi, fa, fas and any other custom icon pack\r\n     */\r\n    pack: {\r\n        type: String,\r\n        default: () => getOption(\"iconPack\", \"mdi\"),\r\n    },\r\n    /**\r\n     * \tColor of the icon\r\n     *  @values primary, info, success, warning, danger, and any other custom color\r\n     */\r\n    variant: {\r\n        type: String,\r\n        default: () => getOption(\"icon.variant\"),\r\n    },\r\n    /** Icon name */\r\n    icon: { type: String, default: undefined },\r\n    /**\r\n     * Icon size\r\n     * @values small, medium, large\r\n     */\r\n    size: {\r\n        type: String,\r\n        default: () => getOption(\"icon.size\"),\r\n    },\r\n    /**\r\n     * Overrides icon font size\r\n     * @values Depends on library: null (smallest), fa-sm, fa-lg, fa-xl, mdi-18px, mdi-24px, mdi-36px, mdi-48px\r\n     */\r\n    customSize: { type: String, default: undefined },\r\n    /**\r\n     * Add class to icon font.\r\n     * See icon library documentation for custom classes.\r\n     */\r\n    customClass: { type: String, default: undefined },\r\n    /** When true makes icon clickable */\r\n    clickable: { type: Boolean, default: false },\r\n    /** Enable spin effect on icon */\r\n    spin: { type: Boolean, default: false },\r\n    /** Rotation 0-360 */\r\n    rotation: { type: [Number, String], default: undefined },\r\n    /**\r\n     * This is used internally\r\n     * @ignore\r\n     */\r\n    both: { type: Boolean, default: false },\r\n    // class props (will not be displayed in the docs)\r\n    /** Class of the root element */\r\n    rootClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the icon when clickable */\r\n    clickableClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the element when spin */\r\n    spinClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the icon size */\r\n    sizeClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n    /** Class of the icon variant */\r\n    variantClass: {\r\n        type: [String, Array, Function] as PropType<ComponentClass>,\r\n        default: undefined,\r\n    },\r\n});\r\n\r\nconst rootStyle = computed(() => {\r\n    const style = {};\r\n    if (props.rotation) {\r\n        style[\"transform\"] = `rotate(${props.rotation}deg)`;\r\n    }\r\n    return style;\r\n});\r\n\r\nconst iconConfig = computed(() => getIcons()[props.pack]);\r\n\r\nconst iconPrefix = computed(() =>\r\n    iconConfig.value?.iconPrefix ? iconConfig.value.iconPrefix : \"\",\r\n);\r\n\r\nconst customSizeByPack = computed(() => {\r\n    if (iconConfig.value?.sizes) {\r\n        if (props.size && iconConfig.value.sizes[props.size] !== undefined) {\r\n            return iconConfig.value.sizes[props.size];\r\n        } else if (iconConfig.value.sizes.default) {\r\n            return iconConfig.value.sizes.default;\r\n        }\r\n    }\r\n    return null;\r\n});\r\n\r\n/**\r\n * Internal icon name based on the pack.\r\n * If pack is 'fa', gets the equivalent FA icon name of the MDI,\r\n * internal icons are always MDI.\r\n */\r\nconst computedIcon = computed(\r\n    () => `${iconPrefix.value}${getEquivalentIconOf(props.icon)}`,\r\n);\r\n\r\nconst computedSize = computed(() => props.customSize || customSizeByPack.value);\r\n\r\nconst computedVariant = computed(() => {\r\n    if (!props.variant) return;\r\n    let newVariant = \"\";\r\n    if (typeof props.variant === \"string\") {\r\n        newVariant = props.variant;\r\n    } else {\r\n        newVariant = Object.keys(props.variant).filter(\r\n            (key) => props.variant[key],\r\n        )[0];\r\n    }\r\n    return newVariant;\r\n});\r\n\r\n/** Equivalent icon name of the MDI. */\r\nfunction getEquivalentIconOf(value): string {\r\n    // Only transform the class if the both prop is set to true\r\n    if (!props.both) return value;\r\n    if (\r\n        iconConfig.value?.internalIcons &&\r\n        iconConfig.value?.internalIcons[value]\r\n    )\r\n        return iconConfig.value.internalIcons[value];\r\n    return value;\r\n}\r\n\r\n// --- Computed Component Classes ---\r\n\r\nconst rootClasses = defineClasses(\r\n    [\"rootClass\", \"o-icon\"],\r\n    [\r\n        \"clickableClass\",\r\n        \"o-icon--clickable\",\r\n        null,\r\n        computed(() => props.clickable),\r\n    ],\r\n    [\"spinClass\", \"o-icon--spin\", null, computed(() => props.spin)],\r\n    [\r\n        \"sizeClass\",\r\n        \"o-icon--\",\r\n        computed(() => props.size),\r\n        computed(() => !!props.size),\r\n    ],\r\n    [\r\n        \"variantClass\",\r\n        \"o-icon--\",\r\n        computedVariant,\r\n        computed(() => !!computedVariant.value),\r\n    ],\r\n);\r\n</script>\r\n\r\n<template>\r\n    <span :class=\"rootClasses\" data-oruga=\"icon\" :style=\"rootStyle\">\r\n        <!-- custom icon component -->\r\n        <component\r\n            :is=\"component\"\r\n            v-if=\"component\"\r\n            :icon=\"[pack, computedIcon]\"\r\n            :size=\"computedSize\"\r\n            :class=\"[customClass]\" />\r\n\r\n        <!-- native css icon -->\r\n        <i v-else :class=\"[pack, computedIcon, computedSize, customClass]\" />\r\n    </span>\r\n</template>\r\n"],"names":["getOption","merge","computed","getIcons","defineClasses"],"mappings":"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"}